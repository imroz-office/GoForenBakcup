from django.shortcuts import render, redirect, get_object_or_404
from django.template.loader import render_to_string
from io import BytesIO
from xhtml2pdf import pisa
from django.utils import timezone
from django.db import connection
from django.db.models import Q, Max
from django.core.exceptions import ValidationError
from django.contrib import messages 
from decimal import Decimal
from .models import *
from urllib.parse import unquote
from django.db import transaction
from django.utils.dateparse import parse_datetime
from django.db.models import Sum
from django.contrib.auth import logout
from django.urls import reverse
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_GET
import logging
from openpyxl import Workbook
from django.http import HttpResponse
from datetime import datetime, timedelta, date
import io
import openpyxl
from django.core.files.storage import FileSystemStorage
import pandas as pd
import json
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import xlrd
from num2words import num2words
import re
from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework import status
from rest_framework.views import APIView
from django.http import HttpResponseRedirect
from .utils import send_whatsapp_message
import hashlib
import requests
from django.conf import settings
from django.db.models.functions import ExtractYear, ExtractMonth
from dateutil.relativedelta import relativedelta
import base64
import time 
from django.db.models import Max     
from dateutil import parser
from openpyxl.utils import get_column_letter
import random
import string
from django.utils.crypto import get_random_string
from django.contrib.auth import authenticate
from django.utils.dateparse import parse_date
from django.views.decorators.http import require_POST
from django.db.models import Count
from django.utils.timezone import make_aware
from openpyxl.styles import Alignment, Font
import calendar
from openpyxl.utils import get_column_letter
from calendar import monthrange
import os
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage

import mysql.connector 

# import sqlite3

# def deactivate_completed_interns(request):
#     today = date.today()
#     # Filter interns whose completion_date is today or earlier and are still active
#     completed_interns = tbl_intern.objects.filter(completion_date__lte=today, is_active=True)
#     # Deactivate them
#     completed_interns.update(is_active=False)
    
#     # Optional: Redirect back to a page or show a success message
#     return redirect('intern_list')  # Replace 'some_view_name' with the actual view you want to redirect to

def deactivate_completed_interns(request):
    today = date.today()

    # Get active interns whose completion_date is today or earlier
    completed_interns = tbl_intern.objects.filter(completion_date__lte=today, is_active=True)

    # Get their emp_ids
    intern_emp_ids = list(completed_interns.values_list('emp_id', flat=True))

    # Deactivate those interns
    completed_interns.update(is_active=False)

    # Now deactivate users whose intern_id matches any of the intern emp_ids
    users_to_deactivate = tbl_users2.objects.filter(intern_id__in=intern_emp_ids, is_active=True)
    users_to_deactivate.update(is_active=False)

    return redirect('intern_list')  # Update with the correct redirect target

def deactivate_old_employees(request):
    today = date.today()

    # Get active employees whose termination date is today or earlier
    old_employees = tbl_employee.objects.filter(termi_date__lte=today, is_active=True)
    
    # Get their emp_ids
    old_emp_ids = list(old_employees.values_list('emp_id', flat=True))

    # Deactivate those employees
    old_employees.update(is_active=False)

    # Deactivate users whose emp_id matches the employee emp_id
    users_to_deactivate = tbl_users2.objects.filter(
        is_active=True,
        emp_id__in=old_emp_ids
    )

    users_to_deactivate.update(is_active=False)

    return redirect('employee_list')

def generate_employee_id():
    # Get today's date in YYYYMMDD format
    today_str = datetime.now().strftime('%Y%m%d')
    prefix = f"SIT{today_str}"

    # Find the max employee ID with today's prefix
    last_employee = tbl_employee.objects.filter(employee_id_custom__startswith=prefix).aggregate(
        Max('employee_id_custom')
    )['employee_id_custom__max']

    if last_employee:
        # Extract the counter from the last ID and increment it
        last_counter = int(last_employee[-2:])
        new_counter = last_counter + 1
    else:
        new_counter = 1

    # Format counter as two digits
    counter_str = f"{new_counter:02d}"

    # Construct final employee ID
    return f"{prefix}{counter_str}"

def generate_intern_id():
    # Get today's date in YYYYMMDD format
    today_str = datetime.now().strftime('%Y%m%d')
    prefix = f"SITI{today_str}"

    # Find the max employee ID with today's prefix
    last_employee = tbl_intern.objects.filter(intern_id_custom__startswith=prefix).aggregate(
        Max('intern_id_custom')
    )['intern_id_custom__max']

    if last_employee:
        # Extract the counter from the last ID and increment it
        last_counter = int(last_employee[-2:])
        new_counter = last_counter + 1
    else:
        new_counter = 1

    # Format counter as two digits
    counter_str = f"{new_counter:02d}"

    # Construct final employee ID
    return f"{prefix}{counter_str}"

# Create your views here.

cnx = mysql.connector.connect(user='root', password='', host='localhost', database='shubhamsingh_sit_crm') 
# cnx = mysql.connector.connect(user='shubhamsingh_sit_crm', password='kish@1102', host='localhost', database='shubhamsingh_sit_crm')
cursor = cnx.cursor(dictionary=True)

# cnx = sqlite3.connect("db.sqlite3")  # or use BASE_DIR / 'db.sqlite3' if you're inside Django
# cnx.row_factory = sqlite3.Row  # This mimics dictionary-like cursor
# cursor = cnx.cursor()

def log_user_activity(ope, comment, lanti, longti, by_user_id, by_user_name, status):
    cnx = mysql.connector.connect(user='root', password='', host='localhost', database='shubhamsingh_sit_crm')
    # cnx = mysql.connector.connect(user='shubhamsingh_sit_crm', password='kish@1102', host='localhost', database='shubhamsingh_sit_crm')
    cursor = cnx.cursor() 

    insert_query = """
        INSERT INTO tbl_log (ope, comment, lanti, longti, by_user_id, by_user_name, date_time, status)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
    """
    data = (ope, comment, lanti, longti, by_user_id, by_user_name, timezone.now(), status)

    cursor.execute(insert_query, data)
    cnx.commit()
    cursor.close()
    cnx.close()  
    
def get_client_ip(request):
    """Utility to extract IP address from request."""
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip

def login(request):
    if request.method == 'POST':
        mobile = request.POST.get('mobile')
        password = request.POST.get('password')

        cnx = mysql.connector.connect(user='root', password='', host='localhost', database='shubhamsingh_sit_crm')
        # cnx = mysql.connector.connect(user='shubhamsingh_sit_crm', password='kish@1102', host='localhost', database='shubhamsingh_sit_crm')
        cursor = cnx.cursor(dictionary=True)
        cursor.execute('SELECT * FROM tbl_users2 WHERE mobile = %s', (mobile,))
        user = cursor.fetchone()

        if user:
            if user['is_active']:  # fixed here
                if user['password'] == password:
                    # Clear any existing session data before setting new values
                    request.session.flush()
    
                    # Store new session data
                    request.session['session_id'] = user['userId']
                    name_ = user['name'] or ""
                    middle_name_ = user['middle_name'] or ""
                    last_name_ = user['last_name'] or ""
                    request.session['session_user'] = f"{name_} {middle_name_} {last_name_}" 
                    
                    session_roleids = user['role_id']
                    session_roleid_list = session_roleids.split(',') if session_roleids else []
                    request.session['session_roleid'] = session_roleid_list 
                    
                    session_dpids = user['dp_id']
                    session_dpid_list = session_dpids.split(',') if session_dpids else []
                    request.session['department_id'] = session_dpid_list 
                    
                    request.session['user_compney'] = user['company_name']
                    request.session['company_id'] = user['company_id']
                    # request.session['department_id'] = user['dp_id']
                    request.session['head_id'] = user['head_id']
                    request.session['session_rolename'] = user['role_name']
                    request.session['session_mobile'] = user['mobile']
                    request.session['session_empId'] = user['emp_id'] 
                    request.session['emp_type'] = user['emp_type']
                    request.session['intern_id'] = user['intern_id']
                    request.session['is_active'] = user['is_active'] 
                    
                    ip_address = get_client_ip(request)
                    
                    tbl_messages.objects.create(
                        message_name = request.session['session_user'],
                        change_status=f"Login Successfully.",
                        added_date = timezone.now() + timedelta(hours=5, minutes=30),
                        company_id = request.session['company_id'],
                        user_id = request.session['session_id'],
                        ip_address = ip_address,
                    )
                    
                    # log_user_activity(
                    #     ope='Login',
                    #     comment='User logged in successfully.',
                    #     lanti=user.get('2.22'),
                    #     longti=user.get('0.45'),
                    #     by_user_id=user['userId'],
                    #     by_user_name=user['name'],
                    #     status='online' 
                    # )
    
                    # update_query = "UPDATE tbl_users2 SET login_logout = 'login' WHERE userId = %s"
                    # cursor.execute(update_query, (user['userId'],))
                    # cnx.commit()
                    # cnx.close()
    
                    return redirect(index)
                else:
                    return render(request, 'login.html', {'incorrect_password': True})
            else:
                return render(request, 'login.html', {'user_disabled': True})
        else:
            cnx.close() 
            return render(request, 'login.html', {'user_not_valid': True})
    return render(request, "login.html")

@csrf_exempt
def unlock_screen(request): 
    if request.method == 'POST':
        data = json.loads(request.body)
        password = data.get('password')

        # Assuming user is logged in and user info is in session:
        user_id = request.session.get('session_id')
        mobile = request.session.get('session_mobile')

        if not user_id or not mobile:
            return JsonResponse({'success': False, 'error': 'Session expired.'})

        # Connect DB and validate password again
        cnx = mysql.connector.connect(user='root', password='', host='localhost', database='shubhamsingh_sit_crm')
        # cnx = mysql.connector.connect(user='shubhamsingh_sit_crm', password='kish@1102', host='localhost', database='shubhamsingh_sit_crm')
        cursor = cnx.cursor(dictionary=True)
        cursor.execute('SELECT * FROM tbl_users2 WHERE userId = %s', (user_id,))
        user = cursor.fetchone()
        cnx.close()

        if user and user['password'] == password:
            return JsonResponse({'success': True})
        else:
            return JsonResponse({'success': False, 'error': 'Incorrect password.'})

    return JsonResponse({'success': False, 'error': 'Invalid request.'})

def logout_view(request):
    user_name = request.session.get('session_user')
    
    ip_address = get_client_ip(request)
    tbl_messages.objects.create(
        message_name=user_name,
        change_status="Logged Out.",
        added_date=timezone.now() + timedelta(hours=5, minutes=30),
        company_id = request.session['company_id'],
        user_id = request.session['session_id'],
        ip_address = ip_address,
    )
     
    logout(request)
    return redirect(login)
    
def Log(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        user_data = tbl_users2.objects.all()
        messages = tbl_messages.objects.order_by('-messages_id')
        
        date_range_filter = request.GET.get('date_range')
        user_id = request.GET.get('userId')
            
        if date_range_filter:
            try:
                start_str, end_str = date_range_filter.split(' - ')
                start_date = parser.parse(start_str.strip())
                end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                messages = messages.filter(added_date__gte=start_date, added_date__lte=end_date)
            except Exception as e:
                print(f"Date parsing error: {e}")
            
        if user_id:
            messages = messages.filter(user_id=user_id)
            
        messages = messages.order_by('-messages_id')

        return render(request,"Log.html",{'user_data':user_data,'messages':messages,'session_roleid':session_roleid})
    else:
        return redirect(login)
    
def fetch_new_messages(request):
    messages = tbl_messages.objects.order_by('-messages_id')

    message_data = [
        {
            'message_name': message.message_name,
            'change_status': message.change_status,
            'added_date': message.added_date.strftime('%d-%m-%Y')
        }
        for message in messages
    ]
    
    return JsonResponse(message_data, safe=False)
    
def fetch_companies(request):
    companies = master_company.objects.order_by('-com_id')

    company_data = [
        {
            'com_id': com.com_id,
            'com_name': com.com_name,
        }
        for com in companies
    ]
    selected_company_id = request.session.get('selected_company_id', 0)
    return JsonResponse({'company_data': company_data,'selected_company_id': selected_company_id}, safe=False)
    
@csrf_exempt
def save_selected_company(request):
    if request.method == 'POST':
        company_id = request.POST.get('company_id')

        if company_id == '0':
            request.session['selected_company_id'] = 0
        else:
            request.session['selected_company_id'] = company_id
            
        return JsonResponse({'message': 'Company selected successfully.'})
    else:
        return JsonResponse({'error': 'Invalid request method.'}, status=400)
 
def index(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        company_id = request.session.get('company_id')
        data = tbl_users2.objects.filter(role_id=session_roleid)
        pending_project = master_project.objects.filter(status="Pending")
        running_project= master_project.objects.filter(status="Running")
        today = timezone.now().date()
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    meeting_data = tbl_lead.objects.filter(next_meeting_date__date=today,company_id=selected_company_id).order_by('-l_id')
                    lead_data = tbl_lead.objects.filter(company_id=selected_company_id)
                    dcr_data = tbl_dcr.objects.filter(company_id=selected_company_id)
                    task_data = tbl_task.objects.filter(company_id=selected_company_id ).order_by('-taskId')
                else:
                    meeting_data = tbl_lead.objects.filter(next_meeting_date__date=today).order_by('-l_id')
                    lead_data = tbl_lead.objects.all()
                    dcr_data = tbl_dcr.objects.all()
                    task_data = tbl_task.objects.all().order_by('-taskId')
                    
            elif set(session_roleid).intersection({"2" , "6"}):
                meeting_data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(next_meeting_date__date=today) 
                ).order_by('-l_id')
                
                lead_data = tbl_lead.objects.filter(
                    Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id),
                    company_id=company_id
                )
                dcr_data = tbl_dcr.objects.filter(
                    Q(head_id=session_id) | Q(add_by_id=session_id),
                    company_id=company_id
                )
                task_data = tbl_task.objects.filter(Q(assign_to=session_id) | Q(assign_by=session_id)).order_by('-taskId')
            else:
                meeting_data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(next_meeting_date__date=today)
                ).order_by('-l_id')
                
                lead_data = tbl_lead.objects.filter(
                    Q(add_by_id=session_id) | Q(assign_to=session_id)
                )
                dcr_data = tbl_dcr.objects.filter(add_by_id=session_id)
                task_data = tbl_task.objects.filter(assign_to=session_id).order_by('-taskId')
                
            all_inquiry = lead_data.count()
            all_dcr = dcr_data.count()
            fresh_inquiry = lead_data.filter(status="Fresh").count()
            Won_inquiry = lead_data.filter(status="Won").count()
            
            complete_task_count = task_data.filter(status="Complete").count()
            pending_task_count = task_data.filter(status="Pending").count()
            revise_task_count = task_data.filter(status="Rewaise").count()
            urgent_task_count = task_data.filter(task_type="Urgent").count()
            
        today_date = date.today()
        
        total_payment_voucher = Decimal('0.00')
        
        pay_obj = tbl_payment_v.objects.all()
        for p in pay_obj:
            try:
                amount = Decimal(p.total or '0.00')
            except:
                amount = Decimal('0.00')
            
            total_payment_voucher += amount
        
        total_reciept_voucher = Decimal('0.00')
        
        rec_obj = tbl_receive_v.objects.all()
        for r in rec_obj:
            try:
                r_amount = Decimal(r.total or '0.00')
            except:
                r_amount = Decimal('0.00')
            
            total_reciept_voucher += r_amount
        
        total_invoice = Decimal('0.00')
        
        inv_obj = tbl_invoice.objects.all()
        for i in inv_obj:
            try:
                i_amount = Decimal(i.totalAmount or '0.00')
            except:
                i_amount = Decimal('0.00')
            
            total_invoice += i_amount
        
        total_clients = master_client.objects.all().count()

        total_grand_amount_today = tbl_invoice.objects.filter(date__date=today).aggregate(Sum('grandAmount'))
        
        total_grand_amount_today = total_grand_amount_today.get('grandAmount__sum', 0)
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT tbl_roles.role AS user_name, tbl_users2.role_id AS role_id
                FROM tbl_roles
                INNER JOIN tbl_users2 ON tbl_users2.role_id = tbl_roles.roleId
            """)
            user_tasks = cursor.fetchall()

        # Create a dictionary to map task IDs to user names
        user_task_dict = {role_id: user_name for user_name, role_id in user_tasks} 
    
        # Prepare data for rendering
        for task in data:
            task.user_name = user_task_dict.get(task.role_id, "Unknown User")
            
        total_smo = tbl_smo.objects.filter(service_type='SMO').values('clt_id').distinct().count()
        
        smo_active_clients = tbl_smo.objects.filter(
            service_type='SMO',
            end_date__gt=timezone.now()
        ).values('clt_id').distinct().count()
        
        smo_inactive_clients = tbl_smo.objects.filter(
            service_type='SMO'
        ).filter(
            models.Q(end_date__lte=timezone.now()) | models.Q(end_date__isnull=True)
        ).values('clt_id').distinct().count()

        total_seo = tbl_smo.objects.filter(service_type='SEO').values('clt_id').distinct().count()
        
        seo_active_clients = tbl_smo.objects.filter(
            service_type='SEO',
            seo_expire__gt=timezone.now()
        ).values('clt_id').distinct().count()
        
        seo_inactive_clients = tbl_smo.objects.filter(
            service_type='SEO'
        ).filter(
            models.Q(seo_expire__lte=timezone.now()) | models.Q(seo_expire__isnull=True)
        ).values('clt_id').distinct().count()
        
        total_amc = tbl_amc.objects.all().values('clt_id').distinct().count()
        
        return render(request,"index.html",{
            'meeting_data':meeting_data,
            'data':data,
            'running_project':running_project,
            'pending_project':pending_project,
            'total_grand_amount_today':total_grand_amount_today,
            'session_roleid':session_roleid,
            'all_inquiry':all_inquiry,
            'fresh_inquiry':fresh_inquiry,
            'all_dcr':all_dcr,
            'Won_inquiry':Won_inquiry,
            'total_invoice':total_invoice,
            'total_reciept_voucher':total_reciept_voucher,
            'total_payment_voucher':total_payment_voucher,
            'total_clients':total_clients,
            'complete_task_count':complete_task_count,
            'pending_task_count':pending_task_count,
            'revise_task_count':revise_task_count,
            'urgent_task_count':urgent_task_count, 
            'total_smo':total_smo,
            'smo_active_clients':smo_active_clients,
            'smo_inactive_clients':smo_inactive_clients,
            'total_seo':total_seo,
            'seo_active_clients':seo_active_clients,
            'seo_inactive_clients':seo_inactive_clients,
            'total_amc':total_amc,
        }) 
        
    else:
        return redirect(login)
        
def profile(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        return render(request,"profile.html",{'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def profile_Update(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        if session_id:
            user = get_object_or_404(tbl_users2, userId=session_id)
    
            if request.method == 'POST':
                new_name = request.POST.get('name')
                new_mobile = request.POST.get('mobile')
    
                user.name = new_name
                user.mobile = new_mobile
                user.save()
                
                ip_address = get_client_ip(request)
                tbl_messages.objects.create(
                    message_name = request.session['session_user'],
                    change_status=f"Changed their Profile.",
                    added_date = timezone.now() + timedelta(hours=5, minutes=30),
                    company_id = request.session['company_id'],
                    user_id = request.session['session_id'],
                    ip_address = ip_address,
                )
            
                return redirect(f"{reverse('profile')}?success2=1")
        
        return render(request,"profile.html",{'session_roleid':session_roleid})
    else:
        return redirect(login) 
        
def change_Password(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        user_id = request.session.get('session_id') 
    
        if not user_id:
            return HttpResponse("Session not found. Please log in.")
        
        user = get_object_or_404(tbl_users2, userId=user_id)
    
        if request.method == 'POST':
            current_password = request.POST.get('current_password')
            new_password = request.POST.get('new_password')
            confirm_new_password = request.POST.get('confirm_new_password')
    
            if current_password != user.password:
                messages.info(request,"Invalid Old Password")
                return redirect(f"{reverse('change_Password')}?success1=1")

            # hashed_new_password = new_password
    
            user.password = new_password
            user.updated_by_id = user_id 
            user.updated_dtm = timezone.now()
            user.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Changed their Password.",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
                
            return redirect(f"{reverse('profile')}?success=1")
            
        return render(request,"profile.html",{'session_roleid':session_roleid})
    else:
        return redirect(login)

def today_meeting(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        today = timezone.now().date()
        meeting = tbl_lead.objects.filter(next_meeting_date__date=today)
        
        return render(request, "today-meeting.html",{'meeting':meeting,'Username': Username,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def new_lead(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        today = timezone.now().date()
        lead = tbl_lead.objects.filter(create_time__date=today)
        
        return render(request, "new-lead.html",{'lead':lead,'Username': Username,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def today_amc(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        today = timezone.now().date()
        amc = tbl_amc.objects.filter(create_time__date=today)
        
        return render(request, "today-amc.html",{'amc':amc,'Username': Username,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def account_today_expense(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        today = timezone.now().date()
        expense_today = tbl_receive_v.objects.filter(create_time__date=today)
        expense = tbl_payment_v.objects.filter(create_time__date=today)
        
        return render(request, "account-today-expense.html",{'expense_today':expense_today,'expense':expense,'Username': Username,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def smo_today_renewal(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        today = timezone.now().date()
        clients_today = master_client.objects.filter(p_e_date__date=today)
        clients = master_client.objects.filter(expire_date__date=today)
        
        return render(request, "smo-today-renewal.html",{'clients':clients,'clients_today':clients_today,'Username': Username,'session_roleid':session_roleid})
    else:
        return redirect(login)

def smo_active_client(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        today = timezone.now().date()
        clients_today = master_client.objects.filter(p_s_date__lte=today, p_e_date__gte=today)
        clients = master_client.objects.filter(start_date__lte=today, expire_date__gte=today)
        
        return render(request,"smo-active-client.html",{'clients':clients,'clients_today':clients_today,'Username': Username,'session_roleid':session_roleid})
    else:
        return redirect(login)
 
def company(request):
    if 'session_id' in request.session:
        user_compeny = request.session['user_compney']
        session_id = request.session.get('session_id')
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()
        Username = request.session['session_user']  # Retrieve session_id from session
        # if session_id and session_roleid:
        #     if session_roleid == "1" or session_roleid == "10" :

            # Filter tbl_lead records based on session_id
        data = master_company.objects.all().order_by('-com_id') 
        
        date_range_filter = request.GET.get('date_range')
        com_name = request.GET.get('com_name')
        mobile = request.GET.get('mobile')
        address = request.GET.get('address')
        area = request.GET.get('area')
        city = request.GET.get('city')
        state = request.GET.get('state')
        country = request.GET.get('country')
        gst_no = request.GET.get('gst_no')
        email = request.GET.get('email')
        website = request.GET.get('website')
        bank_name = request.GET.get('bank_name')
        acc_no = request.GET.get('acc_no')
        ifsc_code = request.GET.get('ifsc_code')
        branch_name = request.GET.get('branch_name')
        beneficiary_name = request.GET.get('beneficiary_name')
        opening_balance = request.GET.get('opening_balance')
        
        if date_range_filter:
            try:
                start_str, end_str = date_range_filter.split(' - ')
                start_date = parser.parse(start_str.strip())
                end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                data = data.filter(create_time__gte=start_date, create_time__lte=end_date)
            except Exception as e:
                print(f"Date parsing error: {e}")
            
        if com_name:
            data = data.filter(com_name__icontains=com_name)
        if mobile:
            data = data.filter(mobile__icontains=mobile)
        if address:
            data = data.filter(address__icontains=address)
        if area:
            data = data.filter(area__icontains=area)
        if city:
            data = data.filter(city__icontains=city)
        if state:
            data = data.filter(state__icontains=state)
        if country:
            data = data.filter(country__icontains=country)
        if gst_no:
            data = data.filter(gst_no__icontains=gst_no)
        if email:
            data = data.filter(email__icontains=email)
        if website:
            data = data.filter(website__icontains=website)
        if bank_name:
            data = data.filter(bank_name__icontains=bank_name)
        if acc_no:
            data = data.filter(acc_no__icontains=acc_no)
        if ifsc_code:
            data = data.filter(ifsc_code__icontains=ifsc_code)
        if branch_name:
            data = data.filter(branch_name__icontains=branch_name)
        if beneficiary_name:
            data = data.filter(beneficiary_name__icontains=beneficiary_name)
        if opening_balance:
            data = data.filter(opening_balance__icontains=opening_balance)
        
        # query = Q()
            
        # if from_date or to_date:
        #     try:
        #         if from_date:
        #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
        #         else:
        #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
        #         if to_date:
        #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
        #         else:
        #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
        #         if from_date > to_date:
        #             from_date, to_date = to_date, from_date
                    
        #         query &= Q(create_time__range=[from_date, to_date])
                
        #     except ValueError:
        #         pass
            
        # if com_name:
        #     query |= Q(com_name__icontains=com_name)
        # if mobile:
        #     query |= Q(mobile__icontains=mobile)
        # if address:
        #     query |= Q(address__icontains=address)
        # if area:
        #     query |= Q(area__icontains=area)
        # if city:
        #     query |= Q(city__icontains=city)
        # if state:
        #     query |= Q(state__icontains=state)
        # if country:
        #     query |= Q(country__icontains=country)
        # if gst_no:
        #     query |= Q(gst_no__icontains=gst_no)
        # if email:
        #     query |= Q(email__icontains=email)
        # if website:
        #     query |= Q(website__icontains=website)
        # if bank_name:
        #     query |= Q(bank_name__icontains=bank_name)
        # if acc_no:
        #     query |= Q(acc_no__icontains=acc_no)
        # if ifsc_code:
        #     query |= Q(ifsc_code__icontains=ifsc_code)
        # if branch_name:
        #     query |= Q(branch_name__icontains=branch_name)
        # if beneficiary_name:
        #     query |= Q(beneficiary_name__icontains=beneficiary_name)
        # if opening_balance:
        #     query |= Q(opening_balance__icontains=opening_balance)
            
        # data = data.filter(query)
        data = data.order_by('-com_id')
        
        return render(request, "company-leasting.html", {'data': data,'cites':cites, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id})
    else:
        return redirect(login)
        
def add_company(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()
        
        if request.method == 'POST' and request.is_ajax():
            try:
                # Retrieving POST data
                companey_name = request.POST['c_name']
                Mobile_Numbe = request.POST['ph_no']
                Address = request.POST['add2']
                Area = request.POST['add3']
                city = request.POST['city']
                State = request.POST['state']
                Country = request.POST['country']
                Pincode = request.POST['pincode']
                GST_number = request.POST['gstNumber']
                email = request.POST['email']
                Website = request.POST['website']
                Bank_name = request.POST['bank_name']
                Ac_number = request.POST['acc_no']
                Ifsc_code = request.POST['ifsc_code']
                Branch_name = request.POST['branch_name']
                beneficiary_name = request.POST['beneficiary_name'] 
                opening_balance = request.POST['opening_balance']

                # Log user activity
                log_user_activity(
                    ope='Add company',
                    comment=f'Added company: {companey_name}',
                    lanti=None,  
                    longti=None,  
                    by_user_id=request.session['session_id'],
                    by_user_name=Username,
                    status='online'
                )

                # Create new company
                new_companey = master_company.objects.create(
                    com_name=companey_name,
                    mobile=Mobile_Numbe,
                    address=Address,
                    area=Area,
                    city=city,
                    state=State,
                    country=Country,
                    pincode=Pincode,
                    gst_no=GST_number,
                    add_by_id=request.session['session_id'],
                    add_by_name=Username,
                    email=email,
                    website=Website,
                    bank_name=Bank_name,
                    acc_no=Ac_number,
                    ifsc_code=Ifsc_code,
                    branch_name=Branch_name,
                    beneficiary_name=beneficiary_name,
                    opening_balance=opening_balance,
                )
                new_companey.save()

                # Add to tbl_messages (assuming this is a message log or notification table)
                ip_address = get_client_ip(request)
                tbl_messages.objects.create(
                    message_name=request.session['session_user'],
                    change_status=f"Add company - {companey_name}",
                    added_date=timezone.now() + timedelta(hours=5, minutes=30),
                    company_id=request.session['company_id'],
                    user_id = request.session['session_id'],
                    ip_address = ip_address,
                )

                # Respond with success
                return JsonResponse({'status': 'success', 'message': f'Company {companey_name} added successfully!'})
            except Exception as e:
                return JsonResponse({'status': 'error', 'message': str(e)})

        return render(request, "company-leasting.html", {'is_edit': False, 'cites': cites, 'session_roleid': session_roleid})
    else:
        return redirect('login')

def update_company(request, com_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()
        company = get_object_or_404(master_company, com_id=com_id)
        if request.method == 'POST' and request.is_ajax():
            company.userid = request.session['session_id']
            company.com_name = request.POST['c_name']
            company.mobile = request.POST['ph_no']
            company.address = request.POST['add2']
            company.area = request.POST['add3']
            company.city = request.POST['city']
            company.state = request.POST['state'] 
            company.pincode = request.POST['pincode']
            company.country = request.POST['country']
            company.gst_no = request.POST['gstNumber']
            company.email = request.POST['email']
            company.website = request.POST['website']
            company.bank_name = request.POST['bank_name']
            company.acc_no = request.POST['acc_no']
            company.ifsc_code = request.POST['ifsc_code']
            company.branch_name = request.POST['branch_name']
            company.beneficiary_name = request.POST['beneficiary_name']
            company.opening_balance = request.POST['opening_balance']
            company.save()
            
            com_name = request.POST['c_name']
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit company - {com_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({
                    'status': 'success',
                    'message': f'Company {com_name} has been successfully updated!'
                })
        
        data = master_company.objects.all()
        return render(request, "company-leasting.html", {
            'company': company,
            'cites':cites,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
        })

    return redirect(login)
        
def delete_company(request, com_id):
    if 'session_id' in request.session:
        company = get_object_or_404(master_company, com_id=com_id)
        
        company_name = company.com_name
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete company - {company_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        company.delete()
        return JsonResponse({'success': True, 'company_name': company_name})
    else:
        return redirect(login)
        
def company_view(request,com_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        company = get_object_or_404(master_company, com_id=com_id)
        return render(request, 'company-view.html', {'company': company,'session_roleid':session_roleid}) 
    else:
        return redirect(login)
        
def department(request):
    if 'session_id' in request.session:
        user_compeny = request.session['user_compney']
        session_id = request.session.get('session_id')
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        company_list = master_company.objects.all()
        
        com_dict={com.com_id:com.com_name for com in company_list}
                
        data = master_department.objects.all().order_by('-create_time') 
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        company_id = request.GET.get('company_id')
        dep_name = request.GET.get('dep_name')
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(create_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if company_id:
            query |= Q(company_id__icontains=company_id)
        if dep_name:
            query |= Q(dep_name__icontains=dep_name)
            
        data = data.filter(query)
        data = data.order_by('-dp_id')
        
        for job_obj in data:
            job_obj.company_name=com_dict.get(job_obj.company_id, "Unknown company")
        
        return render(request, "department-leasting.html", {'data': data,'company_list':company_list, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) # Assuming user_id field in tbl_lead corresponds to user's ID
        
    else:
        return redirect(login)
        

def add_department(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            company_id = request.POST['company_id']  
            department_name = request.POST['d_name']           
            
            log_user_activity(
                ope='Add Department',
                comment='Added a Department.',
                lanti=None,  
                longti=None,  
                by_user_id=userid,
                by_user_name=Username,
                status='online'
            )
            
            new_companey = master_department.objects.create(
                company_id=company_id,
                dep_name=department_name,
                add_by_id= userid,
                add_by_name=Username,
            )
            new_companey.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add Department - {department_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'Department {department_name} added successfully!'})
            
            return render(request, "department-leasting.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        

def update_department(request, dp_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        department = get_object_or_404(master_department, dp_id=dp_id)
        
        company_list = master_company.objects.all()
        com_dict={com.com_id:com.com_name for com in company_list}
        if request.method == 'POST':
            department.company_id = request.POST['company_id']
            department.dep_name = request.POST['d_name']
            department.save()
            dep_name = request.POST['d_name']
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit Department - {dep_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
             
            return JsonResponse({
                    'status': 'success',
                    'message': f'Department {dep_name} has been successfully updated!'
                })
        
        data = master_department.objects.all()
        for job_obj in data:
            job_obj.company_name=com_dict.get(job_obj.company_id, "Unknown company")
        return render(request, "department-leasting.html", {
            'company_list': company_list,
            'department': department,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
        })

    return redirect(login)

def delete_department(request, dp_id):
    if 'session_id' in request.session:
        department = get_object_or_404(master_department, dp_id=dp_id)
        
        dep_name = department.dep_name

        try:
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name=request.session['session_user'],
                change_status=f"Delete Department - {dep_name}",
                added_date=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            department.delete()
            
            return JsonResponse({'success': True, 'dep_name': dep_name})
        
        except Exception as e:
            return JsonResponse({'success': False, 'message': f"Error: {str(e)}"})
            
    return redirect('login')


 
def lead_source(request):
    if 'session_id' in request.session:
        user_compeny = request.session['user_compney']
        session_id = request.session.get('session_id')
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']  # Retrieve session_id from session
        # if session_id and session_roleid:
        #     if session_roleid == "1" or session_roleid == "10" :

            # Filter tbl_lead records based on session_id
        data = master_leadtype.objects.all().order_by('-create_time') 
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        lead_Type = request.GET.get('lead_Type')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(create_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if lead_Type:
            query |= Q(lead_Type__icontains=lead_Type)
            
        data = data.filter(query)
        data = data.order_by('-ldt_id')
        
        return render(request, "lead-source-leasting.html", {'data': data, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) # Assuming user_id field in tbl_lead corresponds to user's ID
        #     else:
        #         data = master_leadtype.objects.filter(add_by_id=session_id ).order_by('-create_time')
                
        #         from_date = request.GET.get('fromDate')
        #         to_date = request.GET.get('toDate')
        #         lead_Type = request.GET.get('lead_Type')
                
        #         query = Q()
                    
        #         if from_date or to_date:
        #             try:
        #                 if from_date:
        #                     from_date = datetime.strptime(from_date, '%Y-%m-%d')
        #                 else:
        #                     from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                            
        #                 if to_date:
        #                     to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
        #                 else:
        #                     to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                        
        #                 if from_date > to_date:
        #                     from_date, to_date = to_date, from_date
                            
        #                 query &= Q(create_time__range=[from_date, to_date])
                        
        #             except ValueError:
        #                 pass
                    
        #         if lead_Type:
        #             query |= Q(lead_Type__icontains=lead_Type)
                    
        #         data = data.filter(query)
        #         data = data.order_by('-ldt_id')
                
        #         return render(request, "lead-source-leasting.html", {'data': data, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) # Assuming user_id field in tbl_lead corresponds to user's ID

        # else:
            # Handle case where session_id is not found in session (e.g., user not logged in)
            # return redirect(login)
    else:
        return redirect(login) 
        
def add_lead_source(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            name = request.POST['name']           
            
            new_lead = master_leadtype.objects.create(
                lead_Type=name,
            )
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add lead source - {name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            new_lead.save()
            return JsonResponse({'status': 'success', 'message': f'Lead Source {name} added successfully!'})
            
            return render(request, "lead-source-leasting.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        

def update_lead_source(request, ldt_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        lead = get_object_or_404(master_leadtype, ldt_id=ldt_id)
        if request.method == 'POST':
            lead.lead_Type = request.POST['name']
            lead.save()
            
            lead_Type = request.POST['name']
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit lead source - {lead_Type}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({
                    'status': 'success',
                    'message': f'Lead Source {lead_Type} has been successfully updated!'
                })

        data = master_leadtype.objects.all()
        return render(request, "lead-source-leasting.html", {
            'lead': lead,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data': data,
        })

    return redirect(login)

def delete_lead_source(request, ldt_id):
    if 'session_id' in request.session:
        lead = get_object_or_404(master_leadtype, ldt_id=ldt_id)
        
        lead_Type = lead.lead_Type
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete lead source - {lead_Type}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        lead.delete()

        log_user_activity(
            ope='Delete lead',
            comment=f'Deleted lead.',
            lanti=None,  
            longti=None,  
            by_user_id=request.session['session_id'],
            by_user_name=request.session['session_user'],
            status='online'
        )
        return JsonResponse({'success': True, 'lead_Type': lead_Type})

    return redirect(login) 

 
def shift_list(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        data = master_shift.objects.all()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        shift = request.GET.get('shift')
        start_time = request.GET.get('start_time')
        end_time = request.GET.get('end_time')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(create_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if shift:
            query |= Q(shift__icontains=shift)
        if start_time:
            query |= Q(start_time__icontains=start_time)
        if end_time:
            query |= Q(end_time__icontains=end_time)
            
        data = data.filter(query)
        data = data.order_by('-s_id')
                
        return render(request, "shift-leasting.html", {'data':data, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) 
    else:
        return redirect(login)
        
def add_shift(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
         
        if request.method == 'POST':
            userid = request.session['session_id']
            shift_name = request.POST['shift_name']
            from_timing = request.POST['from_timing']
            to_timing = request.POST['to_timing']          
            
            log_user_activity(
                ope='Add Department',
                comment='Added a Department.',
                lanti=None,  
                longti=None,  
                by_user_id=userid,
                by_user_name=Username,
                status='online'
            )
            
            new_companey = master_shift.objects.create(
                shift=shift_name,
                start_time=from_timing,
                end_time=to_timing,
            )
            new_companey.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add shift - {shift_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'Shift {shift_name} added successfully!'})
            
            return render(request, "shift-leasting.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        

def update_shift(request, s_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        shift = get_object_or_404(master_shift, s_id=s_id)

        if request.method == 'POST':
            shift.shift = request.POST['shift_name']
            shift.start_time = request.POST['from_timing']
            shift.end_time = request.POST['to_timing']
            shift.save()
            
            shift = request.POST['shift_name']
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit shift - {shift}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({
                    'status': 'success',
                    'message': f'Shift {shift} has been successfully updated!'
                })
        
        data = master_shift.objects.all()
        return render(request, "shift-leasting.html", {'shift': shift,'data':data,'is_edit': True,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
        
def delete_shift(request, s_id):
    if 'session_id' in request.session:
        shifts = get_object_or_404(master_shift, s_id=s_id)
        
        shift = shifts.shift
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete shift - {shift}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        shifts.delete()
        return JsonResponse({'success': True, 'shift': shift})
    else:
        return redirect(login)

def Product(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        
        data = master_product.objects.all()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        pro_name = request.GET.get('pro_name')
        hsn_code = request.GET.get('hsn_code')
        gst_no = request.GET.get('gst_no')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(create_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if pro_name:
            query |= Q(pro_name__icontains=pro_name)
        if hsn_code:
            query |= Q(hsn_code__icontains=hsn_code)
        if gst_no:
            query |= Q(gst_no__icontains=gst_no)
            
        data = data.filter(query)
        data = data.order_by('-pro_id')
        
        return render(request, "Product.html", {'data':data, 'Username':Username,'session_roleid':session_roleid,'company_id': company_id}) 
    else:
        return redirect(login)
        
def add_product(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            pro_name = request.POST['pro_name']
            hsn_code = request.POST['hsn_code']
            gst_no = request.POST['gst_no']
            
            new_product= master_product.objects.create(
                pro_name = pro_name,
                hsn_code = hsn_code,
                gst_no = gst_no,
                add_by_id = userid,
                add_by_name = Username,
                create_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_product.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add Product - {pro_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'Product {pro_name} added successfully!'})
            
            return render(request, "Product.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def update_product(request, pro_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        product_data = get_object_or_404(master_product, pro_id=pro_id)
        
        if request.method == 'POST':
            product_data.pro_name = request.POST['pro_name']
            product_data.hsn_code = request.POST['hsn_code']
            product_data.gst_no = request.POST['gst_no']
            product_data.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit Product - {product_data.pro_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
             
            return JsonResponse({
                    'status': 'success',
                    'message': f'Product {product_data.pro_name} has been successfully updated!'
                })
        
        data = master_product.objects.all
        return render(request, "Product.html", {
            'product_data': product_data,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
        })

    return redirect(login)

def delete_product(request, pro_id):
    if 'session_id' in request.session:
        product_data = get_object_or_404(master_product, pro_id=pro_id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete Product - {product_data.pro_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        product_data.delete()
        return JsonResponse({'success': True, 'pro_name': product_data.pro_name})

    return redirect(login)
    
def Reason(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        data = tbl_reason.objects.all()
        
        return render(request, "Reason.html", {'data':data,'session_roleid':session_roleid}) 
    else:
        return redirect(login)
        
def add_reason(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            reason = request.POST['reason']
            
            new_product= tbl_reason.objects.create(
                reason = reason,
                add_by_id = userid,
                add_by_name = Username,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_product.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add reason - {reason}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'Reason {reason} added successfully!'})
            
            return render(request, "Reason.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def update_reason(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        reason_data = get_object_or_404(tbl_reason, id=id)
        
        if request.method == 'POST':
            reason_data.reason = request.POST['reason']
            reason_data.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit reason - {reason_data.reason}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
             
            return JsonResponse({
                    'status': 'success',
                    'message': f'Reason {reason_data.reason} has been successfully updated!'
                })
        
        data = tbl_reason.objects.all
        return render(request, "Reason.html", {
            'reason_data': reason_data,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
        })

    return redirect(login)
    
def delete_reason(request, id):
    if 'session_id' in request.session:
        reason_data = get_object_or_404(tbl_reason, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete reason - {reason_data.reason}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30), 
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        reason_data.delete()
        return JsonResponse({'success': True, 'reason': reason_data.reason})

    return redirect(login)
    
def Promocode(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        data = tbl_promocode.objects.all()
        
        return render(request, "Promocode.html", {'data':data,'session_roleid':session_roleid}) 
    else:
        return redirect(login)
        
def Promocode_view(request):
    try:
        data = tbl_promocode.objects.all()
        
        data_list = [
            {
                'id' : tbl_promocode.id,
                'promocode' : tbl_promocode.promocode,
                'promo_dis' : tbl_promocode.promo_dis,
                'created_time' : tbl_promocode.created_time,
                'company_id' : tbl_promocode.company_id,
                'add_by_id' : tbl_promocode.add_by_id,
                'add_by_name' : tbl_promocode.add_by_name,
            }
            for tbl_promocode in data
        ]
        return JsonResponse({'data':data_list},safe=False)
    except Exception as e:
        return JsonResponse({'error':str(e)},status=500)
        
def add_promocode(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            promocode = request.POST['promocode']
            promo_dis = request.POST['promo_dis']
            
            new_product= tbl_promocode.objects.create(
                promocode = promocode,
                promo_dis = promo_dis,
                add_by_id = userid,
                add_by_name = Username,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_product.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add Promocode - {promocode}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'Promocode {promocode} added successfully!'})
            
            return render(request, "Promocode.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def update_promocode(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        promo_data = get_object_or_404(tbl_promocode, id=id)
        
        if request.method == 'POST':
            promo_data.promocode = request.POST['promocode']
            promo_data.promo_dis = request.POST['promo_dis']
            promo_data.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit promocode - {promo_data.promocode}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
             
            return JsonResponse({
                    'status': 'success',
                    'message': f'Promocode {promo_data.promocode} has been successfully updated!'
                })
        
        data = tbl_promocode.objects.all
        return render(request, "Promocode.html", {
            'promo_data': promo_data,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
        })

    return redirect(login)
    
def delete_promocode(request, id):
    if 'session_id' in request.session:
        promo_data = get_object_or_404(tbl_promocode, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete promocode - {promo_data.promocode}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30), 
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        promo_data.delete()
        return JsonResponse({'success': True, 'promocode': promo_data.promocode})

    return redirect(login)
    
def Holiday(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        
        data = tbl_holiday.objects.all()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        start_date = request.GET.get('start_date')
        to_date1 = request.GET.get('to_date1')
        no_days = request.GET.get('no_days')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(create_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if name:
            query |= Q(name__icontains=name)
        if start_date:
            query |= Q(start_date__icontains=start_date)
        if to_date1:
            query |= Q(to_date__icontains=to_date1)
        if no_days:
            query |= Q(no_days__icontains=no_days)
            
        data = data.filter(query)
        data = data.order_by('-id')
        
        return render(request, "Holiday.html", {'data':data, 'Username':Username,'session_roleid':session_roleid,'company_id': company_id}) 
    else:
        return redirect(login)
        
def add_holiday(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            name = request.POST['name']
            start_date = request.POST['start_date']
            to_date = request.POST['to_date']
            no_days = request.POST['no_days']
            
            new_product= tbl_holiday.objects.create(
                name = name,
                start_date = start_date,
                to_date = to_date,
                no_days = no_days,
                add_by_id = userid,
                add_by_name = Username,
                create_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_product.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add Holiday - {name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'Holiday {name} added successfully!'})
            
            return render(request, "Holiday.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def update_holiday(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid') 
        holiday_data = get_object_or_404(tbl_holiday, id=id)
        
        if request.method == 'POST':
            holiday_data.name = request.POST['name']
            holiday_data.start_date = request.POST['start_date']
            holiday_data.to_date = request.POST['to_date']
            holiday_data.no_days = request.POST['no_days']
            holiday_data.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit Holiday - {holiday_data.name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
             
            return JsonResponse({
                    'status': 'success',
                    'message': f'Holiday {holiday_data.name} has been successfully updated!'
                })
        
        data = tbl_holiday.objects.all
        return render(request, "Holiday.html", {
            'holiday_data': holiday_data,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
        })

    return redirect(login)

def delete_holiday(request, id):
    if 'session_id' in request.session:
        holiday_data = get_object_or_404(tbl_holiday, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete Holiday - {holiday_data.name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        holiday_data.delete()
        return JsonResponse({'success': True, 'name': holiday_data.name})

    return redirect(login)
    
def Area(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        
        data = master_area.objects.all()
        city_data = master_city.objects.all()
        
        city_dict = {status.city_id: status.city for status in city_data}
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        area_name = request.GET.get('area_name')
        pincode = request.GET.get('pincode')
        city_id = request.GET.get('city_id')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(created_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if area_name:
            query |= Q(area_name__icontains=area_name)
        if pincode:
            query |= Q(pincode__icontains=pincode)
        if city_id:
            query |= Q(city_id__icontains=city_id)
            
        data = data.filter(query)
        data = data.order_by('-id')
        
        for job_obj in data:
            job_obj.city = city_dict.get(job_obj.city_id, "Unknown City")
        
        return render(request, "Area.html", {'data':data,'city_data':city_data, 'Username':Username,'session_roleid':session_roleid,'company_id': company_id}) 
    else:
        return redirect(login)
        
def add_area(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            area_name = request.POST['area_name']
            pincode = request.POST['pincode']
            city_id = request.POST['city_id']
            
            new_product= master_area.objects.create(
                area_name = area_name,
                pincode = pincode,
                city_id = city_id,
                add_by_id = userid,
                add_by_name = Username,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_product.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add Area - {area_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'Area {area_name} added successfully!'})
            
            return render(request, "Area.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def update_area(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid') 
        area_data = get_object_or_404(master_area, id=id)
        
        if request.method == 'POST':
            area_data.area_name = request.POST['area_name']
            area_data.pincode = request.POST['pincode']
            area_data.city_id = request.POST['city_id']
            area_data.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit Area - {area_data.area_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
             
            return JsonResponse({
                    'status': 'success',
                    'message': f'Area {area_data.area_name} has been successfully updated!'
                })
        
        data = master_area.objects.all()
        city_data = master_city.objects.all()
        
        city_dict = {status.city_id: status.city for status in city_data}
        
        for job_obj in data:
            job_obj.city = city_dict.get(job_obj.city_id, "Unknown City")
            
        return render(request, "Area.html", {
            'area_data': area_data,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
            'city_data':city_data
        })

    return redirect(login)

def delete_area(request, id):
    if 'session_id' in request.session:
        area_data = get_object_or_404(master_area, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete Area - {area_data.area_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        area_data.delete()
        return JsonResponse({'success': True, 'name': area_data.area_name})

    return redirect(login)

def Inqiry_for(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        data = tbl_inqiry_for.objects.all()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(created_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if name:
            query |= Q(name__icontains=name)
            
        data = data.filter(query)
        data = data.order_by('-id')
        
        return render(request, "Inqiry_for.html", {'data':data,'session_roleid':session_roleid}) 
    else:
        return redirect(login)
        
def add_inqiry_for(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            name = request.POST['name']
            
            new_product= tbl_inqiry_for.objects.create(
                name = name,
                add_by_id = userid,
                add_by_name = Username,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_product.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add Inqiry for - {name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'Inqiry for {name} added successfully!'})
            
            return render(request, "Inqiry_for.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def up_inqfor(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        inq_data = get_object_or_404(tbl_inqiry_for, id=id)
        
        if request.method == 'POST':
            inq_data.name = request.POST['name']
            inq_data.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit Inqiry for - {inq_data.name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
             
            return JsonResponse({
                    'status': 'success',
                    'message': f'Inqiry for {inq_data.name} has been successfully updated!'
                })
        
        data = tbl_inqiry_for.objects.all
        return render(request, "Inqiry_for.html", {
            'inq_data': inq_data,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
        })

    return redirect(login)
    
def delete_inqiry_for(request, id):
    if 'session_id' in request.session:
        inq_data = get_object_or_404(tbl_inqiry_for, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete Inqiry for - {inq_data.name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30), 
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        inq_data.delete()
        return JsonResponse({'success': True, 'name': inq_data.name})

    return redirect(login)

def Business_segment(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        data = tbl_bussi_seg.objects.all()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(created_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if name:
            query |= Q(name__icontains=name)
            
        data = data.filter(query)
        data = data.order_by('-id')
        
        return render(request, "bussi_segment.html", {'data':data,'session_roleid':session_roleid}) 
    else:
        return redirect(login)
        
def add_busi_seg(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            name = request.POST['name']
            
            new_product= tbl_bussi_seg.objects.create(
                name = name,
                add_by_id = userid,
                add_by_name = Username,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_product.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add Business segment - {name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'Business segment {name} added successfully!'})
            
            return render(request, "bussi_segment.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def up_segment(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        seg_data = get_object_or_404(tbl_bussi_seg, id=id)
        
        if request.method == 'POST':
            seg_data.name = request.POST['name']
            seg_data.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit Business segment - {seg_data.name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
             
            return JsonResponse({
                    'status': 'success',
                    'message': f'Business segment {seg_data.name} has been successfully updated!'
                })
        
        data = tbl_inqiry_for.objects.all
        return render(request, "bussi_segment.html", {
            'seg_data': seg_data,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
        })

    return redirect(login)
    
def delete_segment(request, id):
    if 'session_id' in request.session:
        seg_data = get_object_or_404(tbl_bussi_seg, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete Business segment - {seg_data.name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30), 
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        seg_data.delete()
        return JsonResponse({'success': True, 'name': seg_data.name})

    return redirect(login)
    
def SMO_Plan(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        
        data = tbl_smo_plan.objects.all()
        
        # from_date = request.GET.get('fromDate')
        # to_date = request.GET.get('toDate')
        # pro_name = request.GET.get('pro_name')
        # hsn_code = request.GET.get('hsn_code')
        # gst_no = request.GET.get('gst_no')
        
        # query = Q()
            
        # if from_date or to_date:
        #     try:
        #         if from_date:
        #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
        #         else:
        #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
        #         if to_date:
        #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
        #         else:
        #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
        #         if from_date > to_date:
        #             from_date, to_date = to_date, from_date
                    
        #         query &= Q(create_time__range=[from_date, to_date])
                
        #     except ValueError:
        #         pass
            
        # if pro_name:
        #     query |= Q(pro_name__icontains=pro_name)
        # if hsn_code:
        #     query |= Q(hsn_code__icontains=hsn_code)
        # if gst_no:
        #     query |= Q(gst_no__icontains=gst_no)
            
        # data = data.filter(query)
        # data = data.order_by('-pro_id')
        
        return render(request, "SMO_Plan.html", {'data':data,'session_roleid':session_roleid}) 
    else:
        return redirect(login)
        
def add_smo_plan(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            plan_name = request.POST['plan_name']
            plan_duration = request.POST['plan_duration']
            no_of_post = request.POST['no_of_post']
            no_of_reel = request.POST['no_of_reel']
            
            new_product= tbl_smo_plan.objects.create(
                plan_name = plan_name,
                plan_duration = plan_duration,
                no_of_post = no_of_post,
                no_of_reel = no_of_reel,
                add_by_id = userid,
                add_by_name = Username,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_product.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add SMO Plan - {plan_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'SMO Plan {plan_name} added successfully!'})
            
            return render(request, "SMO_Plan.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def update_smo_plan(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        smo_data = get_object_or_404(tbl_smo_plan, id=id)
        
        if request.method == 'POST':
            smo_data.plan_name = request.POST['plan_name']
            smo_data.plan_duration = request.POST['plan_duration']
            smo_data.no_of_post = request.POST['no_of_post']
            smo_data.no_of_reel = request.POST['no_of_reel']
            smo_data.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit SMO Plan - {smo_data.plan_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
             
            return JsonResponse({
                    'status': 'success',
                    'message': f'SMO Plan {smo_data.plan_name} has been successfully updated!'
                })
        
        data = tbl_smo_plan.objects.all
        return render(request, "SMO_Plan.html", {
            'smo_data': smo_data,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
        })

    return redirect(login)

def delete_smo_plan(request, id):
    if 'session_id' in request.session:
        smo_data = get_object_or_404(tbl_smo_plan, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete SMO Plan - {smo_data.plan_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        smo_data.delete()
        return JsonResponse({'success': True, 'plan_name': smo_data.plan_name})

    return redirect(login)
  
def SEO_Plan(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        
        data = tbl_seo_plan.objects.all()
        
        # from_date = request.GET.get('fromDate')
        # to_date = request.GET.get('toDate')
        # pro_name = request.GET.get('pro_name')
        # hsn_code = request.GET.get('hsn_code')
        # gst_no = request.GET.get('gst_no')
        
        # query = Q()
            
        # if from_date or to_date:
        #     try:
        #         if from_date:
        #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
        #         else:
        #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
        #         if to_date:
        #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
        #         else:
        #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
        #         if from_date > to_date:
        #             from_date, to_date = to_date, from_date
                    
        #         query &= Q(create_time__range=[from_date, to_date])
                
        #     except ValueError:
        #         pass
            
        # if pro_name:
        #     query |= Q(pro_name__icontains=pro_name)
        # if hsn_code:
        #     query |= Q(hsn_code__icontains=hsn_code)
        # if gst_no:
        #     query |= Q(gst_no__icontains=gst_no)
            
        # data = data.filter(query)
        # data = data.order_by('-pro_id')
        
        return render(request, "SEO_Plan.html", {'data':data,'session_roleid':session_roleid}) 
    else:
        return redirect(login)
        
def add_seo_plan(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            plan_name = request.POST['plan_name']
            plan_duration = request.POST['plan_duration']
            
            new_product= tbl_seo_plan.objects.create(
                plan_name = plan_name,
                plan_duration = plan_duration,
                add_by_id = userid,
                add_by_name = Username,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_product.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add SEO Plan - {plan_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'SEO Plan {plan_name} added successfully!'})
            
            return render(request, "SEO_Plan.html", {'is_edit': False,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def update_seo_plan(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        seo_data = get_object_or_404(tbl_seo_plan, id=id)
        
        if request.method == 'POST':
            seo_data.plan_name = request.POST['plan_name']
            seo_data.plan_duration = request.POST['plan_duration']
            seo_data.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit SEO Plan - {seo_data.plan_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
             
            return JsonResponse({
                    'status': 'success',
                    'message': f'SEO Plan {seo_data.plan_name} has been successfully updated!'
                })
        
        data = tbl_seo_plan.objects.all
        return render(request, "SEO_Plan.html", {
            'seo_data': seo_data,
            'session_roleid':session_roleid,
            'is_edit': True,
            'data':data,
        })

    return redirect(login)

def delete_seo_plan(request, id):
    if 'session_id' in request.session:
        seo_data = get_object_or_404(tbl_seo_plan, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete SEO Plan - {seo_data.plan_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        seo_data.delete()
        return JsonResponse({'success': True, 'plan_name': seo_data.plan_name})

    return redirect(login)
  
# def User(request):
#     if 'session_id' in request.session:
#         session_id = request.session.get('session_id')
#         Username = request.session['session_user']
#         company_id = request.session['company_id']
#         user_compeny = request.session['user_compney']
#         compney_list = master_company.objects.all()
#         session_roleid = request.session.get('session_roleid')
        
#         roles = tbl_roles.objects.all()[1:]
#         users = tbl_users2.objects.all()
#         departments = master_department.objects.all()
        
#         # data = tbl_users2.objects.all()
        
#         cnx = mysql.connector.connect(user='shubhamsingh_sit_crm', password='kish@1102', host='localhost', database='shubhamsingh_sit_crm')
#         cursor = cnx.cursor(dictionary=True)
        
#         if session_roleid =="1" or session_roleid =="9" or session_roleid =="10": 
#             if company_id == 0:
#                 query = '''
#                 SELECT tbl_users2.userId, tbl_users2.company_id, tbl_users2.name, tbl_users2.email, tbl_users2.mobile, GROUP_CONCAT(tbl_roles.role SEPARATOR ', ') AS roles
#                 FROM tbl_users2
#                 LEFT JOIN tbl_roles ON FIND_IN_SET(tbl_roles.roleId, tbl_users2.role_id) 
#                 WHERE tbl_users2.userId != %s
#                 GROUP BY tbl_users2.userId
#                 ORDER BY tbl_users2.name
#                 '''
#                 cursor.execute(query, (1,))
#             else:
#                 query = '''
#                 SELECT tbl_users2.userId, tbl_users2.company_id, tbl_users2.name, tbl_users2.email, tbl_users2.mobile, GROUP_CONCAT(tbl_roles.role SEPARATOR ', ') AS roles
#                 FROM tbl_users2
#                 LEFT JOIN tbl_roles ON FIND_IN_SET(tbl_roles.roleId, tbl_users2.role_id)
#                 WHERE tbl_users2.userId != %s AND company_id = %s
#                 GROUP BY tbl_users2.userId
#                 ORDER BY tbl_users2.name
#                 '''
#                 cursor.execute(query, (1, company_id))
#         elif session_roleid == "2" or session_roleid =="6":
#             query = '''
#                 SELECT tbl_users2.userId, tbl_users2.company_id, tbl_users2.name, tbl_users2.email, tbl_users2.mobile, GROUP_CONCAT(tbl_roles.role SEPARATOR ', ') AS roles
#                 FROM tbl_users2
#                 LEFT JOIN tbl_roles ON FIND_IN_SET(tbl_roles.roleId, tbl_users2.role_id)
#                 WHERE tbl_users2.userId != %s AND (head_id = %s OR userId = %s)
#                 AND company_id = %s
#                 GROUP BY tbl_users2.userId
#                 ORDER BY tbl_users2.name
#                 '''
#             cursor.execute(query, (1, session_id, session_id, company_id))
        
#         rows = cursor.fetchall()
#         data = [{'userId': row['userId'], 'name': row['name'], 'roles': row['roles'], 'mobile': row['mobile'], 'email': row['email']} for row in rows]
        
#         return render(request,"user-leasting.html",{
#             'roles': roles,
#             'users': users, 
#             'departments': departments,
#             'data':data, 
#             'Username':Username,
#             'session_id': session_id,
#             'comp_name':user_compeny, 
#             'session_roleid':session_roleid, 
#             'compney_list':compney_list,
#             'company_id': company_id
#         })
#     else:
#         return redirect(login)
        
        
        

def user_excel(request):
    if request.method == 'POST':
        from_date = request.POST.get('from_date')
        to_date = request.POST.get('to_date')

        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
            except ValueError:
                pass

        else:
            return JsonResponse({"error": "Please select a date."}, status=400)

        user_entries = tbl_users2.objects.filter(
            created_dtm__range=[from_date, to_date]
        )

        if user_entries.count() == 0:
            return JsonResponse({"error": "No records found for the given date range."}, status=404)

        wb = Workbook()
        ws = wb.active
        ws.title = "User Entries"

        headers = [ "ID",
                    "Name",
                    "Email",
                    "Mobile",
                    "Password",
                    "Company Name",
                    "Head Name",
                    "Department",
                    "Role",]
        ws.append(headers)
        
        for entry in user_entries:
            # Fetch head_name directly
            head_name = 'N/A'
            if entry.head_id:
                try:
                    head_name = tbl_users2.objects.get(userId=entry.head_id).name
                except tbl_users2.DoesNotExist:
                    head_name = 'N/A'
            
            dep_names = []
            if entry.dp_id:
                dp_ids = entry.dp_id.split(',')  # Split the comma-separated dp_id values
                for dp_id in dp_ids:
                    try:
                        dep = master_department.objects.get(dp_id=dp_id)
                        dep_names.append(dep.dep_name)
                    except master_department.DoesNotExist:
                        dep_names.append('N/A')  # If no department is found, append 'N/A'

            # Join department names if there are multiple
            dep_names_str = ', '.join(dep_names)
            full_name = ' '.join(filter(None, [entry.name, entry.middle_name, entry.last_name]))
            
            ws.append([
                entry.userId,
                # entry.name,
                full_name,
                entry.email,
                entry.mobile,
                entry.password,
                entry.company_name,
                head_name,
                dep_names_str,
                entry.role_name,
            ])

        response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        response['Content-Disposition'] = 'attachment; filename="Users-Report.xlsx"'
        wb.save(response)

        return response


        
        
        
def User(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        compney_list = master_company.objects.all()
        session_roleid = request.session.get('session_roleid')
        roles = tbl_roles.objects.all()[1:]
        users = tbl_users2.objects.all()
        departments = master_department.objects.all()
        
        if set(session_roleid).intersection({"1"}):
            selected_company_id = request.session.get('selected_company_id', None)
            if selected_company_id:
                data = tbl_users2.objects.filter(company_id=selected_company_id).exclude(userId=session_id)
            else:
                data = tbl_users2.objects.all().exclude(userId=session_id)
            # data = tbl_users2.objects.all().exclude(userId=session_id)
        elif set(session_roleid).intersection({"9", "10"}):
            data = tbl_users2.objects.all().exclude(userId=session_id)
        elif set(session_roleid).intersection({"2", "6"}):
            data = tbl_users2.objects.filter(head_id=session_id)
        else:
            data = tbl_users2.objects.none()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        email = request.GET.get('email')
        mobile = request.GET.get('mobile')
        password = request.GET.get('password')
        company_id = request.GET.get('company_id')
        head_id = request.GET.get('head_id')
        dp_id = request.GET.get('dp_id')
        role_id = request.GET.get('role_id')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(created_dtm__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if name:
            query |= Q(name__icontains=name)
        if email:
            query |= Q(email__icontains=email)
        if mobile:
            query |= Q(mobile__icontains=mobile)
        if password:
            query |= Q(password__icontains=password)
        if company_id:
            query |= Q(company_id__icontains=company_id)
        if head_id:
            query |= Q(head_id=head_id)
        if dp_id:
            query |= Q(dp_id__icontains=dp_id)
        if role_id:
            query |= Q(role_id__icontains=role_id)
        
        data = data.filter(query)
        data = data.order_by('-userId')
        
        active_user = 0
        inactive_user = 0
        all_user = data.count()
        for i in data:
            if i.is_active:
                active_user += 1
            if not i.is_active:
                inactive_user += 1
        
        return render(request,"user-leasting.html",{ 
            'roles': roles,
            'users': users, 
            'departments': departments,
            'data':data, 
            'Username':Username,
            'session_id': session_id,
            'comp_name':user_compeny, 
            'session_roleid':session_roleid, 
            'compney_list':compney_list,
            'all_user':all_user,
            'inactive_user':inactive_user,
            'active_user':active_user,
        })
    else:
        return redirect(login)
        
def add_user(request):
    if 'session_id' in request.session:
    
        roles = tbl_roles.objects.all()[1:]  # Skipping the first role
        company_id = request.session['company_id']
        users = tbl_users2.objects.all()
        departments = master_department.objects.all()
        compney_list = master_company.objects.all()
        session_roleid = request.session.get('session_roleid')
        user_compeny = request.session['user_compney']
        Username = request.session['session_user']
        session_id = request.session.get('session_id')
        
        if request.method == 'POST':
            # Extract the data from the request
            name = request.POST['name']
            middle_name = request.POST['middle_name']
            last_name = request.POST['last_name']
            mobile_number = request.POST['mobilenumber']
            password = request.POST['password']
            company_name = request.POST['company_name']
            email = request.POST['email']
            head_id = request.POST['head']
            
            # Get company ID from the database based on company name
            company_n = master_company.objects.filter(com_name=company_name).first()
            company_id = company_n.com_id if company_n else None
        
            # Get the selected role IDs and department IDs
            role_ids = request.POST.getlist('roles') 
            depart_ids = request.POST.getlist('departments')
            
            # Fetch role names corresponding to the role IDs
            role_names = []
            for role_id in role_ids:
                role_n = tbl_roles.objects.filter(roleId=role_id).first()
                if role_n:
                    role_names.append(role_n.role)
            role_name = ', '.join(role_names)  # Concatenate role names if multiple roles are selected
        
            # Check for existing mobile number
            cursor.execute('SELECT COUNT(*) FROM tbl_users2 WHERE mobile = %s', [mobile_number])
            row = cursor.fetchone()
        
            if row.get('COUNT(*)') > 0:
                return render(request, 'add-user.html', {'mobilenumber_exits': True})
            else:
                # Create new user
                new_user = tbl_users2.objects.create(
                    name=name,
                    middle_name=middle_name,
                    last_name=last_name,
                    mobile=mobile_number,
                    password=password,
                    company_name=company_name,
                    company_id=company_id,
                    role_name=role_name,
                    head_id=head_id,
                    email=email,
                    add_by_name=Username,
                    add_by_id=session_id,
                    status='Active',
                    role_id=','.join(role_ids), 
                    dp_id=','.join(depart_ids), 
                    updated_by_id=session_id,
                    updated_by_name='',
                    created_dtm = timezone.now() + timedelta(hours=5, minutes=30),
                )
                new_user.save()
                
                new_employee = tbl_employee.objects.create(
                    name=name,
                    middle_name=middle_name,
                    last_name=last_name,
                    email=email,
                    password=password,

                    company_name=company_name,
                    company_id=company_id,
                    role_name=role_name,
                    head_id=head_id,
                    add_by_name=Username,
                    add_by_id=session_id,
                    role_id=','.join(role_ids), 
                    dp_id=','.join(depart_ids), 
                    update_by_id=session_id,

                    ph_no=mobile_number,
                    create_time = timezone.now() + timedelta(hours=5, minutes=30),
                    user_id=new_user.userId,
                )
                
                new_user.emp_id = new_employee.emp_id
                new_user.save()
                
                ip_address = get_client_ip(request)
                tbl_messages.objects.create(
                    message_name = request.session['session_user'],
                    change_status=f"Add user - {name}",
                    added_date = timezone.now() + timedelta(hours=5, minutes=30),
                    company_id = request.session['company_id'],
                    user_id = request.session['session_id'],
                    ip_address = ip_address,
                )

                # Log user activity
                log_user_activity(
                    ope='Add user',
                    comment='Added a new user.',
                    lanti=None,
                    longti=None,
                    by_user_id=session_id,
                    by_user_name=Username,
                    status='online'
                )
                # Redirect to the user listing page (adjust 'open_user_least_page' to the actual URL)
                return JsonResponse({'status': 'success', 'message': f'User {name} added successfully!'})
        
        # Render the page with context data
        return render(request, "add-user.html", {
            'roles': roles,
            'compney_list': compney_list, 
            'users': users, 
            'departments': departments,
            'comp_name': user_compeny, 
            'session_roleid': session_roleid,
            'company_id': company_id,
            'is_edit': False
        })
    else:
        # Redirect to login page if session ID is not found
        return redirect(login)

logger = logging.getLogger(__name__)

def get_departments_by_company(request):
    company_name = request.GET.get('company_name', None)
    
    try:
        if company_name:
            # Log the company name received
            logger.info(f"Fetching departments for company: {company_name}")
            
            # Fetch the company from the master_company model to validate
            company = master_company.objects.filter(com_name=company_name).first()

            if not company:
                logger.warning(f"No company found with name: {company_name}")
                return JsonResponse({'departments': []})  # Return empty if no company found

            # Fetch departments related to the selected company using the company_id
            departments = master_department.objects.filter(company_id=company.com_id)
            
            # Log the number of departments found
            logger.info(f"Found {departments.count()} departments for company: {company_name}")
            
            department_data = [{'dp_id': d.dp_id, 'dep_name': d.dep_name} for d in departments]
            
            return JsonResponse({'departments': department_data})
        else:
            return JsonResponse({'departments': []})
    
    except Exception as e:
        # Log the error and return a 500 response
        logger.error(f"Error fetching departments for company {company_name}: {str(e)}")
        return JsonResponse({'error': 'Internal Server Error'}, status=500)

def edit_user(request, user_id):
    user_id = int(user_id)
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        compney_list = master_company.objects.all()
        user = get_object_or_404(tbl_users2, userId=user_id)
        users = tbl_users2.objects.all()
        emp_id = user.emp_id
        user_departments = user.dp_id.split(',') if user.dp_id else []
        user_roles = user.role_id.split(',') if user.role_id else []
        
        head_name = ''
        if user.head_id:
            user_head = tbl_users2.objects.filter(userId=user.head_id).first()
            head_name = user_head.name if user_head else ''
            
        if request.method == 'POST':
            role_ids = request.POST.getlist('roles')
            depart_ids = request.POST.getlist('departments')

            role_names = []
            for role_id in role_ids:
                role_obj = tbl_roles.objects.filter(roleId=role_id).first()
                if role_obj:
                    role_names.append(role_obj.role)
            role_name_combined = ', '.join(role_names)

            company_name = request.POST['company_name']
            company_obj = master_company.objects.filter(com_name=company_name).first()
            company_id = company_obj.com_id if company_obj else None

            user.name = request.POST['name']
            user.middle_name = request.POST['middle_name']
            user.last_name = request.POST['last_name']
            user.mobile = request.POST['mobilenumber']
            user.password = request.POST['password']
            user.email = request.POST['email']
            user.company_name = company_name
            user.company_id = company_id
            user.head_id = request.POST['head']
            user.role_id = ','.join(role_ids)
            user.role_name = role_name_combined
            user.dp_id = ','.join(depart_ids)
            user.updated_by_id = request.session.get('session_id')
            user.updated_by_name = request.session['session_user']
            user.save()
            
            if not user.emp_type == "intern":
                employee = get_object_or_404(tbl_employee, emp_id=emp_id)

                employee.name = request.POST['name']
                employee.middle_name = request.POST['middle_name']
                employee.last_name = request.POST['last_name']
                employee.ph_no = request.POST['mobilenumber']
                employee.password = request.POST['password']
                employee.email = request.POST['email']
                employee.company_name = company_name
                employee.company_id = company_id
                employee.head_id = request.POST['head']
                employee.role_id = ','.join(role_ids)
                employee.role_name = role_name_combined
                employee.dp_id = ','.join(depart_ids)
                employee.update_by_id = request.session.get('session_id')
                employee.update_by_name = request.session['session_user']
                employee.save()

            if user.emp_type == "intern":
                employee = tbl_intern.objects.filter(user_id=user.userId).first()

                employee.name = request.POST['name']
                employee.middle_name = request.POST['middle_name']
                employee.last_name = request.POST['last_name']
                employee.ph_no = request.POST['mobilenumber']
                employee.password = request.POST['password']
                employee.email = request.POST['email']
                employee.company_name = company_name
                employee.company_id = company_id
                employee.head_id = request.POST['head']
                employee.role_id = ','.join(role_ids)
                employee.role_name = role_name_combined
                employee.dp_id = ','.join(depart_ids)
                employee.update_by_id = request.session.get('session_id')
                employee.update_by_name = request.session['session_user']
                employee.save()

            name = request.POST['name']
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name=request.session['session_user'],
                change_status=f"Edit user - {name}",
                added_date=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

            return JsonResponse({
                'status': 'success',
                'message': f'User {name} has been successfully updated!'
            })
        roles = tbl_roles.objects.all()[1:]
        departments = master_department.objects.all()
        context = {
            'user': user,
            'users': users,
            'h_name': head_name,
            'compney_list': compney_list,
            'session_roleid': session_roleid,
            'roles': roles,
            'departments': departments,
            'user_departments': user_departments,
            'user_roles': user_roles,
            'is_edit': True,
        }
        return render(request, 'add-user.html', context)
    else:
        return redirect(login)

# def edit_user(request, user_id):
#     user_id = int(user_id)
#     if 'session_id' in request.session:
#         session_roleid = request.session.get('session_roleid')
#         compney_list = master_company.objects.all()
#         user = get_object_or_404(tbl_users2, userId=user_id)
#         users = tbl_users2.objects.all()
#         emp_id = user.emp_id
        
#         # âœ… Proper usage of get_or_create
#         employee, created = tbl_employee.objects.get_or_create(emp_id=emp_id)
        
#         user_departments = user.dp_id.split(',') if user.dp_id else []
#         user_roles = user.role_id.split(',') if user.role_id else []
        
#         if user.head_id:
#             user_head = tbl_users2.objects.filter(userId=user.head_id).first()
#             head_name = user_head.name if user_head else ''
#         else:
#             head_name = ''
            
#         if request.method == 'POST':
#             # Update user information
#             user.name = request.POST['name']
#             user.middle_name = request.POST['middle_name']
#             user.last_name = request.POST['last_name']
#             user.mobile = request.POST['mobilenumber']
#             user.password = request.POST['password']
#             user.email = request.POST['email']
#             user.company_name = request.POST['company_name']
#             user.head_id = request.POST['head']
#             user.role_id = ','.join(request.POST.getlist('roles'))
#             user.dp_id = ','.join(request.POST.getlist('departments'))
#             user.updated_by_id = request.session.get('session_id')
#             user.updated_by_name = request.session['session_user']
            
#             company_name = request.POST['company_name']
#             company_n = master_company.objects.filter(com_name=company_name).first()
#             user.company_id = company_n.com_id if company_n else None
            
#             role_ids = request.POST.getlist('roles')
#             role_names = []
#             for role_id in role_ids:
#                 role_n = tbl_roles.objects.filter(roleId=role_id).first()
#                 if role_n:
#                     role_names.append(role_n.role)
#             user.role_name = ', '.join(role_names)
#             user.save()
            
#             # Update employee
#             employee.name = request.POST['name']
#             employee.middle_name = request.POST['middle_name']
#             employee.last_name = request.POST['last_name']
#             employee.ph_no = request.POST['mobilenumber']
#             employee.password = request.POST['password']
#             employee.email = request.POST['email']
#             employee.company_name = request.POST['company_name']
#             employee.head_id = request.POST['head']
#             employee.role_id = ','.join(request.POST.getlist('roles'))
#             employee.role_name = ', '.join(role_names)
#             employee.dp_id = ','.join(request.POST.getlist('departments'))
#             employee.update_by_id = request.session.get('session_id')
#             employee.update_by_name = request.session['session_user']
#             employee.user_id = user.userId
#             employee.save()
            
#             name = request.POST['name']
#             tbl_messages.objects.create(
#                 message_name=request.session['session_user'],
#                 change_status=f"Edit user - {name}",
#                 added_date=timezone.now() + timedelta(hours=5, minutes=30),
#                 company_id=request.session['company_id']
#             )
                
#             return JsonResponse({
#                 'status': 'success',
#                 'message': f'User {name} has been successfully updated!'
#             })
        
#         roles = tbl_roles.objects.all()[1:]
#         departments = master_department.objects.all()
#         return render(request, 'add-user.html', {
#             'user': user,
#             'users': users,
#             'h_name': head_name,
#             'compney_list': compney_list,
#             'session_roleid': session_roleid,
#             'roles': roles,
#             'departments': departments,
#             'user_departments': user_departments,
#             'user_roles': user_roles,
#             'is_edit': True,
#         })
#     else:
#         return redirect(login)


def delete_user(request, userId):
    if 'session_id' in request.session:
        user = get_object_or_404(tbl_users2, userId=userId)
        
        name = user.name
        ip_address = get_client_ip(request)

        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete user - {name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        if user.emp_type == "intern":
            intern = tbl_intern.objects.filter(user_id=userId).first()
            if intern:
                intern.delete()
        else:            
            employee = tbl_employee.objects.filter(user_id=userId).first()
            if employee:
                employee.delete()
            
        user.delete()
        return JsonResponse({'success': True, 'name': name})
    else:
        return redirect(login)

def view_user(request, userId):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        user = get_object_or_404(tbl_users2, userId=userId)
        
        head_user = tbl_users2.objects.filter(userId=user.head_id).first()
        head_name = head_user.name if head_user else None
        
        dp_ids = [int(i) for i in user.dp_id.split(',')]
        departments = master_department.objects.filter(dp_id__in=dp_ids)
        department_name = [dept.dep_name for dept in departments]

        employee = tbl_employee.objects.filter(emp_id=user.emp_id).first()
        
        return render(request,"view_user.html",{'session_roleid':session_roleid,'user':user,'employee':employee,'head_name': head_name,'department_name': department_name}) 
    else:
        return redirect(login)

def crm_dashboard(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session.get('company_id')
        
        # from_date = request.POST.get('from_date')
        # to_date = request.POST.get('to_date')
        date_range_filter = request.POST.get('date_range')
        
        if set(session_roleid).intersection({"1"}):
            selected_company_id = request.session.get('selected_company_id', None)
            if selected_company_id:
                base_queryset = tbl_lead.objects.filter(company_id=selected_company_id)
                dcr_data = tbl_dcr.objects.filter(company_id=selected_company_id)
            else:
                base_queryset = tbl_lead.objects.all()
                dcr_data = tbl_dcr.objects.all()
        elif set(session_roleid).intersection({"6"}):
            base_queryset = tbl_lead.objects.filter(
                Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id),
                company_id=company_id
            )
            dcr_data = tbl_dcr.objects.filter(
                Q(head_id=session_id) | Q(add_by_id=session_id),
                company_id=company_id
            )
        else:
            base_queryset = tbl_lead.objects.filter(
                Q(add_by_id=session_id) | Q(assign_to=session_id)
            )
            dcr_data = tbl_dcr.objects.filter(add_by_id=session_id)
    
        # Apply date range filter to create_time
        # query = Q()
        # try:
        #     if from_date or to_date:
        #         if from_date:
        #             from_date_obj = datetime.strptime(from_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
        #         else:
        #             from_date_obj = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
    
        #         if to_date:
        #             to_date_obj = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
        #         else:
        #             to_date_obj = from_date_obj.replace(hour=23, minute=59, second=59, microsecond=999999)
    
        #         if from_date_obj > to_date_obj:
        #             from_date_obj, to_date_obj = to_date_obj, from_date_obj
    
        #         query &= Q(create_time__range=[from_date_obj, to_date_obj])
        # except ValueError:
        #     messages.error(request, "Invalid date format.")
        #     return render(request, "crm_dashboard.html", {
        #         'session_roleid': session_roleid
        #     })
    
        # # Final filtered queryset
        # data = base_queryset.filter(query).order_by('-l_id')
        
        if date_range_filter:
            try:
                start_str, end_str = date_range_filter.split(' - ')
                start_date = parser.parse(start_str.strip())
                end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                base_queryset = base_queryset.filter(create_time__gte=start_date, create_time__lte=end_date)
            except Exception as e:
                    print(f"Date parsing error: {e}")
                    
        salesperson_lead_counts = base_queryset.values('add_by_id').annotate(lead_count=Count('l_id')).order_by('-lead_count')
        
        # Get the best salesperson (the one with the most leads)
        if salesperson_lead_counts:
            best_salesperson = salesperson_lead_counts[0]  # The one with the most leads
            best_salesperson_id = best_salesperson['add_by_id']
            best_salesperson_count = best_salesperson['lead_count']
            
            # Optionally, get the name of the best salesperson (assuming it's stored in add_by_name)
            best_salesperson_name = tbl_lead.objects.filter(add_by_id=best_salesperson_id).first().add_by_name
        else:
            best_salesperson_name = None
            best_salesperson_count = 0
                    
        data = base_queryset.order_by('-l_id')
        
        all_inquiry = data.count()
        fresh_inquiry = data.filter(status="Fresh").count()
        
        today = timezone.now().date()
        today_followup = data.filter(next_followup_date__date=today).count()
        pending_followup = data.filter(next_followup_date__date__lt=today).count() 
        
        Meeting_inquiry = data.filter(status="Meeting").count()
        Contacted_inquiry = data.filter(status="Contacted").count()
        Quotation_inquiry = data.filter(status="Quotation").count()
        Contracted_inquiry = data.filter(status="Contracted").count()
        Onhold_inquiry = data.filter(status="Onhold").count()
        Lost_inquiry = data.filter(status="Lost").count()
        today_meet_count = data.filter(next_meeting_date__date=today).count()
        Won_inquiry = data.filter(status="Won").count()
        Demo_inquiry = data.filter(status="Demo").count()
        
        # Calculate last month's date range
        today = timezone.now().date()
        first_day_this_month = today.replace(day=1)
        last_day_last_month = first_day_this_month - timedelta(days=1)
        first_day_last_month = last_day_last_month.replace(day=1)
        
        # Lead count for last month
        last_month_lead_count = base_queryset.filter(
            create_time__date__gte=first_day_last_month,
            create_time__date__lte=last_day_last_month
        ).count()
        
        # DCR count for last month (adjust filters as per your DCR model fields)
        last_month_dcr_count = dcr_data.filter(
            create_time__date__gte=first_day_last_month,
            create_time__date__lte=last_day_last_month
        ).count()

        return render(request, "crm_dashboard.html", {
            'Won_inquiry': Won_inquiry,
            'Demo_inquiry': Demo_inquiry,
            'all_inquiry': all_inquiry,
            'fresh_inquiry': fresh_inquiry,
            'today_followup': today_followup,
            'pending_followup': pending_followup,
            'Meeting_inquiry': Meeting_inquiry,
            'Contacted_inquiry': Contacted_inquiry,
            'Quotation_inquiry': Quotation_inquiry,
            'Contracted_inquiry': Contracted_inquiry,
            'Onhold_inquiry': Onhold_inquiry,
            'Lost_inquiry': Lost_inquiry,
            'today_meet_count': today_meet_count,
            'last_month_lead_count': last_month_lead_count,
            'last_month_dcr_count': last_month_dcr_count,
            'session_roleid': session_roleid,
            'best_salesperson_name': best_salesperson_name,
            'best_salesperson_count': best_salesperson_count,
        })
    else:
        return redirect('login') 
        
def inquiry(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.all().order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id), company_id=company_id 
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(Q(add_by_id=session_id) | Q(assign_to=session_id)).order_by('-l_id')
        
        return render(request,"inquiry.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def fresh_inquiry(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}): 
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(status="Fresh",company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.filter(status="Fresh").order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(status="Fresh")
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(status="Fresh")
                ).order_by('-l_id')
        
        return render(request,"fresh_inquiry.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)

def today_followup(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        today = timezone.now().date()

        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(next_followup_date__date=today,company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.filter(next_followup_date__date=today).order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(next_followup_date__date=today)
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(next_followup_date__date=today)
                ).order_by('-l_id')
        
        return render(request,"today_followup.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def pending_followup(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        today = timezone.now().date()

        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(next_followup_date__date__lt=today,company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.filter(next_followup_date__date__lt=today).order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(next_followup_date__date__lt=today)
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(next_followup_date__date__lt=today)
                ).order_by('-l_id')
        
        return render(request,"pending_followup.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def Meeting_inquiry(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}): 
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(status="Meeting",company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.filter(status="Meeting").order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(status="Meeting")
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(status="Meeting")
                ).order_by('-l_id')
        
        return render(request,"Meeting_inquiry.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)        
        
def Contacted_inquiry(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}): 
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(status="Contacted",company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.filter(status="Contacted").order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(status="Contacted")
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(status="Contacted")
                ).order_by('-l_id')
        
        return render(request,"Contacted_inquiry.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)        
        
def Quotation_inquiry(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}): 
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(status="Quotation",company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.filter(status="Quotation").order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(status="Quotation")
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(status="Quotation")
                ).order_by('-l_id')
        
        return render(request,"Quotation_inquiry.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)        
        
def Contracted_inquiry(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}): 
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(status="Contracted",company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.filter(status="Contracted").order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(status="Contracted")
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(status="Contracted")
                ).order_by('-l_id')
        
        return render(request,"Contracted_inquiry.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)        
        
def Onhold_inquiry(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}): 
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(status="Onhold",company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.filter(status="Onhold").order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(status="Onhold")
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(status="Onhold")
                ).order_by('-l_id')
        
        return render(request,"Onhold_inquiry.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)        
        
def Lost_inquiry(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}): 
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(status="Lost",company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.filter(status="Lost").order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(status="Lost")
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(status="Lost")
                ).order_by('-l_id')
        
        return render(request,"Lost_inquiry.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login) 
        
def today_meetings(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        today = timezone.now().date()

        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(next_meeting_date__date=today,company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.filter(next_meeting_date__date=today).order_by('-l_id')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    (Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(company_id=company_id) & Q(next_meeting_date__date=today)
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(
                    (Q(add_by_id=session_id) | Q(assign_to=session_id)) & Q(next_meeting_date__date=today)
                ).order_by('-l_id')
        
        return render(request,"today_meetings.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def today_dcr(request):
    if 'session_id' not in request.session:
        return redirect(login)  # Replace with 'login' URL name or view if necessary

    session_id = request.session.get('session_id')
    session_roleid = request.session.get('session_roleid', [])
    company_id = request.session.get('company_id')
    today = timezone.now().date()

    data = tbl_dcr.objects.none()  # Default empty queryset in case conditions fail

    if session_id and session_roleid:
        # Super Admin (Role ID: 1)
        if "1" in session_roleid:
            selected_company_id = request.session.get('selected_company_id')
            if selected_company_id:
                data = tbl_dcr.objects.filter(
                    create_time__date=today,
                    company_id=selected_company_id
                ).order_by('-l_id')
            else:
                data = tbl_dcr.objects.filter(
                    create_time__date=today
                ).order_by('-l_id')

        # Head (Role ID: 6)
        elif "6" in session_roleid:
            data = tbl_dcr.objects.filter(
                Q(head_id=session_id) | Q(add_by_id=session_id),
                create_time__date=today,
                company_id=company_id
            ).order_by('-l_id')

        # Other roles
        else:
            data = tbl_dcr.objects.filter(
                Q(add_by_id=session_id),
                create_time__date=today,
                company_id=company_id
            ).order_by('-l_id')

    return render(request, "today_dcr.html", {
        'data': data,
        'session_roleid': session_roleid
    })
        
def upload_lead(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            lead_status = request.POST.get('lead_status')
            # assign_to = request.POST.get('assign_to')
            
            if 'file' in request.FILES:
                uploaded_file = request.FILES['file']
                
                fs = FileSystemStorage()
                file_name = fs.save(uploaded_file.name, uploaded_file)
                file_path = fs.path(file_name)
                
                df = pd.read_excel(file_path)
                
                for index, row in df.iterrows():
                    business_name = row.get('Business name')
                    mobile = row.get('mobile')
                    
                    if business_name and mobile:
                        lead, created = tbl_lead.objects.update_or_create(
                            mobile=mobile,
                            defaults={
                                'business_name': business_name,
                                'status': lead_status,
                                # 'assign_to': assign_to,
                                'create_time':timezone.now() + timedelta(hours=5, minutes=30),
                                'add_by_id': request.session['session_id'],
                                'add_by_name': request.session['session_user'], 
                                'company_id': request.session['company_id'], 
                            }
                        )
                        
                        tbl_followup.objects.create(
                            followupRemarks=lead_status,
                            lead_id=lead.l_id,
                            add_by_id=request.session['session_id'],
                            add_by_name=request.session['session_user'],
                            company_id=request.session['company_id'],
                            create_time=timezone.now() + timedelta(hours=5, minutes=30),
                        )
                        
                return JsonResponse({'message': 'File processed successfully', 'status': 'success'})
        return render(request,'show-lead.html')
    else:
        return redirect(login)
        
def lead_excel(request):
    if request.method == 'POST':
        from_date = request.POST.get('from_date')
        to_date = request.POST.get('to_date')

        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
            except ValueError:
                pass

        else:
            return HttpResponse("Please select a date.", status=404)


        lead_entries = tbl_lead.objects.filter(
            create_time__range=[from_date, to_date]
        )

        if lead_entries.count() == 0:
            return HttpResponse("No records found for the given date range.", status=404)

        wb = Workbook()
        ws = wb.active
        ws.title = "lead Entries"

        headers = ["ID", "Company Name", "Client Name", "Email", "Mobile", "House No", "Address", "Area", "City",
                   "Pincode", "State", "Country", "Segment", "Remark","Source", "Next Follow Up", "Stage By", "Status", "Next Meeting Date",
                   "Assigned To","Added By"]
        ws.append(headers) 
        
        users_dict = {user.userId: user.name for user in tbl_users2.objects.all()}

        for entry in lead_entries:
            next_followup_date = entry.next_followup_date.strftime('%d/%m/%Y') if entry.next_followup_date else 'N/A'
            next_meeting_date = entry.next_meeting_date.strftime('%d/%m/%Y') if entry.next_meeting_date else 'N/A'
            create_time = entry.create_time.strftime('%d/%m/%Y') if entry.create_time else 'N/A'
            
            assigned_to_name = users_dict.get(entry.assign_to, 'N/A')
        
            ws.append([
                entry.l_id,
                entry.business_name,
                entry.c_name,
                entry.email,
                entry.mobile,
                entry.house_no,
                entry.address,
                entry.area,
                entry.city,
                entry.pincode,
                entry.state,
                entry.country,
                entry.segment,
                entry.remark,
                entry.source,
                next_followup_date,
                entry.stage_by,
                entry.status,
                next_meeting_date,
                assigned_to_name,
                entry.add_by_name,
            ])

        response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        response['Content-Disposition'] = 'attachment; filename="lead-Report.xlsx"'
        wb.save(response)

        return response

# def lead_update_view(request, l_id):
#     if 'session_id' in request.session:
#         session_roleid = request.session.get('session_roleid')

#         lead = get_object_or_404(tbl_lead, l_id=l_id)
#         statuses = master_status.objects.all().exclude(status="Fresh")
#         lost_reasons = master_inqclosereason.objects.all()
#         followup = tbl_followup.objects.filter(lead_id=l_id)
        
#         quotation = tbl_quatation_history.objects.filter(l_id=l_id)
#         today = timezone.now().date()
#         Meeting_history = tbl_followup.objects.filter(lead_id=l_id,followupRemarks="Meeting") 
#         today_meeting= tbl_followup.objects.filter(next_meeting_date__date=today,lead_id=l_id,followupRemarks="Meeting") 
        
#         if request.method == 'POST':
#             curr_data = get_object_or_404(tbl_lead, l_id=l_id) 
#             Status = request.POST.get('status', curr_data.status)
#             Remark = request.POST.get('remark', curr_data.remark)
#             file_path = request.FILES.get('file')
#             Date = request.POST.get('nf_date', '')
#             M_Date = request.POST.get('mt_date', '')
#             reason = request.POST.get('reason', curr_data.reason)
            
#             # Parse the dates and ensure they're not null
#             next_followup_date = parse_datetime(Date) if Date else (curr_data.next_followup_date if curr_data.next_followup_date else None)
#             next_meeting_date = parse_datetime(M_Date) if M_Date else (curr_data.next_meeting_date if curr_data.next_meeting_date else None)
            
#             # Prepare data for update
#             update_data = {
#                 'status': Status,
#                 'remark': Remark,
#                 'reason': reason,
#                 'company_id': company_id,
#                 'next_followup_date': next_followup_date,
#                 'next_meeting_date': next_meeting_date,
#             }
            
#             if file_path:
#                 update_data['file_path'] = file_path
                
#             tbl_lead.objects.filter(l_id=l_id).update(**update_data)
            
#             if 'mt_date' in request.POST and next_meeting_date:
#                 tbl_meeting_history.objects.create(
#                     name=curr_data.c_name,
#                     mobile=curr_data.mobile,
#                     remark=curr_data.remark,
#                     meet_date=next_meeting_date,
#                     add_by_name=Username,
#                     add_by_id=session_id,
#                 ).save()
                
#             if file_path:
#                 tbl_quatation_history.objects.create(
#                     file_name=file_path,
#                     l_id=l_id,
#                 ).save()
                
#             tbl_followup.objects.create(
#                 followupRemarks=Status,
#                 remark=Remark,
#                 reason=reason,
#                 next_followup_date=next_followup_date,
#                 next_meeting_date=next_meeting_date,
#                 lead_id=l_id,
#                 head_id=head_id,
#                 add_by_id=session_id,
#                 add_by_name=Username,
#                 company_id=company_id,
#                 create_time=timezone.now() + timedelta(hours=5, minutes=30),
#             ).save()
            
#             if Status == "Contracted":
#                 data = get_object_or_404(tbl_lead, l_id=l_id)
#                 nnnnn = master_client.objects.create(
#                     name=data.name,
#                     comp_name=data.c_name,
#                     mobile=data.mobile,
#                     billing_add=data.address,
#                     area=data.area,
#                     city=data.city,
#                     state=data.state,
#                     country=data.country,
#                     company_id=company_id,
#                     add_by_id=data.user_id,
#                     add_by_name=Username, 
#                 )
#                 nnnnn.save()
                
#             if Status == "Meeting":
#                 # Send WhatsApp message
#                 try:
#                     ph_no = lead.mobile
#                     if ph_no:
#                         company_id_ = lead.company_id
#                         company_obj = get_object_or_404(master_company, com_id=company_id_)
#                         company_name = company_obj.com_name.title()  # Adjust field if needed
                        
#                         lead_name = lead.c_name.title()
#                         meeting_date = next_meeting_date
#                         response = send_whatsapp_message(
#                             ph_no,
#                             message_type='template',
#                             template_name='meeting_message_2',
#                             template_params=[company_name, lead_name, meeting_date]
#                         )
#                         messages.success(request, f"WhatsApp sent successfully. Response: {response}")
                        
#                 except Exception as e:
#                     messages.error(request, f"Failed to send WhatsApp message: {e}")
            
#             return redirect(lead_list)
#             # return JsonResponse({'status': 'success', 'message': f'Lead {curr_data.c_name} status change successfully!'})

#         context = {
#             'lead': lead,
#             'quotation': quotation,
#             'Meeting_history': Meeting_history,
#             'today_meeting': today_meeting,
#             'session_roleid': session_roleid,
#             'statuses': statuses,
#             'lost_reasons': lost_reasons,
#             'followup': followup,
#         }

#         return render(request, 'lead-history.html', context)
#     else:
#         return redirect(login)


def lead_update_view(request, l_id):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session.get('company_id')  # Assuming from session
        Username = request.session.get('Username')  # Assuming from session
        head_id = request.session.get('head_id')  # Assuming from session

        lead = get_object_or_404(tbl_lead, l_id=l_id)
        lead_clients = tbl_lead_client.objects.filter(l_id=lead.l_id)
        existing_followups = tbl_followup.objects.filter(lead_id=l_id).values_list('followupRemarks', flat=True)

        # Now exclude "Fresh" and "Contacted" if they already exist in tbl_followup
        statuses = master_status.objects.all()

        if "Contacted" in existing_followups:
            statuses = statuses.exclude(status__in=["Fresh", "Contacted"]) 
        if "Fresh" in existing_followups:
            statuses = statuses.exclude(status="Fresh")
        
        # statuses = master_status.objects.all().exclude(status="Fresh")
        lost_reasons = tbl_reason.objects.all()
        followup = tbl_followup.objects.filter(lead_id=l_id)
        quotation = tbl_quatation_history.objects.filter(l_id=l_id)
        
        Meeting_count = tbl_followup.objects.filter(lead_id=l_id,followupRemarks="Meeting").count()
        Contacted_count = tbl_followup.objects.filter(lead_id=l_id,followupRemarks="Contacted").count()
        quotation_count = tbl_followup.objects.filter(lead_id=l_id,followupRemarks="Quotation").count()
        Contracted_count = tbl_followup.objects.filter(lead_id=l_id,followupRemarks="Contracted").count()

        today = timezone.now().date()
        Meeting_history = tbl_followup.objects.filter(lead_id=l_id, followupRemarks="Meeting")
        today_meeting = tbl_followup.objects.filter(next_meeting_date__date=today, lead_id=l_id, followupRemarks="Meeting")

        if request.method == 'POST':
            curr_data = lead  # already fetched above
            Status = request.POST.get('status', curr_data.status)
            Remark = request.POST.get('remark', curr_data.remark)
            file_path = request.FILES.get('file')
            Date = request.POST.get('nf_date', '')
            M_Date = request.POST.get('mt_date', '')
            reason = request.POST.get('reason', curr_data.reason)

            next_followup_date = parse_datetime(Date) if Date else curr_data.next_followup_date
            next_meeting_date = parse_datetime(M_Date) if M_Date else curr_data.next_meeting_date

            update_data = {
                'status': Status,
                'remark': Remark,
                'reason': reason,
                'company_id': company_id,
                'next_followup_date': next_followup_date,
                'next_meeting_date': next_meeting_date,
            }
            if file_path:
                update_data['file_path'] = file_path

            tbl_lead.objects.filter(l_id=l_id).update(**update_data)

            if next_meeting_date:
                tbl_meeting_history.objects.create(
                    name=curr_data.c_name,
                    mobile=curr_data.mobile,
                    remark=curr_data.remark,
                    meet_date=next_meeting_date,
                    add_by_name=Username,
                    add_by_id=session_id,
                )

            if file_path:
                tbl_quatation_history.objects.create(
                    file_name=file_path,
                    l_id=l_id,
                )

            tbl_followup.objects.create(
                followupRemarks=Status,
                remark=Remark,
                reason=reason,
                next_followup_date=next_followup_date,
                next_meeting_date=next_meeting_date,
                lead_id=l_id,
                head_id=head_id,
                add_by_id=session_id,
                add_by_name=Username,
                company_id=company_id,
                create_time=timezone.now() + timedelta(hours=5, minutes=30),
            )

            if Status == "Contracted":
                tbl_client = master_client.objects.create(
                    name=curr_data.name,
                    comp_name=curr_data.c_name,
                    mobile=curr_data.mobile,
                    billing_add=curr_data.address,
                    area=curr_data.area,
                    city=curr_data.city,
                    state=curr_data.state,
                    country=curr_data.country,
                    company_id=company_id,
                    add_by_id=curr_data.user_id,
                    add_by_name=Username,
                )

            if Status == "Meeting":
                try:
                    ph_no = lead.mobile
                    if ph_no:
                        company_obj = get_object_or_404(master_company, com_id=lead.company_id)
                        company_name = company_obj.com_name.title()
                        lead_name = lead.c_name.title()
                        meeting_date_str = next_meeting_date.strftime('%d-%m-%Y | %H:%M') if next_meeting_date else ''

                        response = send_whatsapp_message(
                            ph_no,
                            message_type='template',
                            template_name='meeting_message_2',
                            template_params=[company_name, lead_name, meeting_date_str]
                        )
                        messages.success(request, f"WhatsApp sent successfully. Response: {response}")
                except Exception as e:
                    messages.error(request, f"Failed to send WhatsApp message: {e}")

            return redirect(lead_list)

        context = {
            'Meeting_count':Meeting_count,
            'Contacted_count':Contacted_count,
            'quotation_count':quotation_count,
            'Contracted_count':Contracted_count,
            'lead': lead,
            'lead_clients':lead_clients,
            'quotation': quotation,
            'Meeting_history': Meeting_history,
            'today_meeting': today_meeting,
            'session_roleid': session_roleid,
            'statuses': statuses,
            'lost_reasons': lost_reasons,
            'followup': followup,
        }
        return render(request, 'lead-history.html', context)
    else:
        return redirect(login)


def lead_list(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        company_id = request.session['company_id']
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        cites = master_city.objects.all()  
        products = master_product.objects.all()
        sources = master_leadtype.objects.all() 
        lost_reasons = tbl_reason.objects.all()
        statuses = master_status.objects.all()
        areas = master_area.objects.all()  
        busi_seg = tbl_bussi_seg.objects.all()
        inq_for = tbl_inqiry_for.objects.all() 
        
        assign_dict={com.userId:com.name for com in tbl_users2.objects.all()}
        
        # role_filter = Q(role_id__contains='6') | Q(role_id__contains='7') | Q(role_id__contains='8')
        
        if session_roleid == '1':
            assign_name = tbl_users2.objects.filter(Q(role_id__contains='6') | Q(role_id__contains='7') | Q(role_id__contains='8'))
        else:
            assign_name = tbl_users2.objects.filter(Q(head_id=session_id) & Q(role_id__contains='6') | Q(role_id__contains='7') | Q(role_id__contains='8'))
        
        # assign_name = tbl_users2.objects.filter(Q(head_id=session_id) & (Q(role_id__contains='6') | Q(role_id__contains='7') | Q(role_id__contains='8')))
        value = "Lead"
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_lead.objects.filter(company_id=selected_company_id).order_by('-l_id')
                else:
                    data = tbl_lead.objects.all().order_by('-l_id')
                    
                # if company_id == 0:
                    # data = tbl_lead.objects.all().order_by('-l_id')
                # else:
                #     data = tbl_lead.objects.filter(company_id=company_id).order_by('-create_time')
            elif set(session_roleid).intersection({"6"}):
                data = tbl_lead.objects.filter(
                    Q(head_id=session_id) | Q(add_by_id=session_id) | Q(assign_to=session_id), company_id=company_id
                ).order_by('-l_id')
            else:
                data = tbl_lead.objects.filter(Q(add_by_id=session_id) | Q(assign_to=session_id)).order_by('-l_id')
                
            # from_date = request.GET.get('fromDate')
            # to_date = request.GET.get('toDate')
            date_range_filter = request.GET.get('date_range')
            status = request.GET.get('status')
            business_name = request.GET.get('business_name')
            c_name = request.GET.get('c_name')
            # name = request.GET.get('name')
            email = request.GET.get('email')
            mobile = request.GET.get('mobile')
            house_no = request.GET.get('house_no')
            area = request.GET.get('area')
            address = request.GET.get('address')
            city = request.GET.get('city')
            country = request.GET.get('country')
            pincode = request.GET.get('pincode')
            # state = request.GET.get('state')
            segment = request.GET.get('segment')
            source = request.GET.get('source')
            remark = request.GET.get('remark')
            next_followup_date = request.GET.get('next_followup_date')
            inqu_for = request.GET.get('inqu_for')
            assign_to = request.GET.get('assign_to')
            
            if date_range_filter:
                try:
                    start_str, end_str = date_range_filter.split(' - ')
                    start_date = parser.parse(start_str.strip())
                    end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                    data = data.filter(create_time__gte=start_date, create_time__lte=end_date)
                except Exception as e:
                    print(f"Date parsing error: {e}")
                
            if status:
                data = data.filter(status__icontains=status)
            if business_name:
                data = data.filter(business_name__icontains=business_name)
            if c_name:
                data = data.filter(c_name__icontains=c_name)
            if email:
                data = data.filter(email__icontains=email)
            if mobile:
                data = data.filter(mobile__icontains=mobile)
            if house_no:
                data = data.filter(house_no__icontains=house_no)
            if address:
                data = data.filter(address__icontains=address)
            if area:
                data = data.filter(area__icontains=area)
            if city:
                data = data.filter(city__icontains=city)
            if pincode:
                data = data.filter(pincode__icontains=pincode)
            # if state:
            #     data = data.filter(state__icontains=state)
            if country:
                data = data.filter(country__icontains=country)
            if segment:
                data = data.filter(segment__icontains=segment)
            if remark:
                data = data.filter(remark__icontains=remark)
            if source:
                data = data.filter(source__icontains=source)
            if next_followup_date:
                data = data.filter(next_followup_date__icontains=next_followup_date)
            if inqu_for:
                data = data.filter(inqu_for__icontains=inqu_for)
            if assign_to:
                data = data.filter(assign_to__icontains=assign_to)
            
            # query = Q()
            
            # if from_date or to_date:
            #     try:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(create_time__range=[from_date, to_date])
                    
            #     except ValueError:
            #         pass
             
            # if status:
            #     query |= Q(status__icontains=status)   
            # if business_name:
            #     query |= Q(business_name__icontains=business_name)
            # if c_name:
            #     query |= Q(c_name__icontains=c_name)
            # if name:
            #     query |= Q(name__icontains=name)
            # if email:
            #     query |= Q(email__icontains=email)
            # if mobile:
            #     query |= Q(mobile__icontains=mobile)
            # if house_no:
            #     query |= Q(house_no__icontains=house_no)
            # if address:
            #     query |= Q(address__icontains=address)
            # if area:
            #     query |= Q(area__icontains=area)
            # if city:
            #     query |= Q(city__icontains=city)
            # if pincode:
            #     query |= Q(pincode__icontains=pincode)
            # if state:
            #     query |= Q(state__icontains=state)
            # if country:
            #     query |= Q(country__icontains=country)
            # if segment:
            #     query |= Q(segment__icontains=segment)
            # if remark:
            #     query |= Q(remark__icontains=remark)
            # if source:
            #     query |= Q(source__icontains=source)
            # if next_followup_date:
            #     query |= Q(next_followup_date__icontains=next_followup_date)
            # if stage_by:
            #     query |= Q(stage_by__icontains=stage_by)
            # if assign_to:
            #     query |= Q(assign_to__icontains=assign_to)
            
            # data = data.filter(query)
            data = data.order_by('-l_id')
            
            if request.GET.get('download') == 'excel':
                wb = openpyxl.Workbook()
                ws = wb.active
                ws.title = "Leads"

                headers = [
                    "Lead ID", "Company Name", "Client Name", "Email", "Mobile Number", "Office No. & Building name", "Area", "Address", "City",
                    "Pincode", "Country", "Business Segment", "Inquiry For", "Source of Lead", "Status", "Remark", "Follow-up Date", "Meeting Date",
                    "Assign To", "Create Time"
                ]
                ws.append(headers)

                for lead in data:
                    row = [
                        lead.l_id,
                        lead.business_name,
                        lead.c_name,
                        lead.email,
                        lead.mobile,
                        lead.house_no,
                        lead.area,
                        lead.address,
                        lead.city,
                        lead.pincode,
                        lead.country,
                        lead.segment,
                        lead.inqu_for,
                        lead.source,
                        lead.status,
                        lead.remark, 
                        lead.next_followup_date.strftime("%Y-%m-%d %H:%M") if lead.next_followup_date else '',
                        lead.next_meeting_date.strftime("%Y-%m-%d %H:%M") if lead.next_meeting_date else '',
                        assign_dict.get(lead.assign_to, "Not Assign"),
                        lead.create_time.strftime("%Y-%m-%d %H:%M") if lead.create_time else '',
                    ]
                    ws.append(row)

                # Autofit column widths
                for col in ws.columns:
                    max_length = 0
                    col_letter = get_column_letter(col[0].column)
                    for cell in col:
                        try:
                            if cell.value:
                                max_length = max(max_length, len(str(cell.value)))
                        except:
                            pass
                    ws.column_dimensions[col_letter].width = max_length + 2

                response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                response["Content-Disposition"] = "attachment; filename=leads_filtered.xlsx"
                wb.save(response)
                return response
            
            selected_company_id = request.session.get('selected_company_id')
            
            for job_obj in data:
                job_obj.lead_assign_name=assign_dict.get(job_obj.assign_to, "Unknown Name")
                
        return render(request, "show-lead.html", {
            'areas':areas,
            'busi_seg':busi_seg,
            'inq_for':inq_for,
            'statuses': statuses,
            'lost_reasons': lost_reasons,
            'selected_company_id':selected_company_id ,
            'assign_name':assign_name,
            'sources':sources,
            'cites': cites,
            'products': products,
            'data':data,
            'session_roleid':session_roleid,
            'session_id': session_id,
            'company_id': company_id,
            'Username': Username,
            'comp_name': user_compeny,
            'companey_list': master_company.objects.all(),
            'status':value
        })
    else:
        return redirect(login)

 
def addlead(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()  
        areas = master_area.objects.all()  
        sources = master_leadtype.objects.all()
        busi_seg = tbl_bussi_seg.objects.all()
        inq_for = tbl_inqiry_for.objects.all() 
        statuses = master_status.objects.all()
        
        return render(request, "add-lead.html", {
            'areas':areas,
            'sources':sources,
            'statuses':statuses,
            'cites': cites,
            'busi_seg': busi_seg,
            'inq_for':inq_for,
            'session_roleid':session_roleid
        }) 
    else:
        return redirect(login)
        
def add_lead(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        if request.method == 'POST':
            business_name = request.POST.get('business_name')
            c_name = request.POST.get('c_name')
            email = request.POST.get('email')
            ph_no = request.POST.get('ph_no')
            house_no = request.POST.get('house_no')
            area = request.POST.get('add3')
            address = request.POST.get('add2')
            city = request.POST.get('city')
            country = request.POST.get('country')
            pincode = request.POST.get('pincode')
            segment = request.POST.get('segment')
            source = request.POST.get('source')
            status = request.POST.get('status')
            remark = request.POST.get('remark')
            n_f_date = request.POST.get('n_f_date')
            inqu_for = request.POST.get('inqu_for')
            head_id = request.session['head_id']
            
            client_names = request.POST.getlist('client_name[]')
            client_mobiles = request.POST.getlist('client_mobile[]')
            
            # state = request.POST.get('state')
            # assign_to = request.POST.get('assign_to')
            
            # if not assign_to:
            #     assign_to = None

            new_lead = tbl_lead(
                business_name=business_name,
                c_name=c_name,
                email = email,
                mobile=ph_no,
                house_no = house_no,
                area=area,
                address=address,
                city=city,
                country=country,
                pincode=pincode,
                segment=segment,
                source=source,
                status=status,
                remark=remark,
                next_followup_date=n_f_date,
                inqu_for=inqu_for,
                head_id = head_id,
                create_time=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=request.session.get('company_id'),
                add_by_id=session_id,
                add_by_name=Username,
                user_id=session_id,
                # state=state,
                # assign_to = assign_to,
            )
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add lead - {business_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

            new_lead.save()
            
            for name, mobile in zip(client_names, client_mobiles):
                if name.strip() and mobile.strip():
                    tbl_lead_client.objects.create(
                        l_id=new_lead.l_id,
                        name=name.strip(),
                        mobile=mobile.strip(),
                        add_by_id=session_id,
                        add_by_name=Username,
                        create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    )
            
            tbl_followup.objects.create(
                followupRemarks=status,
                remark=remark,
                next_followup_date=n_f_date,
                lead_id=new_lead.l_id,
                head_id=head_id,
                add_by_id=session_id,
                add_by_name=Username,
                company_id=request.session['company_id'],
                create_time=timezone.now() + timedelta(hours=5, minutes=30),
            ).save()
            
            company_id=request.session.get('company_id')
            company_name = get_object_or_404(master_company, com_id=company_id)
            
            # Send WhatsApp message
            try:
                if ph_no:
                    company_obj = get_object_or_404(master_company, com_id=company_id)
                    company_name = company_obj.com_name  # Adjust field if needed

                    response = send_whatsapp_message(
                        ph_no,
                        message_type='template',
                        template_name='add_lead_4',
                        template_params=[c_name.title(), company_name.title()]
                    )
                    messages.success(request, f"WhatsApp sent successfully. Response: {response}")
            except Exception as e:
                messages.error(request, f"Failed to send WhatsApp message: {e}")

            return JsonResponse({'status': 'success', 'message': f'Lead {c_name} added successfully!'})

        return render(request, "add-lead.html",{'session_roleid':session_roleid})
    else:
        return redirect(login)

def edit_lead(request, l_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        lead = get_object_or_404(tbl_lead, l_id=l_id)
        cites = master_city.objects.all()  
        areas = master_area.objects.all()  
        sources = master_leadtype.objects.all()
        busi_seg = tbl_bussi_seg.objects.all()
        inq_for = tbl_inqiry_for.objects.all() 
        statuses = master_status.objects.all()
        lead_clients = tbl_lead_client.objects.filter(l_id=lead.l_id)

        if request.method == 'POST':
            lead.business_name = request.POST.get('business_name')
            lead.c_name = request.POST.get('c_name')
            lead.email = request.POST.get('email')
            lead.mobile = request.POST.get('ph_no')
            lead.house_no = request.POST.get('house_no')
            lead.area = request.POST.get('add3')
            lead.address = request.POST.get('add2')
            lead.city = request.POST.get('city')
            lead.country = request.POST.get('country')
            lead.pincode = request.POST.get('pincode')
            lead.segment = request.POST.get('segment')
            lead.source = request.POST.get('source')
            lead.status = request.POST.get('status')
            lead.remark = request.POST.get('remark')
            lead.next_followup_date = request.POST.get('n_f_date')
            lead.inqu_for = request.POST.get('inqu_for')
            
            # lead.state = request.POST.get('state')
            
            # assign_to = request.POST.get('assign_to')
            # if not assign_to:
            #     assign_to = None
            # lead.assign_to = assign_to
            
            lead.save()
            
            business_name = request.POST.get('business_name')
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit lead - {business_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
            )
            
            # Remove existing clients
            tbl_lead_client.objects.filter(l_id=lead.l_id).delete()
            
            # Re-add clients
            client_names = request.POST.getlist('client_name[]')
            client_mobiles = request.POST.getlist('client_mobile[]')
            
            for name, mobile in zip(client_names, client_mobiles):
                if name.strip() and mobile.strip():
                    tbl_lead_client.objects.create(
                        l_id=lead.l_id,
                        name=name.strip(),
                        mobile=mobile.strip(),
                        add_by_id=request.session.get('session_id'),
                        add_by_name=request.session['session_user'],
                        create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    )


            return JsonResponse({
                    'status': 'success',
                    'message': f'Lead {business_name} has been successfully updated!'
                })

        return render(request, "add-lead.html", {'areas':areas,
        'cites':cites,
        'areas':areas,
        'statuses':statuses,
        'sources':sources,
        'busi_seg':busi_seg,
        'inq_for':inq_for,
        'lead': lead, 
        'is_edit':True,
        'lead_clients': lead_clients,
        'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def delete_lead(request, l_id):
    if 'session_id' in request.session:
        lead = get_object_or_404(tbl_lead, l_id=l_id)
        
        c_name = lead.c_name
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete lead - {c_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        lead.delete()
        return JsonResponse({'success': True, 'c_name': c_name})
    else:
        return redirect(login)
        
def delete_select_leads(request):
    if request.method == 'POST':
        # Get the list of leads to delete from the form
        leads_to_delete = request.POST.get('leads_to_delete')
        
        if leads_to_delete:
            # Parse the JSON string into a Python list
            leads_to_delete = json.loads(leads_to_delete)

            # Check if the leads_to_delete is a valid list
            if isinstance(leads_to_delete, list) and leads_to_delete:
                
                ip_address = get_client_ip(request)
                tbl_messages.objects.create(
                    message_name = request.session['session_user'],
                    change_status=f"Delete multiple lead.",
                    added_date = timezone.now() + timedelta(hours=5, minutes=30),
                    company_id = request.session['company_id'],
                    user_id = request.session['session_id'],
                    ip_address = ip_address,
                )
                
                # Delete the leads from the database
                tbl_lead.objects.filter(l_id__in=leads_to_delete).delete()

                # Redirect to lead list or show a success message
                return redirect('lead_list')  # Replace with your actual URL name
            else:
                # If the leads_to_delete is not valid, show an error or log it
                print("Invalid data for leads_to_delete:", leads_to_delete)
                return redirect('lead_list') 

    # Redirect if the request is not POST or if something went wrong
    return redirect('lead_list')
    
def assign_lead(request):
    if request.method == 'POST':
        # Get the data from the request
        data = json.loads(request.body)
        leads = data.get('leads')  # List of selected lead IDs
        user_id = data.get('user_id')  # Selected user ID
        
        # Validate that the leads and user_id are present
        if not leads or not user_id:
            return JsonResponse({'success': False, 'message': 'Invalid data'}, status=400)

        # Update the selected leads with the new assigned user
        tbl_lead.objects.filter(l_id__in=leads).update(assign_to=user_id)
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Assign multiple lead.",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )

        # Return success response
        return JsonResponse({'success': True})

    # Return failure if method is not POST
    return JsonResponse({'success': False}, status=400)
    
@csrf_exempt
def assign_leads(request):
    if request.method == 'POST':
        # Get the action (assign)
        action = request.POST.get('action')
        
        # Get the selected lead IDs from the form
        selected_leads = json.loads(request.POST.get('selected_leads', '[]'))
        
        # Check if action is "assign" and if leads were selected
        if action == 'assign' and selected_leads:
            assign_to = request.POST.get('assign_to')  # Get the user to assign to
            
            if not assign_to:
                return JsonResponse({'success': False, 'message': 'No assignee selected'}, status=400)
            
            # Update the 'assign_to' field for all selected leads
            updated_leads = tbl_lead.objects.filter(id__in=selected_leads)
            updated_leads.update(assign_to=assign_to)
            
            return JsonResponse({'success': True, 'message': f'{len(updated_leads)} leads have been successfully assigned to {assign_to}'})
        
        return JsonResponse({'success': False, 'message': 'No leads selected or invalid action'}, status=400)
    
    return redirect('lead_list')  # Or another relevant page
    
def lead_view(request, l_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        lead = get_object_or_404(tbl_lead, l_id=l_id)
        statuses = master_status.objects.all().exclude(status="Fresh")
        lost_reasons = master_inqclosereason.objects.all()
        followup = tbl_followup.objects.filter(lead_id=l_id)
        quotation = tbl_quatation_history.objects.filter(l_id=l_id)
        
        Meeting_count = tbl_followup.objects.filter(lead_id=l_id,followupRemarks="Meeting").count()
        Contacted_count = tbl_followup.objects.filter(lead_id=l_id,followupRemarks="Contacted").count()
        quotation_count = tbl_followup.objects.filter(lead_id=l_id,followupRemarks="Quotation").count()
        Contracted_count = tbl_followup.objects.filter(lead_id=l_id,followupRemarks="Contracted").count()
        
        assigned_user = tbl_users2.objects.filter(userId=lead.assign_to).first() 
        assigned_user_name = assigned_user.name if assigned_user else "None"
        
        return render(request, 'view-lead.html', {'Meeting_count':Meeting_count,'Contacted_count':Contacted_count,'quotation_count':quotation_count,'Contracted_count':Contracted_count,
        'lost_reasons':lost_reasons,'assigned_user_name': assigned_user_name,'quotation':quotation,'followup':followup,'lead': lead,'statuses':statuses,'session_roleid':session_roleid})
    else:
        return redirect(login)

def edit_lead_status(request, l_id):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        session_id = request.session.get('session_id')
        company_id = request.session['company_id']
        head_id = request.session['head_id']
        
        if request.method == 'POST':
            curr_data = get_object_or_404(tbl_lead, l_id=l_id) 
            Status = request.POST.get('status', curr_data.status)
            Remark = request.POST.get('remark', curr_data.remark)
            file_path = request.FILES.get('file')
            Date = request.POST.get('nf_date', '')
            M_Date = request.POST.get('mt_date', '')
            reason = request.POST.get('reason', curr_data.reason)
            
            # Parse the dates and ensure they're not null
            next_followup_date = parse_datetime(Date) if Date else (curr_data.next_followup_date if curr_data.next_followup_date else None)
            next_meeting_date = parse_datetime(M_Date) if M_Date else (curr_data.next_meeting_date if curr_data.next_meeting_date else None)
            
            # Prepare data for update
            update_data = {
                'status': Status,
                'remark': Remark,
                'reason': reason,
                'company_id': company_id,
                'next_followup_date': next_followup_date,
                'next_meeting_date': next_meeting_date,
            }
            
            if file_path:
                update_data['file_path'] = file_path
                
            tbl_lead.objects.filter(l_id=l_id).update(**update_data)
            
            if 'mt_date' in request.POST and next_meeting_date:
                tbl_meeting_history.objects.create(
                    name=curr_data.business_name,
                    mobile=curr_data.mobile,
                    remark=Remark,
                    meet_date=next_meeting_date,
                    add_by_name=Username,
                    add_by_id=session_id,
                ).save()
                
            if file_path:
                tbl_quatation_history.objects.create(
                    file_name=file_path,
                    l_id=l_id,
                ).save()
                
            tbl_followup.objects.create(
                followupRemarks=Status,
                remark=Remark,
                reason=reason,
                next_followup_date=next_followup_date,
                next_meeting_date=next_meeting_date,
                lead_id=l_id,
                head_id=head_id,
                add_by_id=session_id,
                add_by_name=Username,
                company_id=company_id,
                create_time=timezone.now() + timedelta(hours=5, minutes=30),
            ).save()
            
            if Status == "Contracted":
                data = get_object_or_404(tbl_lead, l_id=l_id)
                
                nnnnn = master_client.objects.create(
                    name=data.c_name,
                    comp_name=data.business_name,
                    mobile=data.mobile,
                    billing_add=data.address,
                    area=data.area,
                    city=data.city,
                    state=data.state,
                    country=data.country,
                    company_id=company_id,
                    add_by_id=data.user_id,
                    add_by_name=Username,
                )
                nnnnn.save()

                ph_no = str(curr_data.mobile).strip()
                company_obj = get_object_or_404(master_company, com_id=curr_data.company_id)
                company_name = company_obj.com_name.title()
                lead_name = curr_data.c_name.title()
                # meeting_date_str = next_meeting_date.strftime('%d-%m-%Y | %I:%M %p') if next_meeting_date else ''
    
                response = send_whatsapp_message(
                    ph_no,
                    message_type='template',
                    template_name='welcome3',
                    template_params=[company_name, lead_name]
                )

            if Status == "Meeting":
                ph_no = str(curr_data.mobile).strip()
                company_obj = get_object_or_404(master_company, com_id=curr_data.company_id)
                company_name = company_obj.com_name.title()
                lead_name = curr_data.c_name.title()
                meeting_date_str = next_meeting_date.strftime('%d-%m-%Y | %I:%M %p') if next_meeting_date else ''
    
                response = send_whatsapp_message(
                    ph_no,
                    message_type='template',
                    template_name='meeting_message_2',
                    template_params=[company_name, lead_name, meeting_date_str]
                )
            
            if Status == "Quotation":
                # ph_no = str(curr_data.mobile).strip()
                # company_obj = get_object_or_404(master_company, com_id=curr_data.company_id)
                # company_name = company_obj.com_name.title()
                # lead_name = curr_data.c_name.title()
            
                # media_link = str(curr_data.file_path).strip().lstrip('/')
                # # quotation_link = f"https://shubhamsingh.in/new_crm/media/upload/{media_link}"
            
                # response = send_whatsapp_message(
                #     ph_no,
                #     message_type='template',
                #     template_name='quatauion_message3',  # must match your registered WhatsApp template name
                #     template_params=[company_name, lead_name],
                #     button_url_params=[media_link]  # replaces placeholder in: https://domain.com/quotation/{{1}}
                # )
                ph_no = str(curr_data.mobile).strip()
                company_obj = get_object_or_404(master_company, com_id=curr_data.company_id)
                company_name = company_obj.com_name.title()
                lead_name = curr_data.c_name.title()
            
                # media_link = str(curr_data.file_path).strip().lstrip('/')
                # quotation_link = f"https://shubhamsingh.in/new_crm/media/upload/{media_link}"
                quatation_obj = tbl_quatation_history.objects.filter(l_id = l_id).order_by("-qu_id").first()
                media_link = str(quatation_obj.file_name).strip()
                quotation_link = f"https://shubhamsingh.in/new_crm/media/{media_link}"
                # media_link = "doccumnet"
                response = send_whatsapp_message(
                    ph_no, 
                    message_type='template',
                    template_name='quotauion_message_4',  # must match your registered WhatsApp template name
                    template_params=[company_name, lead_name, quotation_link]
                    # button_url_params=[media_link]  # replaces placeholder in: https://domain.com/quotation/{{1}}
                )
 
            # return JsonResponse({'status': 'success', 'message': f'Lead {curr_data.c_name} status change successfully!'}) 
            return redirect(lead_list)
    else:
        return redirect(login)
 
def add_dcr(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()  
        areas = master_area.objects.all()  
        sources = master_leadtype.objects.all()
        busi_seg = tbl_bussi_seg.objects.all()
        inq_for = tbl_inqiry_for.objects.all() 
        
        return render(request, "dcr-leasting.html", {
            'areas':areas,
            'sources':sources,
            'cites': cites,
            'busi_seg': busi_seg,
            'inq_for':inq_for,
            'session_roleid':session_roleid
        }) 
    else:
        return redirect(login)
        
def adddcr(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_id = request.session.get('session_id')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            company_id = request.session['company_id']
            head_id = request.session['head_id']
            
            c_name = request.POST['c_name']
            name = request.POST['name']
            email = request.POST['email']
            mobile = request.POST['mobile']
            house_no = request.POST['house_no']
            area = request.POST['area']
            address = request.POST['address']
            city = request.POST['city']
            country = request.POST['country']
            pincode = request.POST['pincode']
            # state = request.POST['state']
            segment = request.POST['segment']
            lead_type = request.POST['lead_type']
            stage_by = request.POST['stage_by']
            remark = request.POST['remark']
            next_followup_date = request.POST['next_followup_date']
            inqu_for = request.POST['inqu_for']
            # assign_to = request.POST['assign_to']
            
            # if not assign_to:
            #     assign_to = None
            
            client_names = request.POST.getlist('client_name[]')
            client_mobiles = request.POST.getlist('client_mobile[]')
                
            new_lead = tbl_dcr.objects.create(
                c_name = c_name,
                name = name,
                email = email,
                mobile = mobile,
                house_no = house_no,
                area = area,
                address = address,
                city = city,
                country = country,
                pincode = pincode,
                # state = state,
                segment = segment,
                lead_type = lead_type,
                stage_by = stage_by,
                remark = remark,
                next_followup_date = next_followup_date,
                inqu_for=inqu_for,
                # assign_to = assign_to,
                add_by_id = session_id,
                add_by_name = Username,
                create_time = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = company_id,
                user_id = userid,
                head_id = head_id,
            )
            
            for name, mobile in zip(client_names, client_mobiles):
                if name.strip() and mobile.strip():
                    tbl_dcr_client.objects.create(
                        l_id=new_lead.l_id,
                        name=name.strip(),
                        mobile=mobile.strip(),
                        add_by_id=session_id,
                        add_by_name=Username,
                        create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    )
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add DCR - {c_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'DCR {c_name} added successfully!'})
            
        return render(request, "dcr-leasting.html",{'session_roleid':session_roleid})
        
    else:
        return redirect(login)
        
def edit_dcr(request,l_id):
    if 'session_id' in request.session:
        dcr = get_object_or_404(tbl_dcr,l_id=l_id)
        
        cites = master_city.objects.all()  
        areas = master_area.objects.all()  
        sources = master_leadtype.objects.all()
        busi_seg = tbl_bussi_seg.objects.all()
        inq_for = tbl_inqiry_for.objects.all() 
        
        lead_clients = tbl_dcr_client.objects.filter(l_id=dcr.l_id) 
        
        if request.method == 'POST':
            dcr.c_name = request.POST['c_name']
            dcr.name = request.POST['name']
            dcr.email = request.POST['email']
            dcr.mobile = request.POST['mobile']
            dcr.house_no = request.POST['house_no']
            dcr.area = request.POST['area']
            dcr.address = request.POST['address']
            dcr.city = request.POST['city']
            dcr.country = request.POST['country']
            dcr.pincode = request.POST['pincode']
            # dcr.state = request.POST['state']
            dcr.segment = request.POST['segment']
            dcr.lead_type = request.POST['lead_type']
            dcr.stage_by = request.POST['stage_by']
            dcr.remark = request.POST['remark']
            dcr.next_followup_date = request.POST['next_followup_date']
            dcr.inqu_for = request.POST['inqu_for']
            
            # assign_to = request.POST.get('assign_to')
            # if not assign_to:
            #     assign_to = None
            # dcr.assign_to = assign_to
            
            dcr.save() 
            
            tbl_dcr_client.objects.filter(l_id=dcr.l_id).delete()
            
            # Re-add clients
            client_names = request.POST.getlist('client_name[]')
            client_mobiles = request.POST.getlist('client_mobile[]')
            
            for name, mobile in zip(client_names, client_mobiles):
                if name.strip() and mobile.strip():
                    tbl_dcr_client.objects.create(
                        l_id=dcr.l_id,
                        name=name.strip(),
                        mobile=mobile.strip(),
                        add_by_id=request.session.get('session_id'),
                        add_by_name=request.session['session_user'],
                        create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    )
            
            c_name = request.POST['c_name']
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit DCR - {c_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            return JsonResponse({
                    'status': 'success',
                    'message': f'DCR {c_name} has been successfully updated!'
                })
            
        return render(request, "dcr-leasting.html", {
            'cites':cites,
            'areas':areas,
            'sources':sources,
            'busi_seg':busi_seg,
            'inq_for':inq_for,
            'lead_clients':lead_clients,
            'lead': dcr,
            'session_roleid': request.session.get('session_roleid'),
            'company_id': request.session['company_id'],
            'is_edit': True,
        })
    else:
        return redirect(login)
        
def delete_dcr(request, l_id):
    if 'session_id' in request.session:
        dcr = get_object_or_404(tbl_dcr, l_id=l_id)
        
        c_name = dcr.c_name
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete DCR - {c_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        dcr.delete()

        return JsonResponse({'success': True, 'c_name': c_name})
    else:
        return redirect(login)
        
def convert_lead(request, l_id):
    if 'session_id' not in request.session:
        return redirect(login)  # Assuming `login` is a view or URL name
    
    dcr = get_object_or_404(tbl_dcr, l_id=l_id)

    # Create new lead from DCR data
    new_lead = tbl_lead.objects.create(
        business_name=dcr.c_name,
        c_name=dcr.name,
        email=dcr.email,
        mobile=dcr.mobile,
        house_no=dcr.house_no,
        area=dcr.area,
        address=dcr.address,
        city=dcr.city,
        country=dcr.country,
        pincode=dcr.pincode,
        # state=dcr.state,
        segment=dcr.segment,
        source=dcr.lead_type,
        stage_by=dcr.stage_by,
        remark=dcr.remark,
        next_followup_date=dcr.next_followup_date,
        inqu_for=dcr.inqu_for,
        add_by_id=dcr.add_by_id,
        add_by_name=dcr.add_by_name,
        create_time=timezone.now() + timedelta(hours=5, minutes=30),
        company_id=dcr.company_id,
        head_id=dcr.head_id,
    )
    
    dcr_clients = tbl_dcr_client.objects.filter(l_id=dcr.l_id)
    for client in dcr_clients:
        tbl_lead_client.objects.create(
            l_id=new_lead.l_id,
            name=client.name,
            mobile=client.mobile,
            add_by_id=client.add_by_id,
            add_by_name=client.add_by_name,
            create_time=timezone.now() + timedelta(hours=5, minutes=30),
        )

    # Log follow-up for the new lead
    tbl_followup.objects.create(
        followupRemarks="Fresh",
        remark=dcr.remark,
        next_followup_date=dcr.next_followup_date,
        lead_id=new_lead.l_id,
        head_id=dcr.head_id,
        add_by_id=dcr.add_by_id,
        add_by_name=dcr.add_by_name,
        company_id=dcr.company_id,
        create_time=timezone.now() + timedelta(hours=5, minutes=30),
    )

    # Log message about the conversion 
    ip_address = get_client_ip(request)
    tbl_messages.objects.create(
        message_name=request.session.get('session_user'),
        change_status=f"Convert to lead - {dcr.name}",
        added_date=timezone.now() + timedelta(hours=5, minutes=30),
        company_id=request.session.get('company_id'),
        user_id = request.session['session_id'],
        ip_address = ip_address,
    )

    # Delete original DCR entry
    dcr_clients.delete()
    dcr.delete()

    return redirect(f"{reverse('lead_list')}?success4=1")

@csrf_exempt
def convert_lead_bulk(request):
    if request.method == "POST" and 'session_id' in request.session:
        data = json.loads(request.body)
        l_ids = data.get('ids', [])

        if not l_ids:
            return JsonResponse({"success": False, "message": "No IDs provided."})

        dcr_objects = tbl_dcr.objects.filter(l_id__in=l_ids)
        for dcr in dcr_objects:
            new_lead = tbl_lead.objects.create(
                business_name = dcr.c_name,
                c_name = dcr.name,
                email = dcr.email,
                mobile = dcr.mobile,
                house_no = dcr.house_no,
                address = dcr.address,
                area = dcr.area,
                city = dcr.city,
                pincode = dcr.pincode,
                state = dcr.state,
                country = dcr.country,
                segment = dcr.segment,
                remark = dcr.remark,
                source = dcr.lead_type,
                next_followup_date = dcr.next_followup_date,
                stage_by = dcr.stage_by,
                add_by_id=dcr.add_by_id,
                add_by_name=dcr.add_by_name,
                create_time=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=dcr.company_id,
                head_id=dcr.head_id,
            )
            
            dcr_clients = tbl_dcr_client.objects.filter(l_id=dcr.l_id)
            for client in dcr_clients:
                tbl_lead_client.objects.create(
                    l_id=new_lead.l_id,
                    name=client.name,
                    mobile=client.mobile,
                    add_by_id=client.add_by_id,
                    add_by_name=client.add_by_name,
                    create_time=timezone.now() + timedelta(hours=5, minutes=30),
                )
            
            tbl_followup.objects.create(
                followupRemarks="Fresh",
                remark=dcr.remark,
                next_followup_date=dcr.next_followup_date,
                lead_id=new_lead.l_id,
                head_id=dcr.head_id,
                add_by_id=dcr.add_by_id,
                add_by_name=dcr.add_by_name,
                company_id=dcr.company_id,
                create_time=timezone.now() + timedelta(hours=5, minutes=30),
            )
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Convert bulk lead.",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

            dcr_clients.delete()
            dcr.delete()

        return JsonResponse({"success": True})

    return JsonResponse({"success": False, "message": "Unauthorized request."}) 
        
def dcr_list(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        company_id = request.session['company_id'] 
        cites = master_city.objects.all()  
        products = master_product.objects.all()
        sources = master_leadtype.objects.all() 
        areas = master_area.objects.all()  
        busi_seg = tbl_bussi_seg.objects.all()
        inq_for = tbl_inqiry_for.objects.all() 
        
        if session_roleid == '1':
            assign_name = tbl_users2.objects.filter(Q(role_id__contains='6') | Q(role_id__contains='7') | Q(role_id__contains='8'))
        else:
            assign_name = tbl_users2.objects.filter(Q(head_id=session_id) & Q(role_id__contains='6') | Q(role_id__contains='7') | Q(role_id__contains='8'))
            
        cnx = mysql.connector.connect(user='root', password='', host='localhost', database='shubhamsingh_sit_crm')
        # cnx = mysql.connector.connect(user='shubhamsingh_sit_crm', password='kish@1102', host='localhost', database='shubhamsingh_sit_crm')
        cursor = cnx.cursor(dictionary=True)

        # data = []
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_dcr.objects.filter(company_id=selected_company_id).order_by('-create_time')
                else:
                    data = tbl_dcr.objects.all().order_by('-create_time') 
                
                # if company_id == 0:
                    # data = tbl_dcr.objects.all().order_by('-create_time')
                # else:
                #     data = tbl_dcr.objects.filter(company_id=company_id).order_by('-create_time')
            elif set(session_roleid).intersection({"6"}): 
                data = tbl_dcr.objects.filter(
                    Q(head_id=session_id) | Q(user_id=session_id), company_id=company_id
                ).order_by('-create_time')
            else:
                data = tbl_dcr.objects.filter(user_id=session_id).order_by('-create_time')
            
            # if session_roleid == "1":
            #     if company_id == 0:
            #         query_today = """
            #             SELECT * FROM tbl_dcr
            #             WHERE DATE(create_time) = %s
            #         """
            #         cursor.execute(query_today, (today_date,))
            #         data = cursor.fetchall()
            #     else:
            #         query_today = """
            #             SELECT * FROM tbl_dcr
            #             WHERE DATE(create_time) = %s AND company_id = %s
            #         """
            #         cursor.execute(query_today, (today_date, company_id))
            #         data = cursor.fetchall()  # Don't forget to fetch data!

            # elif session_roleid == "6":
            #     query_today = """
            #         SELECT * FROM tbl_dcr
            #         WHERE DATE(create_time) = %s AND (head_id = %s OR user_id = %s)
            #     """
            #     cursor.execute(query_today, (today_date, session_id, session_id))
            #     data = cursor.fetchall()  # Fetch data here as well

            # else:
            #     query_today = """
            #         SELECT * FROM tbl_dcr
            #         WHERE DATE(create_time) = %s AND user_id = %s AND company_id = %s
            #     """
            #     cursor.execute(query_today, (today_date, session_id, company_id))
            #     data = cursor.fetchall()  # Fetch data here as well
            
            date_range_filter = request.GET.get('date_range')
            c_name = request.GET.get('c_name')
            name = request.GET.get('name')
            email = request.GET.get('email')
            mobile = request.GET.get('mobile')
            house_no = request.GET.get('house_no')
            area = request.GET.get('area')
            address = request.GET.get('address')
            city = request.GET.get('city')
            country = request.GET.get('country')
            pincode = request.GET.get('pincode')
            segment = request.GET.get('segment')
            lead_type = request.GET.get('lead_type')
            remark = request.GET.get('remark')
            next_followup_date = request.GET.get('next_followup_date')
            inqu_for = request.GET.get('inqu_for')
            
            if date_range_filter:
                try:
                    start_str, end_str = date_range_filter.split(' - ')
                    start_date = parser.parse(start_str.strip())
                    end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                    data = data.filter(create_time__gte=start_date, create_time__lte=end_date)
                except Exception as e:
                    print(f"Date parsing error: {e}")
             
            if c_name:
                data = data.filter(c_name__icontains=c_name)
            if name:
                data = data.filter(name__icontains=name)
            if email:
                data = data.filter(email__icontains=email)
            if mobile:
                data = data.filter(mobile__icontains=mobile)
            if house_no:
                data = data.filter(house_no__icontains=house_no)
            if area:
                data = data.filter(area__icontains=area)
            if address:
                data = data.filter(address__icontains=address)
            if city:
                data = data.filter(city__icontains=city)
            if country:
                data = data.filter(country__icontains=country)
            if pincode:
                data = data.filter(pincode__icontains=pincode)
            if segment:
                data = data.filter(segment__icontains=segment)
            if lead_type:
                data = data.filter(lead_type__icontains=lead_type)
            if remark:
                data = data.filter(remark__icontains=remark)
            if next_followup_date:
                data = data.filter(next_followup_date__icontains=next_followup_date)
            if inqu_for:
                data = data.filter(inqu_for__icontains=inqu_for)
                
            # from_date = request.GET.get('fromDate')
            # to_date = request.GET.get('toDate')
            # c_name = request.GET.get('c_name')
            # name = request.GET.get('name')
            # email = request.GET.get('email')
            # mobile = request.GET.get('mobile')
            # house_no = request.GET.get('house_no')
            # address = request.GET.get('address')
            # area = request.GET.get('area')
            # city = request.GET.get('city')
            # pincode = request.GET.get('pincode')
            # state = request.GET.get('state')
            # country = request.GET.get('country')
            # segment = request.GET.get('segment')
            # remark = request.GET.get('remark')
            # lead_type = request.GET.get('lead_type')
            # next_followup_date = request.GET.get('next_followup_date')
            # stage_by = request.GET.get('stage_by')
            # assign_to = request.GET.get('assign_to')
            
            # query = Q()
            
            # if from_date or to_date:
            #     try:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(create_time__range=[from_date, to_date])
                    
            #     except ValueError:
            #         pass
                
            # if c_name:
            #     query |= Q(c_name__icontains=c_name)
            # if name:
            #     query |= Q(name__icontains=name)
            # if email:
            #     query |= Q(email__icontains=email)
            # if mobile:
            #     query |= Q(mobile__icontains=mobile)
            # if house_no:
            #     query |= Q(house_no__icontains=house_no)
            # if address:
            #     query |= Q(address__icontains=address)
            # if area:
            #     query |= Q(area__icontains=area)
            # if city:
            #     query |= Q(city__icontains=city)
            # if pincode:
            #     query |= Q(pincode__icontains=pincode)
            # if state:
            #     query |= Q(state__icontains=state)
            # if country:
            #     query |= Q(country__icontains=country)
            # if segment:
            #     query |= Q(segment__icontains=segment)
            # if remark:
            #     query |= Q(remark__icontains=remark)
            # if lead_type:
            #     query |= Q(lead_type__icontains=lead_type)
            # if next_followup_date:
            #     query |= Q(next_followup_date__icontains=next_followup_date)
            # if stage_by:
            #     query |= Q(stage_by__icontains=stage_by)
            # if assign_to:
            #     query |= Q(assign_to__icontains=assign_to)
            
            # data = data.filter(query)
            data = data.order_by('-l_id')
            
            if request.GET.get('download') == 'excel':
                wb = openpyxl.Workbook()
                ws = wb.active
                ws.title = "DCR"

                headers = [
                    "DCR ID", "Company Name", "Client Name", "Email", "Mobile Number", "Office No. & Building name", "Area", "Address", "City",
                    "Pincode", "Country", "Business Segment", "Inquiry For", "Source of Lead", "Remark", "Follow-up Date","Create Time"
                ]
                ws.append(headers)

                for lead in data:
                    row = [
                        lead.l_id,
                        lead.c_name,
                        lead.name,
                        lead.email,
                        lead.mobile,
                        lead.house_no,
                        lead.area,
                        lead.address,
                        lead.city,
                        lead.pincode,
                        lead.country,
                        lead.segment,
                        lead.inqu_for,
                        lead.lead_type,
                        lead.remark, 
                        lead.next_followup_date.strftime("%Y-%m-%d %H:%M") if lead.next_followup_date else '',
                        lead.create_time.strftime("%Y-%m-%d %H:%M") if lead.create_time else '',
                    ]
                    ws.append(row)

                # Autofit column widths
                for col in ws.columns:
                    max_length = 0
                    col_letter = get_column_letter(col[0].column)
                    for cell in col:
                        try:
                            if cell.value:
                                max_length = max(max_length, len(str(cell.value)))
                        except:
                            pass
                    ws.column_dimensions[col_letter].width = max_length + 2

                response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                response["Content-Disposition"] = "attachment; filename=dcrs_filtered.xlsx"
                wb.save(response)
                return response
        
        return render(request,"view-leasting.html",{
            'assign_name':assign_name,
            'cites':cites,
            'products':products,
            'sources':sources,
            'areas':areas,
            'busi_seg':busi_seg,
            'inq_for':inq_for,
            'data':data,
            'session_roleid':session_roleid
        })
    else:
        return redirect(login)
        
def dcr_excel(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        if request.method == 'POST':
            from_date = request.POST.get('from_date')
            to_date = request.POST.get('to_date')
    
            if from_date or to_date:
                try:
                    if from_date:
                        from_date = datetime.strptime(from_date, '%Y-%m-%d')
                    else:
                        from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
                    if to_date:
                        to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                    else:
                        to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
                        
                except ValueError:
                    pass
            else:
                return HttpResponse("Please select a date.", status=404)

            dcr_entries = tbl_dcr.objects.filter(
                create_time__range=[from_date, to_date]
            )
    
            if dcr_entries.count() == 0:
                return HttpResponse("No records found for the given date range.", status=404) 
    
            wb = Workbook()
            ws = wb.active
            ws.title = "DCR Entries"
    
            headers = ["ID", "Company Name", "Name", "Email", "Mobile", "House No", "Address", "Area", "City",
                       "Pincode", "State", "Country", "Segment", "Remark", "Lead Type", "Next Follow-up Date",
                       "Assigned To", "Stage By", "Added By", "Create Time", "Company ID",]
            ws.append(headers)
            
            users_dict = {user.userId: user.name for user in tbl_users2.objects.all()}
    
            for entry in dcr_entries:
                # next_meeting_date = entry.next_meeting_date.strftime('%d/%m/%Y') if entry.next_meeting_date else 'N/A'
                next_followup_date = entry.next_followup_date.strftime('%d/%m/%Y') if entry.next_followup_date else 'N/A'
                create_time = entry.create_time.strftime('%d/%m/%Y') if entry.create_time else 'N/A'
            
                # file_path = entry.file_path.url if entry.file_path else 'No file'
                assigned_to_name = users_dict.get(entry.assign_to, 'N/A') 
                
                ws.append([
                    entry.l_id,
                    entry.c_name,
                    entry.name,
                    entry.email,
                    entry.mobile,
                    entry.house_no,
                    entry.address,
                    entry.area,
                    entry.city,
                    entry.pincode,
                    entry.state,
                    entry.country,
                    entry.segment,
                    entry.remark,
                    entry.lead_type,
                    # next_meeting_date,
                    next_followup_date,
                    assigned_to_name,
                    entry.stage_by,
                    entry.add_by_name,
                    create_time,
                    # entry.status,
                    entry.company_id,
                    # entry.user_id,
                    # entry.wp_no,
                    # entry.service,
                    # file_path,
                    # entry.reason,
                    # entry.dp_id,
                    # entry.head_id,
                ])
    
            response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            response['Content-Disposition'] = 'attachment; filename="DCR-Report.xlsx"'
            wb.save(response)
    
            return response
        return render(request, "view-leasting.html", {'session_roleid': session_roleid})
    else:
        return redirect('login')
        
def open_dcr_view(request,l_id): 
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        leave = get_object_or_404(tbl_dcr,l_id=l_id)
        
        assigned_user = tbl_users2.objects.filter(userId=leave.assign_to).first()
        assigned_user_name = assigned_user.name if assigned_user else "None"
        return render(request, 'view-dcr.html', { 'assigned_user_name': assigned_user_name,'leave': leave,'session_roleid':session_roleid})
    else:
        return redirect(login)
 
def open_report_least_page(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        return render(request,"report-leasting.html",{'session_roleid':session_roleid})
    else:
        return redirect(login)

 
def open_ledger_least_page(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        return render(request,"ledger-leasting.html",{'session_roleid':session_roleid})
    else:
        return redirect(login)
    
def open_add_client_page(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()  
        companies = master_company.objects.all()
        data = master_client.objects.all()
           
        return render(request, "add_client.html", {'data':data,'cites': cites,'companies': companies, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) 
    else:
        return redirect(login)
 
def add_client_page(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        
        if request.method == 'POST':

            userid = request.session['session_id']
            company_id = request.session['company_id']

            company_name = request.POST['company_name']
            name = request.POST['name']
            mobile_number = request.POST['mobile_number']
            gst_no = request.POST['gst_no']
            bill_add = request.POST['bill_add']
            ope_balance = request.POST['ope_balance']
           
            log_user_activity(
                ope='Add client',
                comment='Added a client.',
                lanti=None,  
                longti=None,  
                by_user_id=userid,
                by_user_name=Username,
                status='online'
            )
            
            new_lead = master_client1.objects.create(
                company_name=company_name,
                name=name,
                mobile_number=mobile_number,
                gst_no=gst_no,
                bill_add=bill_add,
                ope_balance=ope_balance,
            )
            return redirect(open_client_vendor_least_page)
            
        return render(request, "add_client.html",{'session_roleid':session_roleid})
    else:
        return redirect(login)  

def open_edit_client(request, cId): 
    if 'session_id' in request.session:
        client = get_object_or_404(master_client1, cId=cId)
        
        if request.method == 'POST':
            # Update client fields from POST data
            client.company_name = request.POST['company_name']
            client.name = request.POST['name']
            client.mobile_number = request.POST['mobile_number']
            client.gst_no = request.POST['gst_no']
            client.bill_add = request.POST['bill_add']
            client.ope_balance = request.POST['ope_balance']
            client.save() 
            
            return redirect(open_client_vendor_least_page) 
            
        return render(request, "add_client.html", {
            'client': client,
            'session_roleid': request.session.get('session_roleid'),
            'company_id': request.session['company_id'],
            'is_edit': True,
        })
    else:
        return redirect(login)
        
def open_delete_client(request, cId):
    if 'session_id' in request.session:
        client = get_object_or_404(master_client1, cId=cId)
        client.delete()

        return redirect(open_client_vendor_least_page)
    else:
        return redirect(login)
        
def open_client_vendor_least_page(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        client = master_client1.objects.all()
        return render(request,"client-vendor-leasting.html",{'client':client,'session_roleid':session_roleid})
    else:
        return redirect(login)
    
def open_employee_other_least_page(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        client = tbl_employee.objects.all()
        return render(request,"employee-other-leasting.html",{'client':client,'session_roleid':session_roleid})
    else:
        return redirect(login)

def client_excel(request):
    if request.method == 'POST':
        from_date = request.POST.get('from_date')
        to_date = request.POST.get('to_date')
        client_id = request.POST.get('client')
        voucher = request.POST.get('voucher')

        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                client_entries = master_client.objects.filter(
                    create_time__range=[from_date, to_date]
                )
                    
            except ValueError: 
                pass

        elif client_id:
            client_entries = master_client.objects.filter(clt_id=client_id)
            
        else:
            return HttpResponse("Please select a Date or a Client.", status=404)

        if client_entries.count() == 0:
            return HttpResponse("No records found for the given date range.", status=404)

        wb = Workbook()
        ws = wb.active
        ws.title = "Client Entries"

        headers = ["ID",
                    "Company Name",
                    "Name",
                    "Mobile",
                    "Email",
                    "Address",
                    "Area",
                    "City",
                    "State",
                    "Country",
                    "Billing add",
                    "GST Number",
                    "PAN Card",
                    "Company"
                    ]
      
        ws.append(headers)
        
        for entry in client_entries:
        
            ws.append([
                entry.clt_id,
                entry.comp_name,
                entry.name,
                entry.mobile,
                entry.email,
                entry.address,
                entry.area,
                entry.city,
                entry.state,
                entry.country,
                entry.billing_add,
                entry.gst_number,
                entry.pan_card,
                entry.company_id
            ])

        if voucher == "pv" or voucher ==  "all":
            
            ws.append([])
            ws.append(["Payment Table"]) 
            
            payment_entries = tbl_payment_v.objects.filter(clt_id=client_id)
    
            headers_2 = [ "ID",
                        "Voucher Number",
                        "Total Amount"
                        ]
                        
            ws.append(headers_2)

            for entry in payment_entries:

                ws.append([
                    entry.pv_id,
                    entry.vouch_num,
                    entry.total_amount
                ])

        if voucher == "rv" or voucher == "all":
            
            ws.append([])
            ws.append(["Recipt table"]) 
            
            recive_entries = tbl_receive_v.objects.filter(clt_id=client_id)
    
            headers_3 = [ "ID",
                        "Voucher Number",
                        "Total Amount"
                        ]
                        
            ws.append(headers_3)

            for entry in recive_entries:

                ws.append([
                    entry.rv_id,
                    entry.vouch_num,
                    entry.total_amount
                ])

        if voucher == "in" or voucher == "all":
            
            ws.append([]) 
            ws.append(["Invoice Table"])
            invoice_entries = tbl_invoice.objects.filter(clt_id=client_id)
    
            headers_4 = [ "ID",
                        "Invoice Number",
                        "Product Name",
                        "Total Amount",
                        "Grand Total Amount"
                        ]
                        
            ws.append(headers_4)
            
            for entry in invoice_entries:

                ws.append([
                    entry.inv_id,
                    entry.invNumber,
                    entry.productName,
                    entry.totalAmount,
                    entry.grandAmount
                ])

        response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        response['Content-Disposition'] = 'attachment; filename="client-Report.xlsx"'
        wb.save(response)

        return response

def account_dashboard(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid') 
        session_id = request.session.get('session_id')
        today_date = date.today()
        
        today_payment_voucher = Decimal('0.00')
        this_month_payment_voucher = Decimal('0.00')
        total_payment_voucher = Decimal('0.00')
        
        pay_obj = tbl_payment_v.objects.all()
        for p in pay_obj:
            try:
                amount = Decimal(p.total or '0.00')
            except:
                amount = Decimal('0.00')
            
            if p.payment_date and p.payment_date.month == today_date.month and p.payment_date.year == today_date.year:
                this_month_payment_voucher += amount

            if p.payment_date and p.payment_date.date() == today_date:
                today_payment_voucher += amount
            
            total_payment_voucher += amount
        
        today_reciept_voucher = Decimal('0.00')
        this_month_reciept_voucher = Decimal('0.00')
        total_reciept_voucher = Decimal('0.00')
        
        rec_obj = tbl_receive_v.objects.all()
        for r in rec_obj:
            try:
                r_amount = Decimal(r.total or '0.00')
            except:
                r_amount = Decimal('0.00')
            
            if r.payment_date and r.payment_date.month == today_date.month and r.payment_date.year == today_date.year:
                this_month_reciept_voucher += r_amount

            if r.payment_date and r.payment_date.date() == today_date:
                today_reciept_voucher += r_amount
            
            total_reciept_voucher += r_amount
        
        today_invoice = Decimal('0.00')
        this_month_invoice = Decimal('0.00')
        total_invoice = Decimal('0.00')
        
        inv_obj = tbl_invoice.objects.all()
        for i in inv_obj:
            try:
                i_amount = Decimal(i.totalAmount or '0.00')
            except:
                i_amount = Decimal('0.00')
            
            if i.date and i.date.month == today_date.month and i.date.year == today_date.year:
                this_month_invoice += i_amount

            if i.date and i.date.date() == today_date:
                today_invoice += i_amount
            
            total_invoice += i_amount

        total_clients = master_client.objects.all().count()

        return render(request, "account_dashboard.html", {
            'session_roleid': session_roleid,
            'today_reciept_voucher':today_reciept_voucher,
            'this_month_reciept_voucher':this_month_reciept_voucher,
            'total_reciept_voucher':total_reciept_voucher,
            'this_month_payment_voucher': this_month_payment_voucher,
            'today_payment_voucher': today_payment_voucher,
            'total_payment_voucher': total_payment_voucher,
            'today_invoice': today_invoice,
            'this_month_invoice': this_month_invoice,
            'total_invoice': total_invoice,
            'total_clients': total_clients,
        })
    else:
        return redirect('login')
 
def account_client(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid') 
        session_id = request.session.get('session_id')
        cites = master_city.objects.all()
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = master_client.objects.filter(company_id=selected_company_id)
                else:
                    data = master_client.objects.all()
            else:
                data = master_client.objects.all()
        
            date_range_filter = request.GET.get('date_range')
            transaction_type = request.GET.get('transaction_type')
            comp_name = request.GET.get('comp_name')
            name = request.GET.get('name')
            mobile = request.GET.get('mobile')
            email = request.GET.get('email')
            address = request.GET.get('address')
            area = request.GET.get('area')
            city = request.GET.get('city')
            state = request.GET.get('state')
            country = request.GET.get('country')
            billing_add = request.GET.get('billing_add')
            shipping_add = request.GET.get('shipping_add')
            gst_number = request.GET.get('gst_number')
            pan_card = request.GET.get('pan_card')
            
            if date_range_filter:
                try:
                    start_str, end_str = date_range_filter.split(' - ')
                    start_date = parser.parse(start_str.strip())
                    end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                    data = data.filter(create_time__gte=start_date, create_time__lte=end_date)
                except Exception as e:
                    print(f"Date parsing error: {e}")
                
            if transaction_type:
                data = data.filter(transaction_type__icontains=transaction_type)
            if comp_name:
                data = data.filter(comp_name__icontains=comp_name)
            if name:
                data = data.filter(name__icontains=name)
            if mobile:
                data = data.filter(mobile__icontains=mobile)
            if email:
                data = data.filter(email__icontains=email)
            if address:
                data = data.filter(address__icontains=address)
            if area:
                data = data.filter(area__icontains=area)
            if city:
                data = data.filter(city__icontains=city)
            if state:
                data = data.filter(state__icontains=state)
            if country:
                data = data.filter(country__icontains=country)
            if billing_add:
                data = data.filter(billing_add__icontains=billing_add)
            if shipping_add:
                data = data.filter(shipping_add__icontains=shipping_add)
            if gst_number:
                data = data.filter(gst_number__icontains=gst_number)
            if pan_card:
                data = data.filter(pan_card__icontains=pan_card)

            # query = Q()
                
            # if from_date or to_date:
            #     try:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(create_time__range=[from_date, to_date])
                    
            #     except ValueError:
            #         pass
                
            # if comp_name:
            #     query |= Q(comp_name__icontains=comp_name)
            # if name:
            #     query |= Q(name__icontains=name)
            # if mobile:
            #     query |= Q(mobile__icontains=mobile)
            # if email:
            #     query |= Q(email__icontains=email)
            # if address:
            #     query |= Q(address__icontains=address)
            # if area:
            #     query |= Q(area__icontains=area)
            # if city:
            #     query |= Q(city__icontains=city)
            # if state:
            #     query |= Q(state__icontains=state)
            # if country:
            #     query |= Q(country__icontains=country)
            # if billing_add:
            #     query |= Q(billing_add__icontains=billing_add)
            # if gst_number:
            #     query |= Q(gst_number__icontains=gst_number)
            # if pan_card:
            #     query |= Q(pan_card__icontains=pan_card)
                
            # data = data.filter(query)
            data = data.order_by('-clt_id')
            
            if request.GET.get('download') == 'excel':
                wb = openpyxl.Workbook()
                ws = wb.active
                ws.title = "Ledgers"

                headers = [
                    "Client ID", "Ledger Type", "Company Name", "Name", "Mobile Number", "Email", "Address", "Area", "City", "State",
                    "Country", "Billing Address", "Shipping Address", "GST number", "PanCard number", "Create Time"
                ]
                ws.append(headers) 

                for lead in data:
                    row = [
                        lead.clt_id,
                        lead.transaction_type,
                        lead.comp_name,
                        lead.name,
                        lead.mobile,
                        lead.email,
                        lead.address,
                        lead.area,
                        lead.city,
                        lead.state,
                        lead.country,
                        lead.billing_add,
                        lead.shipping_add,
                        lead.gst_number,
                        lead.pan_card,
                        lead.create_time.strftime("%Y-%m-%d %H:%M") if lead.create_time else '',
                    ]
                    ws.append(row)

                # Autofit column widths
                for col in ws.columns:
                    max_length = 0
                    col_letter = get_column_letter(col[0].column)
                    for cell in col:
                        try:
                            if cell.value:
                                max_length = max(max_length, len(str(cell.value)))
                        except:
                            pass
                    ws.column_dimensions[col_letter].width = max_length + 2

                response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                response["Content-Disposition"] = "attachment; filename=Ledger_filtered.xlsx"
                wb.save(response)
                return response
        
        return render(request,"account-client.html",{'cites':cites,'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def account_add_client(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        cites = master_city.objects.all()
        companies = master_company.objects.all()
        emp_data = tbl_employee.objects.all()
        selected_company_id = request.session.get('selected_company_id')
        
        if request.method == 'POST':
            if not selected_company_id or int(selected_company_id) == 0:
                return JsonResponse({'status': 'error', 'message': 'Please select a company first!'})
            
            transaction_type = request.POST.get('transaction_type')
            user_id = request.POST.get('user_id')
            comp_name = request.POST.get('comp_name')
            name = request.POST.get('name')
            mobile = request.POST.get('mobile')
            email = request.POST.get('email')
            address = request.POST.get('address')
            area = request.POST.get('area')
            city = request.POST.get('city')
            state = request.POST.get('state')
            country = request.POST.get('country')
            billing_add = request.POST.get('billing_add')
            shipping_add = request.POST.get('shipping_add')
            same_as_billing = request.POST.get('same_as_billing')
            pan_card = request.POST.get('pan_card')
            gst_number = request.POST.get('gst_number')
            # company_id = request.POST.get('company_id')
            
            if transaction_type == 'Salary Account':
                if not user_id:
                    return JsonResponse({'status': 'error', 'message': 'Employee name is required for Salary Account!'})
        
                try:
                    # Try converting user_id to an integer
                    user_id = int(user_id)
                except ValueError:
                    # If conversion fails, return an error message
                    return JsonResponse({'status': 'error', 'message': 'Invalid user ID!'})
                
                # Fetch user data if conversion is successful
                user = tbl_users2.objects.filter(userId=user_id).first()
                if not user:
                    return JsonResponse({'status': 'error', 'message': 'User not found!'})
        
                user_name = user.name  # Start with the first name

                if user.middle_name:  # If middle_name exists, add it
                    user_name += f" {user.middle_name}"
                
                if user.last_name:  # If last_name exists, add it
                    user_name += f" {user.last_name}"
                    
                mobile = user.mobile
                email = user.email
                new_client = master_client(
                    transaction_type=transaction_type,
                    comp_name=user_name,
                    name=user_name,
                    mobile=mobile,
                    email=email,
                    user_id=user_id,
                    create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    add_by_id=session_id,
                    add_by_name=Username,
                    company_id=selected_company_id,
                    client_type='Account',
                )
                new_client.save()

                # Log the action in the tbl_messages
                ip_address = get_client_ip(request)
                tbl_messages.objects.create(
                    message_name=Username,
                    change_status=f"Add ledger - {comp_name}",
                    added_date=timezone.now() + timedelta(hours=5, minutes=30),
                    company_id=selected_company_id,
                    user_id=session_id,
                    ip_address=ip_address,
                )

                return JsonResponse({'status': 'success', 'message': f'ledger {comp_name} added successfully!'})
            
            else:
            
                new_client = master_client(
                    transaction_type=transaction_type,
                    comp_name=comp_name,
                    name=name,
                    mobile=mobile,
                    email=email,
                    address=address,
                    area=area,
                    city=city,
                    state=state,
                    country=country,
                    billing_add=billing_add,
                    shipping_add=shipping_add,
                    same_as_billing=same_as_billing,
                    pan_card=pan_card,
                    gst_number=gst_number,
                    company_id=selected_company_id,
                    client_type='Account',
                    create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    add_by_id=session_id,
                    add_by_name=Username,
                )
                
                ip_address = get_client_ip(request)
                tbl_messages.objects.create(
                    message_name = request.session['session_user'],
                    change_status=f"Add ledger - {comp_name}",
                    added_date = timezone.now() + timedelta(hours=5, minutes=30),
                    company_id = request.session['company_id'],
                    user_id = request.session['session_id'],
                    ip_address = ip_address,
                )
                
                new_client.save()
    
                return JsonResponse({'status': 'success', 'message': f'ledger {comp_name} added successfully!'})
            
        return render(request,"account-add-client.html",{'emp_data':emp_data,'cites':cites,'companies':companies,'session_roleid':session_roleid})
    else:
        return redirect(login)
               
def account_edit_client(request, clt_id):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        client = get_object_or_404(master_client, clt_id=clt_id)
        cites = master_city.objects.all()
        emp_data = tbl_employee.objects.all()
        companies = master_company.objects.all()

        if request.method == 'POST':
            transaction_type = request.POST.get('transaction_type')

            # If it's a Salary Account, we need to handle user ID differently
            if transaction_type == 'Salary Account':
                user_id = request.POST.get('user_id')

                if not user_id:
                    return JsonResponse({'status': 'error', 'message': 'Employee name is required for Salary Account!'})

                try:
                    user_id = int(user_id)
                except ValueError:
                    return JsonResponse({'status': 'error', 'message': 'Invalid user ID!'})

                user = tbl_users2.objects.filter(userId=user_id).first()
                if not user:
                    return JsonResponse({'status': 'error', 'message': 'User not found!'})

                # Use user data for salary account
                user_name = user.name
                if user.middle_name:
                    user_name += f" {user.middle_name}"
                if user.last_name:
                    user_name += f" {user.last_name}"

                client.comp_name = user_name
                client.name = user_name
                client.mobile = user.mobile
                client.email = user.email
                client.user_id = user_id

            else:
                # Update general client data if not Salary Account
                client.comp_name = request.POST.get('comp_name')
                client.name = request.POST.get('name')
                client.mobile = request.POST.get('mobile')
                client.email = request.POST.get('email')
                client.address = request.POST.get('address')
                client.area = request.POST.get('area')
                client.city = request.POST.get('city')
                client.state = request.POST.get('state')
                client.country = request.POST.get('country')
                client.billing_add = request.POST.get('billing_add')
                client.shipping_add = request.POST.get('shipping_add')
                client.same_as_billing = request.POST.get('same_as_billing')
                client.gst_number = request.POST.get('gst_number')
                client.pan_card = request.POST.get('pan_card')

            # Update transaction type and save
            client.transaction_type = transaction_type
            client.save()

            # Log the change
            comp_name = request.POST.get('comp_name') if transaction_type != 'Salary Account' else user_name
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name=request.session['session_user'],
                change_status=f"Edit client - {comp_name}",
                added_date=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=request.session['company_id'],
                user_id=request.session['session_id'],
                ip_address=ip_address,
            )

            return JsonResponse({
                'status': 'success',
                'message': f'Client {comp_name} has been successfully updated!'
            })

        return render(request, "account-add-client.html", {
            'emp_data': emp_data,
            'client': client,
            'cites': cites,
            'companies': companies,
            'is_edit': True,
            'session_roleid': session_roleid
        })
    else:
        return redirect(login)
       
def account_delete_client(request, clt_id):
    if 'session_id' in request.session:
        client = get_object_or_404(master_client, clt_id=clt_id)
        
        comp_name = client.comp_name
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete client - {comp_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        client.delete()
        return JsonResponse({'success': True, 'comp_name': comp_name})
    else:
        return redirect(login)
        
def account_view_client(request, clt_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        client = get_object_or_404(master_client, clt_id=clt_id)
       
        payment_data = (
            tbl_payment_v.objects
            .filter(clt_id=clt_id)
            .values('vouch_num')  # group by vouch_num
            .annotate(latest_id=Max('pv_id'))  # or your PK field
            .order_by('-vouch_num')
        )
        payment_entries = tbl_payment_v.objects.filter(pv_id__in=[item['latest_id'] for item in payment_data])

        receipt_data = (
            tbl_receive_v.objects
            .filter(clt_id=clt_id)
            .values('vouch_num')
            .annotate(latest_id=Max('rv_id'))  # or your PK
            .order_by('-vouch_num')
        )
        receipt_entries = tbl_receive_v.objects.filter(rv_id__in=[item['latest_id'] for item in receipt_data])

        invoice_data = (
            tbl_invoice.objects
            .filter(clt_id=clt_id)
            .values('invNumber')
            .annotate(latest_id=Max('inv_id'))  # or your PK
            .order_by('-invNumber')
        )
        invoice_entries = tbl_invoice.objects.filter(inv_id__in=[item['latest_id'] for item in invoice_data])
        
        return render(request, 'view-account-client.html', {'client': client,'payment_data':payment_entries,'receipt_data':receipt_entries,'invoice_data':invoice_entries,'session_roleid':session_roleid})
    else:
        return redirect(login)
 
def add_payment(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        user_compeny = request.session['user_compney']
        compney_list = master_company.objects.all()
        data = master_client.objects.all()
        expence_emp = master_client.objects.filter(transaction_type="Expense")
        products = master_product.objects.all()
        units = master_unit.objects.all()
        reasons = tbl_reason.objects.all() 
        
        client = None
        invoices = []
        payment_vouchers = []
        receive_vouchers = []

        if request.method == 'POST':
            clt_id = request.POST.get('clt_id')
            if clt_id:
                client = get_object_or_404(master_client, clt_id=clt_id) 
                invoices = tbl_invoice.objects.filter(clt_id=clt_id)
                payment_vouchers = tbl_payment_v.objects.filter(clt_id=clt_id)
                receive_vouchers = tbl_receive_v.objects.filter(clt_id=clt_id)
                
        return render(request,"payment-voucher-leasting.html",{
            'entries': client,
            'invoices': invoices,
            'payment_vouchers': payment_vouchers,
            'receive_vouchers': receive_vouchers,
            'expence_emp':expence_emp,
            'data':data,
            'products':products,
            'units':units,
            'session_roleid':session_roleid,
            'comp_name':user_compeny,
            'compney_list':compney_list,
            "reasons":reasons
        })
    else:
        return redirect(login)
        
# def generate_voucher_number():
#     last_voucher = tbl_payment_v.objects.order_by('-pv_id').first()
#     if last_voucher:
#         last_number = int(last_voucher.vouch_num[1:])  # Skip the 'P' and convert to int
#         next_number = last_number + 1
#     else:
#         next_number = 1  # Starting from P000001

#     return redirect(login) 
        
# def create_payment_voucher(request):
#     if 'session_id' in request.session:
#         compney_list = master_company.objects.all()
#         if request.method == 'POST':
#             last_invoice = tbl_payment_v.objects.order_by('-vouch_num').first()
#             new_number = int(last_invoice.vouch_num[1:]) + 1 if last_invoice else 1
#             new_vouch_num = f"P{new_number:06d}"

#             company_id = request.POST.get('company_id')
#             client_type = request.POST.get('client_type')
#             name1 = request.POST.get('name1')
#             name2 = request.POST.get('name2')
#             comp_name = request.POST.get('comp_name')
#             mobile = request.POST.get('mobile')
#             address = request.POST.get('address')
#             gst_no = request.POST.get('gst_no')
#             perticulars = request.POST.getlist('perticular[]')
#             gst_percents = request.POST.getlist('gst_per[]')
#             quantities = request.POST.getlist('quantity[]')
#             units = request.POST.getlist('unit[]')
#             prices = request.POST.getlist('price[]')
#             remarks = request.POST.getlist('remark[]')
#             payment_mode = request.POST.get('payment_mode') or None
#             bank_name = request.POST.get('bank_name') or None
#             cheque_no = request.POST.get('cheque_no') or None
#             cheque_date = request.POST.get('cheque_date') or None
#             cheque_amount = request.POST.get('cheque_amount') or None
#             online_payment_method = request.POST.get('online_payment_method') or None
#             payment_date = request.POST.get('payment_date')
#             reason = request.POST.get('reason')
            
#             clt_n = master_client.objects.filter(name=name1).first()
#             clt_id = clt_n.clt_id if clt_n else None
            
#             if cheque_date:
#                 try:
#                     cheque_date = datetime.strptime(cheque_date, '%Y-%m-%d').date()
#                 except ValueError:
#                     return render(request, "payment-voucher-leasting.html", {'error': 'Invalid date format for cheque date.'})
#             else:
#                 cheque_date = None
                
#             total_amount = 0
                
#             for i in range(len(perticulars)):
#                 perticular = perticulars[i]
#                 gst_per = gst_percents[i]
#                 quantity = int(quantities[i])
#                 unit = units[i]
#                 price = float(prices[i])
#                 remark = remarks[i]

#                 total = price * quantity
                
#                 total_amount += total
                
#                 try:
#                     new_voucher = tbl_payment_v.objects.create(
#                         vouch_num=new_vouch_num,
#                         company_id=company_id,
#                         client_type=client_type,
#                         name=name1 if client_type == 'Client' else name2,
#                         comp_name=comp_name,
#                         mobile=mobile,
#                         address=address,
#                         gst_no=gst_no,
#                         perticular=perticular,
#                         gst_per=gst_per,
#                         quantity=quantity,
#                         unit=unit,
#                         price=price,
#                         remark=remark,
#                         payment_mode=payment_mode,
#                         bank_name=bank_name,
#                         cheque_no=cheque_no,
#                         cheque_date=cheque_date,
#                         cheque_amount=cheque_amount,
#                         online_payment_method=online_payment_method,
#                         payment_date=payment_date,
#                         total=total,
#                         clt_id=clt_id,
#                         reason=reason,
#                         add_by_id=request.session['session_id'],
#                         add_by_name=request.session['session_user'],
#                         create_time = timezone.now() + timedelta(hours=5, minutes=30)
#                     )
                    
#                     tbl_messages.objects.create(
#                         message_name=request.session['session_user'],
#                         change_status=f"Add payment voucher - {name1 if client_type == 'Client' else name2}",
#                         added_date=timezone.now() + timedelta(hours=5, minutes=30),
#                         company_id=request.session['company_id']
#                     )

#                 except ValidationError as e:
#                     return render(request, "payment-voucher-leasting.html", {'error': str(e)})
                    
#             tbl_payment_v.objects.filter(vouch_num=new_vouch_num).update(total_amount=total_amount)
            
#             return JsonResponse({'status': 'success', 'message': f'Payment Voucher added successfully!'})

#         return render(request, "payment-voucher-leasting.html", {'compney_list': compney_list})
#     else:
#         return redirect(login)

# def create_payment_voucher(request):
#     if 'session_id' in request.session:
#         compney_list = master_company.objects.all() 

#         if request.method == 'POST':
#             last_invoice = tbl_payment_v.objects.order_by('-vouch_num').first()
#             new_number = int(last_invoice.vouch_num[1:]) + 1 if last_invoice else 1
#             new_vouch_num = f"P{new_number:06d}"

#             company_id = request.POST.get('company_id')
#             client_type = request.POST.get('client_type')
#             transaction_type = request.POST.get('transaction_type') or None
#             name1 = request.POST.get('name1')
#             name2 = request.POST.get('name2')
#             name3 = request.POST.get('name3')
#             name4 = request.POST.get('name4')
#             comp_name1 = request.POST.get('comp_name1') or None
#             comp_name2 = request.POST.get('comp_name2') or None
#             mobile = request.POST.get('mobile') or None
#             address = request.POST.get('address') or None
#             gst_no = request.POST.get('gst_no') or None
#             perticulars = request.POST.getlist('perticular[]') or None
#             gst_percents = request.POST.getlist('gst_per[]') or None
#             quantities = request.POST.getlist('quantity[]') or None
#             units = request.POST.getlist('unit[]') or None
#             prices = request.POST.getlist('price[]') or None
#             remarks = request.POST.getlist('remark[]') or None
#             prices1 = request.POST.getlist('price1') or None
#             perti1 = request.POST.getlist('perti1') or None
#             price2 = request.POST.get('price2') or None
#             perti2 = request.POST.get('perti2') or None
#             payment_mode = request.POST.get('payment_mode') or None
#             bank_name = request.POST.get('bank_name') or None
#             cheque_no = request.POST.get('cheque_no') or None
#             cheque_date = request.POST.get('cheque_date') or None
#             cheque_amount = request.POST.get('cheque_amount') or None
#             online_payment_method = request.POST.get('online_payment_method') or None
#             payment_date = request.POST.get('payment_date')
#             reason = request.POST.get('reason')

#             # Determine client name based on type
#             if client_type == 'Client':
#                 name = name1
#                 comp_name = comp_name1
#             elif client_type == 'Other':
#                 name = name2
#                 comp_name = comp_name2
#             elif client_type == 'Expense':
#                 name = name3
#                 comp_name = None
#             else:
#                 name = ''
#                 comp_name = None

#             # Fetch client ID
#             clt_n = master_client.objects.filter(name=name1).first()
#             clt_id = clt_n.clt_id if clt_n else None

#             # Parse cheque date if present
#             if cheque_date:
#                 try:
#                     cheque_date = datetime.strptime(cheque_date, '%Y-%m-%d').date()
#                 except ValueError:
#                     return render(request, "payment-voucher-leasting.html", {
#                         'error': 'Invalid date format for cheque date.'
#                     })
#             else:
#                 cheque_date = None

#             total_amount = 0

#             try:
#                 # For expense type: use prices1 and remarks1
#                 if client_type == 'Expense':
#                     for i in range(len(prices1)):
#                         price = float(prices1[i])
#                         perti = perti1[i]
#                         total = price
#                         total_amount += total

#                         tbl_payment_v.objects.create(
#                             vouch_num=new_vouch_num,
#                             company_id=company_id,
#                             client_type=client_type,
#                             name=name,
#                             comp_name=comp_name,
#                             mobile=mobile,
#                             address=address,
#                             gst_no=gst_no,
#                             perticular=perti,
#                             gst_per=None,
#                             quantity=None,
#                             unit=None,
#                             price=price,
#                             remark=None,
#                             payment_mode=payment_mode,
#                             bank_name=bank_name,
#                             cheque_no=cheque_no,
#                             cheque_date=cheque_date,
#                             cheque_amount=cheque_amount,
#                             online_payment_method=online_payment_method,
#                             payment_date=payment_date,
#                             total=total,
#                             clt_id=clt_id,
#                             reason=reason,
#                             add_by_id=request.session['session_id'],
#                             add_by_name=request.session['session_user'],
#                             create_time=timezone.now() + timedelta(hours=5, minutes=30)
#                         )
#                 else:
#                     # For Client or other: use perticular items
#                     for i in range(len(perticulars)):
#                         perticular = perticulars[i]
#                         gst_per = gst_percents[i]
#                         try:
#                             quantity = int(quantities[i]) if quantities[i].strip() != '' else 0
#                         except (ValueError, TypeError):
#                             quantity = 0
                    
#                         unit = units[i]
#                         try:
#                             price = float(prices[i]) if prices[i].strip() != '' else 0.0
#                         except (ValueError, TypeError):
#                             price = 0.0
                    
#                         remark = remarks[i]
#                         total = price * quantity
#                         total_amount += total

#                         tbl_payment_v.objects.create(
#                             vouch_num=new_vouch_num,
#                             company_id=company_id,
#                             client_type=client_type,
#                             transaction_type=transaction_type,
#                             name=name,
#                             comp_name=comp_name,
#                             mobile=mobile,
#                             address=address,
#                             gst_no=gst_no,
#                             perticular=perticular,
#                             gst_per=gst_per,
#                             quantity=quantity,
#                             unit=unit,
#                             price=price,
#                             remark=remark,
#                             payment_mode=payment_mode,
#                             bank_name=bank_name,
#                             cheque_no=cheque_no,
#                             cheque_date=cheque_date,
#                             cheque_amount=cheque_amount,
#                             online_payment_method=online_payment_method,
#                             payment_date=payment_date,
#                             total=total,
#                             clt_id=clt_id,
#                             reason=reason,
#                             add_by_id=request.session['session_id'],
#                             add_by_name=request.session['session_user'],
#                             create_time=timezone.now() + timedelta(hours=5, minutes=30)
#                         )
                        
#                 if client_type == 'Client' and transaction_type == 'Expense' and perti2 == "salary":
#                     price2 = float(price2) if price2 else 0
#                     total = price2

#                     tbl_payment_v.objects.create(
#                         vouch_num=new_vouch_num,
#                         company_id=company_id,
#                         client_type=client_type,
#                         name=name4,  # Using name4 for salary case
#                         comp_name=None,  # Assuming no company name for salary
#                         mobile=None,  # Assuming no mobile for salary case
#                         address=None,  # Assuming no address for salary
#                         gst_no=None,  # Assuming no GST number for salary
#                         perticular=perti2,  # Using perti2 for salary
#                         gst_per=None,  # Assuming no GST for salary
#                         quantity=None,  # No quantity for salary
#                         unit=None,  # No unit for salary
#                         price=price2,  # Salary price
#                         remark=None,  # Assuming no remarks for salary
#                         payment_mode=payment_mode,
#                         bank_name=bank_name,
#                         cheque_no=cheque_no,
#                         cheque_date=cheque_date,
#                         cheque_amount=cheque_amount,
#                         online_payment_method=online_payment_method,
#                         payment_date=payment_date,
#                         total=total,
#                         clt_id=clt_id,
#                         reason=reason,
#                         add_by_id=request.session['session_id'],
#                         add_by_name=request.session['session_user'],
#                         create_time=timezone.now() + timedelta(hours=5, minutes=30)
#                     )

#                 # Log the action
#                 tbl_messages.objects.create(
#                     message_name=request.session['session_user'],
#                     change_status=f"Add payment voucher - {name}",
#                     added_date=timezone.now() + timedelta(hours=5, minutes=30),
#                     company_id=request.session['company_id']
#                 )

#                 # Update total_amount in all related entries
#                 tbl_payment_v.objects.filter(vouch_num=new_vouch_num).update(total_amount=total_amount)

#                 return JsonResponse({'status': 'success', 'message': 'Payment Voucher added successfully!'})

#             except ValidationError as e:
#                 return render(request, "payment-voucher-leasting.html", {'error': str(e)})

#         return render(request, "payment-voucher-leasting.html", {'compney_list': compney_list})
    
#     else:
#         return redirect(login)

def create_payment_voucher(request):
    if 'session_id' in request.session:
        selected_company_id = request.session.get('selected_company_id')
        compney_list = master_company.objects.all()

        if request.method == 'POST':
            if not selected_company_id or int(selected_company_id) == 0:
                return JsonResponse({'status': 'error', 'message': 'Please select a company first!'})
            
            last_invoice = tbl_payment_v.objects.order_by('-vouch_num').first()
            new_number = int(last_invoice.vouch_num[1:]) + 1 if last_invoice else 1
            new_vouch_num = f"P{new_number:06d}"

            transaction_type = request.POST.get('transaction_type') or None
            name = request.POST.get('name')
            comp_name = request.POST.get('comp_name') or None
            mobile = request.POST.get('mobile') or None
            address = request.POST.get('address') or None
            gst_no = request.POST.get('gst_no') or None
            perticulars = request.POST.getlist('perticular[]') or None
            gst_percents = request.POST.getlist('gst_per[]') or None
            hsn = request.POST.getlist('hsn[]') or None
            quantity = request.POST.getlist('quantity[]') or None
            prices = request.POST.getlist('price[]') or None
            payment_mode = request.POST.get('payment_mode') or None
            bank_name = request.POST.get('bank_name') or None
            cheque_no = request.POST.get('cheque_no') or None
            cheque_date = request.POST.get('cheque_date') or None
            cheque_amount = request.POST.get('cheque_amount') or None
            online_payment_method = request.POST.get('online_payment_method') or None
            payment_date = request.POST.get('payment_date')
            Amount = request.POST.get('Amount')
            Particular1 = request.POST.get('Particular1')
            Invoice = request.POST.get('Invoice')
            clt_id = request.POST.get('clt_id')
            
            if cheque_date:
                try:
                    cheque_date = datetime.strptime(cheque_date, '%Y-%m-%d').date()
                except ValueError:
                    return render(request, "payment-voucher-leasting.html", {
                        'error': 'Invalid date format for cheque date.'
                    })
            else:
                cheque_date = None

            total_amount = 0
            
            if transaction_type in ['Credited', 'Debited']:
                perticulars = request.POST.getlist('perticular[]')
                gst_percents = request.POST.getlist('gst_per[]')
                hsns = request.POST.getlist('hsn[]')
                quantities = request.POST.getlist('quantity[]')
                prices = request.POST.getlist('price[]')
    
                for i in range(len(perticulars)):
                    qty = int(quantities[i]) if quantities[i] else 0
                    price = float(prices[i]) if prices[i] else 0
                    item_total = qty * price
                    total_amount += item_total
    
                    tbl_payment_v.objects.create(
                        vouch_num=new_vouch_num,
                        name=name,
                        comp_name=comp_name,
                        mobile=mobile,
                        address=address,
                        gst_no=gst_no,
                        transaction_type=transaction_type,
                        perticular=perticulars[i],
                        gst_per=gst_percents[i],
                        quantity=qty,
                        price=prices[i],
                        total=item_total,
                        inv_number=Invoice,
                        payment_mode=payment_mode,
                        online_payment_method=online_payment_method,
                        bank_name=bank_name,
                        cheque_no=cheque_no,
                        cheque_date=cheque_date,
                        cheque_amount=cheque_amount,
                        payment_date=payment_date,
                        client_type=None,
                        company_id=selected_company_id,
                        add_by_id=request.session.get('session_id'),
                        add_by_name=request.session.get('session_user'),
                        clt_id=clt_id,
                        create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    )
    
            else:  # Expense or Salary Account — only one entry
                total_amount = float(Amount) if Amount else 0
                tbl_payment_v.objects.create(
                    vouch_num=new_vouch_num,
                    name=name,
                    comp_name=comp_name,
                    mobile=mobile,
                    address=address,
                    gst_no=gst_no,
                    transaction_type=transaction_type,
                    perticular=Particular1,
                    # total=total_amount,
                    payment_mode=payment_mode,
                    online_payment_method=online_payment_method,
                    bank_name=bank_name,
                    cheque_no=cheque_no,
                    cheque_date=cheque_date,
                    cheque_amount=cheque_amount,
                    payment_date=payment_date,
                    company_id=selected_company_id,
                    add_by_id=request.session.get('session_id'),
                    add_by_name=request.session.get('session_user'),
                    clt_id=clt_id,
                    inv_number=Invoice,
                    create_time=timezone.now() + timedelta(hours=5, minutes=30),
                )

                # Log the action
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name=request.session['session_user'],
                change_status=f"Add payment voucher - {name}",
                added_date=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

            # Update total_amount in all related entries
            tbl_payment_v.objects.filter(vouch_num=new_vouch_num).update(total_amount=total_amount)

            return JsonResponse({'status': 'success', 'message': 'Payment Voucher added successfully!'})


        return render(request, "payment-voucher-leasting.html", {'compney_list': compney_list})

    else:
        return redirect(login)



# def edit_payment(request, pv_id):
#     if 'session_id' not in request.session:
#         return redirect('login')

#     session_roleid = request.session.get('session_roleid')
#     compney_list = master_company.objects.all()
#     payment = get_object_or_404(tbl_payment_v, pv_id=pv_id)
#     data = master_client.objects.all()
#     products = master_product.objects.all()
#     units = master_unit.objects.all()
#     reasons = tbl_reason.objects.all()
    
#     payment_entries = tbl_payment_v.objects.filter(vouch_num=payment.vouch_num)

#     if request.method == 'POST':
#         last_invoice = tbl_payment_v.objects.order_by('-vouch_num').first()
#         new_number = int(last_invoice.vouch_num[1:]) + 1 if last_invoice else 1
#         new_vouch_num = f"P{new_number:06d}"
        
#         company_id = request.POST.get('company_id')
#         client_type = request.POST.get('client_type')
#         name1 = request.POST.get('name1')
#         name2 = request.POST.get('name2')
#         comp_name = request.POST.get('comp_name')
#         mobile = request.POST.get('mobile')
#         address = request.POST.get('address')
#         gst_no = request.POST.get('gst_no')
#         perticulars = request.POST.getlist('perticular[]')
#         gst_percents = request.POST.getlist('gst_per[]')
#         quantities = request.POST.getlist('quantity[]')
#         units = request.POST.getlist('unit[]')
#         prices = request.POST.getlist('price[]')
#         remarks = request.POST.getlist('remark[]')
#         payment_mode = request.POST.get('payment_mode')
#         bank_name = request.POST.get('bank_name') or None
#         cheque_no = request.POST.get('cheque_no') or None
#         cheque_date = request.POST.get('cheque_date') or None
#         cheque_amount = request.POST.get('cheque_amount') or None
#         online_payment_method = request.POST.get('online_payment_method') or None
#         payment_date = request.POST.get('payment_date')
#         reason = request.POST.get('reason')

        
#         clt_n = master_client.objects.filter(name=name1).first()
#         clt_id = clt_n.clt_id if clt_n else None
        
#         if cheque_date:
#             try:
#                 cheque_date = datetime.strptime(cheque_date, '%Y-%m-%d').date()
#             except ValueError:
#                 return render(request, "payment-voucher-leasting.html", {'error': 'Invalid date format for cheque date.'})
#         else:
#             cheque_date = None
            
#         if client_type == 'Client':
#             name_to_save = name1
#         elif client_type == 'Other':
#             name_to_save = name2
#         else:
#             name_to_save = None
            
#         payment.company_id = company_id
#         payment.client_type = client_type
#         payment.name = name_to_save
#         payment.comp_name = comp_name
#         payment.mobile = mobile
#         payment.address = address
#         payment.gst_no = gst_no
#         payment.payment_mode = payment_mode
#         payment.bank_name = bank_name
#         payment.cheque_no = cheque_no
#         payment.cheque_date = cheque_date
#         payment.cheque_amount = cheque_amount
#         payment.online_payment_method = online_payment_method
#         payment.payment_date = payment_date
#         payment.clt_id = clt_id
#         payment.reason = reason
        
#         payment.save()
#         total_amount = 0
        
#         for i in range(len(perticulars)):
#             perticular = perticulars[i]
#             gst_per = gst_percents[i]
#             quantity = int(quantities[i])
#             unit = units[i]
#             price = float(prices[i])
#             remark = remarks[i]
    
#             total = price * quantity
#             total_amount += total
#             try:
#                 entry = payment_entries[i]
#                 entry.perticular = perticular
#                 entry.gst_per = gst_per
#                 entry.quantity = quantity
#                 entry.unit = unit
#                 entry.price = price
#                 entry.remark = remark
#                 entry.payment_mode = payment_mode
#                 entry.bank_name = bank_name
#                 entry.cheque_no = cheque_no
#                 entry.cheque_date = cheque_date
#                 entry.cheque_amount = cheque_amount
#                 entry.online_payment_method = online_payment_method
#                 entry.payment_date = payment_date
#                 entry.total = total
#                 entry.clt_id = clt_id
                
#                 entry.company_id = company_id
#                 entry.client_type = client_type
#                 entry.name = name_to_save
#                 entry.comp_name = comp_name
#                 entry.mobile = mobile
#                 entry.address = address
#                 entry.gst_no = gst_no
                
#                 entry.save()
                
#                 tbl_messages.objects.create(
#                     message_name=request.session['session_user'],
#                     change_status=f"Edit payment voucher - {name_to_save}",
#                     added_date=timezone.now() + timedelta(hours=5, minutes=30),
#                     company_id=request.session['company_id']
#                 )
    
#             except ValidationError as e:
#                 return render(request, "payment-voucher-leasting.html", {'error': str(e)})
                
#         tbl_payment_v.objects.filter(vouch_num=payment.vouch_num).update(total_amount=total_amount) 
        
#         return JsonResponse({
#                     'status': 'success',
#                     'message': f'Payment Voucher {name_to_save} has been successfully updated!'
#                 })

#     return render(request, "payment-voucher-leasting.html", {
#         'payment': payment,
#         'payment_entries': payment_entries,
#         'compney_list': compney_list,
#         'data': data,
#         "reasons":reasons,
#         'products': products,
#         'units': units,
#         'session_roleid': session_roleid,
#         'comp_name': request.session['user_compney'],
#         'company_id': request.session['company_id'],
#         'is_edit': True,
#     })

# def edit_payment(request, pv_id):
#     if 'session_id' not in request.session:
#         return redirect('login')

#     session_roleid = request.session.get('session_roleid')
#     compney_list = master_company.objects.all()
#     payment = get_object_or_404(tbl_payment_v, pv_id=pv_id)
#     data = master_client.objects.all()
#     products = master_product.objects.all()
#     units = master_unit.objects.all()
#     reasons = tbl_reason.objects.all()
#     expence_emp = master_client.objects.filter(transaction_type="Expense")
#     payment_entries = list(tbl_payment_v.objects.filter(vouch_num=payment.vouch_num).order_by('pv_id'))

#     if request.method == 'POST':
#         company_id = request.POST.get('company_id')
#         client_type = request.POST.get('client_type')
#         transaction_type = request.POST.get('transaction_type')
#         name1 = request.POST.get('name1')
#         name2 = request.POST.get('name2')
#         name3 = request.POST.get('name3')
#         comp_name1 = request.POST.get('comp_name1')
#         comp_name2 = request.POST.get('comp_name2')
#         mobile = request.POST.get('mobile')
#         address = request.POST.get('address')
#         gst_no = request.POST.get('gst_no')
#         perticulars = request.POST.getlist('perticular[]')
#         gst_percents = request.POST.getlist('gst_per[]')
#         quantities = request.POST.getlist('quantity[]')
#         units_list = request.POST.getlist('unit[]')
#         prices = request.POST.getlist('price[]')
#         remarks = request.POST.getlist('remark[]')
#         prices1 = request.POST.getlist('price1')
#         perti1 = request.POST.getlist('perti1')
#         payment_mode = request.POST.get('payment_mode')
#         bank_name = request.POST.get('bank_name') or None
#         cheque_no = request.POST.get('cheque_no') or None
#         cheque_date = request.POST.get('cheque_date') or None
#         cheque_amount = request.POST.get('cheque_amount') or None
#         online_payment_method = request.POST.get('online_payment_method') or None
#         payment_date = request.POST.get('payment_date')
#         reason = request.POST.get('reason')

#         if cheque_date:
#             try:
#                 cheque_date = datetime.strptime(cheque_date, '%Y-%m-%d').date()
#             except ValueError:
#                 return render(request, "payment-voucher-leasting.html", {'error': 'Invalid cheque date format.'})
#         else:
#             cheque_date = None

#         if client_type == 'Client':
#             name_to_save = name1
#             comp_name = comp_name1
#         elif client_type == 'Other':
#             name_to_save = name2
#             comp_name = comp_name2
#         elif client_type == 'Expense':
#             name_to_save = name3
#             comp_name = None
#         else:
#             name_to_save = ''
#             comp_name = None

#         clt_n = master_client.objects.filter(name=name1).first()
#         clt_id = clt_n.clt_id if clt_n else None

#         # Update base fields of the main payment record
#         base_fields = {
#             'company_id': company_id,
#             'client_type': client_type,
#             'transaction_type': transaction_type,
#             'name': name_to_save,
#             'comp_name': comp_name,
#             'mobile': mobile,
#             'address': address,
#             'gst_no': gst_no,
#             'payment_mode': payment_mode,
#             'bank_name': bank_name,
#             'cheque_no': cheque_no,
#             'cheque_date': cheque_date,
#             'cheque_amount': cheque_amount,
#             'online_payment_method': online_payment_method,
#             'payment_date': payment_date,
#             'clt_id': clt_id,
#             'reason': reason,
#             'selected_client_id': payment.clt_id,
#         }
#         for field, value in base_fields.items():
#             setattr(payment, field, value)
#         payment.save()

#         existing_count = len(payment_entries)
#         new_count = len(prices1) if client_type == 'Expense' else len(perticulars)
#         total_amount = 0

#         for i in range(new_count):
#             if client_type == 'Expense':
#                 price = float(prices1[i])
#                 perti = perti1[i]
#                 total = price
#                 total_amount += total

#                 entry_data = {
#                     'perticular': perti,
#                     'gst_per': None,
#                     'quantity': None,
#                     'unit': None,
#                     'price': price,
#                     'remark': None,
#                 }
#             else:
#                 try:
#                     quantity = int(quantities[i]) if quantities[i].strip() else 0
#                 except (ValueError, IndexError):
#                     quantity = 0
#                 try:
#                     price = float(prices[i]) if prices[i].strip() else 0.0
#                 except (ValueError, IndexError):
#                     price = 0.0

#                 perticular = perticulars[i]
#                 gst_per = gst_percents[i]
#                 unit = units_list[i]
#                 remark = remarks[i]
#                 total = price * quantity
#                 total_amount += total

#                 entry_data = {
#                     'perticular': perticular,
#                     'gst_per': gst_per,
#                     'quantity': quantity,
#                     'unit': unit,
#                     'price': price,
#                     'remark': remark,
#                 }

#             shared_fields = {
#                 'vouch_num': payment.vouch_num,
#                 'company_id': company_id,
#                 'client_type': client_type,
#                 'transaction_type': transaction_type,
#                 'name': name_to_save,
#                 'comp_name': comp_name,
#                 'mobile': mobile,
#                 'address': address,
#                 'gst_no': gst_no,
#                 'payment_mode': payment_mode,
#                 'bank_name': bank_name,
#                 'cheque_no': cheque_no,
#                 'cheque_date': cheque_date,
#                 'cheque_amount': cheque_amount,
#                 'online_payment_method': online_payment_method,
#                 'payment_date': payment_date,
#                 'total': total,
#                 'clt_id': clt_id,
#                 'reason': reason,
#                 'selected_client_id': payment.clt_id,
#                 'add_by_id': request.session['session_id'],
#                 'add_by_name': request.session['session_user'],
#             }

#             if i < existing_count:
#                 # Update existing entry
#                 entry = payment_entries[i]
#                 for field, value in {**entry_data, **shared_fields}.items():
#                     setattr(entry, field, value)
#                 entry.save()
#             else:
#                 # Create new entry
#                 tbl_payment_v.objects.create(
#                     **entry_data,
#                     **shared_fields,
#                     create_time=timezone.now() + timedelta(hours=5, minutes=30)
#                 )

#         # Delete extra entries if new count is less than old count
#         if new_count < existing_count:
#             for entry in payment_entries[new_count:]:
#                 entry.delete()

#         # Update total for all
#         tbl_payment_v.objects.filter(vouch_num=payment.vouch_num).update(total_amount=total_amount)

#         # Log the update
#         tbl_messages.objects.create(
#             message_name=request.session['session_user'],
#             change_status=f"Edit payment voucher - {name_to_save}",
#             added_date=timezone.now() + timedelta(hours=5, minutes=30),
#             company_id=request.session['company_id']
#         )

#         return JsonResponse({
#             'status': 'success',
#             'message': f'Payment Voucher for {name_to_save} updated successfully!'
#         })

#     return render(request, "payment-voucher-leasting.html", {
#         'payment': payment,
#         'expence_emp':expence_emp, 
#         'payment_entries': payment_entries,
#         'compney_list': compney_list,
#         'data': data,
#         'products': products,
#         'units': units,
#         'reasons': reasons,
#         'selected_client_id': payment.clt_id,
#         'session_roleid': session_roleid,
#         'comp_name': request.session['user_compney'],
#         'company_id': request.session['company_id'],
#         'is_edit': True,
#     })
  
def edit_payment(request, pv_id):
    if 'session_id' not in request.session:
        return redirect('login')

    session_roleid = request.session.get('session_roleid')
    compney_list = master_company.objects.all()
    payment = get_object_or_404(tbl_payment_v, pv_id=pv_id)
    data = master_client.objects.all()
    products = master_product.objects.all()
    units = master_unit.objects.all()
    reasons = tbl_reason.objects.all()
    expence_emp = master_client.objects.filter(transaction_type="Expense")
    payment_entries = list(tbl_payment_v.objects.filter(vouch_num=payment.vouch_num).order_by('pv_id'))
    
    client = get_object_or_404(master_client, clt_id=payment.clt_id)
    invoices = tbl_invoice.objects.filter(clt_id=payment.clt_id)
    payment_vouchers = tbl_payment_v.objects.filter(clt_id=payment.clt_id)
    receive_vouchers = tbl_receive_v.objects.filter(clt_id=payment.clt_id)

    if request.method == 'POST':
        transaction_type = request.POST.get('transaction_type')
        invoice_number = request.POST.get('Invoice')
        name = request.POST.get('name')
        comp_name = request.POST.get('comp_name')
        mobile = request.POST.get('mobile')
        address = request.POST.get('address')
        gst_no = request.POST.get('gst_no')
        payment_mode = request.POST.get('payment_mode')
        bank_name = request.POST.get('bank_name') or None
        cheque_no = request.POST.get('cheque_no') or None
        cheque_date = request.POST.get('cheque_date') or None
        cheque_amount = request.POST.get('cheque_amount') or None
        online_payment_method = request.POST.get('online_payment_method') or None
        payment_date = request.POST.get('payment_date')
        reason = request.POST.get('reason')

        client_type = request.POST.get('client_type')
        selected_client_id = payment.clt_id
        
        if cheque_date:
            try:
                cheque_date = datetime.strptime(cheque_date, '%Y-%m-%d').date()
            except ValueError:
                return render(request, "payment-voucher-leasting.html", {'error': 'Invalid cheque date format.'})
        else:
            cheque_date = None
            
        clt_n = master_client.objects.filter(name=name).first()
        clt_id = clt_n.clt_id if clt_n else None

        base_fields = {
            # 'company_id': company_id,
            'transaction_type': transaction_type,
            'inv_number': invoice_number,
            'name': name,
            'comp_name': comp_name,
            'mobile': mobile,
            'address': address,
            'gst_no': gst_no,
            'payment_mode': payment_mode,
            'bank_name': bank_name,
            'cheque_no': cheque_no,
            'cheque_date': cheque_date,
            'cheque_amount': cheque_amount,
            'online_payment_method': online_payment_method,
            'payment_date': payment_date,
            'clt_id': clt_id,
            'reason': reason,
            'client_type': client_type,
            'selected_client_id': selected_client_id
        }

        for field, value in base_fields.items():
            setattr(payment, field, value)
        payment.save()

        total_amount = 0

        if transaction_type in ['Credited', 'Debited']:
            perticulars = request.POST.getlist('perticular[]')
            gst_percents = request.POST.getlist('gst_per[]')
            quantities = request.POST.getlist('quantity[]')
            prices = request.POST.getlist('price[]')
            units_list = request.POST.getlist('unit[]')
            remarks = request.POST.getlist('remark[]')

            new_count = len(perticulars)
            existing_count = len(payment_entries)

            for i in range(new_count):
                try:
                    quantity = int(quantities[i]) if quantities[i].strip() else 0
                except (ValueError, IndexError):
                    quantity = 0
                try:
                    price = float(prices[i]) if prices[i].strip() else 0.0
                except (ValueError, IndexError):
                    price = 0.0

                total = quantity * price
                total_amount += total

                entry_data = {
                    'perticular': perticulars[i],
                    'gst_per': gst_percents[i],
                    'quantity': quantity,
                    'unit': units_list[i] if i < len(units_list) else '',
                    'price': price,
                    'remark': remarks[i] if i < len(remarks) else '',
                }

                shared_fields = {
                    'vouch_num': payment.vouch_num,
                    # 'company_id': company_id,
                    'transaction_type': transaction_type,
                    'inv_number': invoice_number,
                    'name': name,
                    'comp_name': comp_name,
                    'mobile': mobile,
                    'address': address,
                    'gst_no': gst_no,
                    'payment_mode': payment_mode,
                    'bank_name': bank_name,
                    'cheque_no': cheque_no,
                    'cheque_date': cheque_date,
                    'cheque_amount': cheque_amount,
                    'online_payment_method': online_payment_method,
                    'payment_date': payment_date,
                    'total': total,
                    'clt_id': clt_id,
                    'reason': reason,
                    'add_by_id': request.session['session_id'],
                    'add_by_name': request.session['session_user'],
                }

                if i < existing_count:
                    entry = payment_entries[i]
                    for field, value in {**entry_data, **shared_fields}.items():
                        setattr(entry, field, value)
                    entry.save()
                else:
                    tbl_payment_v.objects.create(
                        **entry_data,
                        **shared_fields,
                        create_time=timezone.now() + timedelta(hours=5, minutes=30)
                    )
           
            if new_count < existing_count:
                for entry in payment_entries[new_count:]:
                    entry.delete()

        else:
            Particular1 = request.POST.get('Particular1')
            Amount = request.POST.get('Amount')
            total_amount = float(Amount) if Amount else 0
            
            existing_entry = tbl_payment_v.objects.filter(vouch_num=payment.vouch_num).first()

            if existing_entry:
                update_fields = {
                    # 'company_id': company_id,
                    'transaction_type': transaction_type,
                    'inv_number': invoice_number,
                    'name': name,
                    'comp_name': comp_name,
                    'mobile': mobile,
                    'address': address,
                    'gst_no': gst_no,
                    'payment_mode': payment_mode,
                    'bank_name': bank_name,
                    'cheque_no': cheque_no,
                    'cheque_date': cheque_date,
                    'cheque_amount': cheque_amount,
                    'online_payment_method': online_payment_method,
                    'payment_date': payment_date,
                    'clt_id': clt_id,
                    'perticular': Particular1,
                    'total': total_amount,
                    'add_by_id': request.session['session_id'],
                    'add_by_name': request.session['session_user'],
                    'inv_number': payment.inv_number,
                    'reason': reason,
                    'create_time': timezone.now() + timedelta(hours=5, minutes=30),
                }

                for field, value in update_fields.items():
                    setattr(existing_entry, field, value)
                existing_entry.save()
            else:
                tbl_payment_v.objects.create(
                    vouch_num=payment.vouch_num,
                    # company_id=company_id,
                    transaction_type=transaction_type,
                    name=name,
                    comp_name=comp_name,
                    mobile=mobile,
                    address=address,
                    gst_no=gst_no,
                    payment_mode=payment_mode,
                    bank_name=bank_name,
                    cheque_no=cheque_no,
                    cheque_date=cheque_date,
                    cheque_amount=cheque_amount,
                    online_payment_method=online_payment_method,
                    payment_date=payment_date,
                    clt_id=clt_id,
                    perticular=Particular1,
                    total=total_amount,
                    add_by_id=request.session['session_id'],
                    add_by_name=request.session['session_user'],
                    inv_number=payment.inv_number,
                    reason=reason,
                    create_time=timezone.now() + timedelta(hours=5, minutes=30),
                )
                
        tbl_payment_v.objects.filter(vouch_num=payment.vouch_num).update(total_amount=total_amount)

        # Log the update
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name=request.session['session_user'],
            change_status=f"Edit payment voucher - {comp_name}",
            added_date=timezone.now() + timedelta(hours=5, minutes=30),
            company_id=request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )

        return JsonResponse({
            'status': 'success',
            'message': f'Payment Voucher for {comp_name} updated successfully!'
        })

    return render(request, "payment-voucher-leasting.html", {
        'entries': payment,
        'invoices': invoices,
        'payment_vouchers': payment_vouchers,
        'receive_vouchers': receive_vouchers,
        'payment_entries': payment_entries,
        'compney_list': compney_list,
        'data': data,
        'products': products,
        'units': units,
        'reasons': reasons,
        'session_roleid': session_roleid,
        'selected_client_id': payment.clt_id,
        'comp_name': request.session['user_compney'],
        'company_id': request.session['company_id'],
        'is_edit': True,
    })

  
        
def delete_payment_voucher(request, pv_id):
    if 'session_id' in request.session:
        payment_voucher = get_object_or_404(tbl_payment_v, pv_id=pv_id)
        related_payment = tbl_payment_v.objects.filter(vouch_num=payment_voucher.vouch_num)
        name = payment_voucher.name
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name=request.session['session_user'],
            change_status=f"Delete payment voucher - {name}",
            added_date=timezone.now() + timedelta(hours=5, minutes=30),
            company_id=request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        related_payment.delete()

        return JsonResponse({'success': True, 'pv_id': pv_id, 'name': name})
    else:
        return redirect(login)
        
def view_payment(request,pv_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        data = get_object_or_404(tbl_payment_v, pv_id=pv_id)
        vouch_num = data.vouch_num
        matching_data = tbl_payment_v.objects.filter(vouch_num=vouch_num)
        
        return render(request,"view-client-payment-voucher.html",{'data':matching_data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
       
def payment_v_excel(request):
    if request.method == 'POST':
        from_date = request.POST.get('from_date')
        to_date = request.POST.get('to_date')

        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
            except ValueError:
                pass

        else:
            return HttpResponse("Please select a date.", status=404)


        payment_v_entries = tbl_payment_v.objects.filter(
            payment_date__range=[from_date, to_date]
        )

        if payment_v_entries.count() == 0:
            return HttpResponse("No records found for the given date range.", status=404)

        wb = Workbook()
        ws = wb.active
        ws.title = "payment voucher Entries"

        headers = [ "ID", "Voucher Number", "Company name", "Client Type", "Client Name", "Client Company Name", 
                    "Mobile", "Address", "GST Number", "Perticuler", "GST Percent", "Quantity",
                    "Unit Measure", "Price", "Remark", "Mode of Payment","Online Payment Method",
                    "Bank Name","Cheque No","Date of Cheque","Cheque Amount","Total Amount", "Payment Date"]
        ws.append(headers)
        
        com_dict = {comp.com_id: comp.com_name for comp in master_company.objects.all()}
        company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}

        for entry in payment_v_entries:
            payment_date = entry.payment_date.strftime('%d/%m/%Y') if entry.payment_date else 'N/A'
            cheque_date = entry.cheque_date.strftime('%d/%m/%Y') if entry.cheque_date else 'N/A'
            
            company_name = com_dict.get(entry.company_id, 'N/A') 
            if entry.client_type =="Client":
                clt_company_name = company_dict.get(entry.clt_id, 'N/A') 
            else:
                clt_company_name = entry.comp_name
                
            ws.append([
                entry.pv_id,
                entry.vouch_num,
                company_name,
                entry.client_type,
                entry.name,
                clt_company_name,
                entry.mobile,
                entry.address,
                entry.gst_no,
                entry.perticular,
                entry.gst_per,
                entry.quantity,
                entry.unit,
                entry.price,
                entry.remark,
                entry.payment_mode,
                entry.online_payment_method,
                entry.bank_name,
                entry.cheque_no,
                cheque_date,
                entry.cheque_amount,
                entry.total_amount,
                payment_date,
            ])

        response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        response['Content-Disposition'] = 'attachment; filename="Payment-voucher-Report.xlsx"'
        wb.save(response)

        return response
    
def payment_voucher(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        products = master_product.objects.all()
        units = master_unit.objects.all()
        # data = tbl_payment_v.objects.all()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        vouch_num = request.GET.get('vouch_num')
        name = request.GET.get('name')
        comp_name = request.GET.get('comp_name')
        mobile = request.GET.get('mobile')
        address = request.GET.get('address')
        gst_no = request.GET.get('gst_no')
        perticular = request.GET.get('perticular')
        quantity = request.GET.get('quantity')
        unit = request.GET.get('unit')
        price = request.GET.get('price')
        total_amount = request.GET.get('total_amount')
        remark = request.GET.get('remark')
        payment_mode = request.GET.get('payment_mode')
        online_payment_method = request.GET.get('online_payment_method')
        bank_name = request.GET.get('bank_name')
        cheque_no = request.GET.get('cheque_no')
        cheque_date = request.GET.get('cheque_date')
        cheque_amount = request.GET.get('cheque_amount')
        payment_date = request.GET.get('payment_date')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(create_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if vouch_num:
            query |= Q(vouch_num__icontains=vouch_num)
        if name:
            query |= Q(name__icontains=name)
        if comp_name:
            query |= Q(comp_name__icontains=comp_name)
        if mobile:
            query |= Q(mobile__icontains=mobile)
        if address:
            query |= Q(address__icontains=address)
        if gst_no:
            query |= Q(gst_no__icontains=gst_no)
        if perticular:
            query |= Q(perticular__icontains=perticular)
        if quantity:
            query |= Q(quantity__icontains=quantity)
        if unit:
            query |= Q(unit__icontains=unit)
        if price:
            query |= Q(price__icontains=price)
        if total_amount:
            query |= Q(total_amount__icontains=total_amount)
        if remark:
            query |= Q(remark__icontains=remark)
        if payment_mode:
            query |= Q(payment_mode__icontains=payment_mode)
        if online_payment_method:
            query |= Q(online_payment_method__icontains=online_payment_method)
        if bank_name:
            query |= Q(bank_name__icontains=bank_name)
        if cheque_no:
            query |= Q(cheque_no__icontains=cheque_no)
        if cheque_date:
            query |= Q(cheque_date__icontains=cheque_date)
        if cheque_amount:
            query |= Q(cheque_amount__icontains=cheque_amount)
        if payment_date:
            query |= Q(payment_date__icontains=payment_date)
            
        # data = data.filter(query)
        # data = data.order_by('-clt_id')
        
        if set(session_roleid).intersection({"1"}): 
            selected_company_id = request.session.get('selected_company_id', None)
            if selected_company_id:
                payments = tbl_payment_v.objects.filter(company_id=selected_company_id).filter(query).values('vouch_num').annotate(latest_pv_id=Max('pv_id'))
            else:
                payments = tbl_payment_v.objects.filter(query).values('vouch_num').annotate(latest_pv_id=Max('pv_id'))
        else:
            payments = tbl_payment_v.objects.filter(query).values('vouch_num').annotate(latest_pv_id=Max('pv_id'))
            
        payment_details = []
        
        for payment in payments:
            payment_data = tbl_payment_v.objects.filter(
                vouch_num=payment['vouch_num'], pv_id=payment['latest_pv_id']
            ).first()
        
            if payment_data:
                try:
                    # If comp_name is numeric, treat it as clt_id and fetch client
                    if str(payment_data.comp_name).isdigit():
                        client = master_client.objects.filter(clt_id=int(payment_data.comp_name)).first()
                        payment_data.client_company = client.comp_name if client else "N/A"
                    else:
                        # Otherwise, assume it's already a name
                        payment_data.client_company = payment_data.comp_name or "N/A"
                except Exception as e:
                    print(f"Error fetching client for payment: {e}")
                    payment_data.client_company = "N/A"
        
            payment_details.append(payment_data)
        
        return render(request, "view-payment-voucher-leasting.html", {
            'units': units,
            'products': products,
            'data': payment_details,
            'session_roleid': session_roleid
        })


    else:
        return redirect(login)
        
def payment_voucher_pdf(request, pv_id):
    # Check if the user is logged in
    if 'session_id' not in request.session:
        return redirect('login')

    company_id = request.session['company_id']
    session_roleid = request.session.get('session_roleid')

    data = get_object_or_404(tbl_payment_v, pv_id=pv_id)
    
    vouch_num = data.vouch_num
    
    matching_data = tbl_payment_v.objects.filter(vouch_num=vouch_num)

    company_id = data.company_id  
    product_details = master_company.objects.filter(com_id=company_id).first()

    if product_details is None:
        return render(request, "no_records.html", {'message': "No company details found."})

    company_name = product_details.com_name
    c_email = product_details.email
    c_mobile = product_details.mobile
    
    company_list = master_company.objects.all()
    
    return render(request, "payment-voucher-pdf.html", {
        'data': matching_data,               # Only the selected rv_id data
        'company': company_list,    # All company details (if needed)
        'c_email': c_email,
        'c_mobile': c_mobile,
        'company_name': company_name,
        'session_roleid': session_roleid
    })
    
def generate_payment_invoice(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        company_list = master_company.objects.all()
        states = master_state.objects.all()

        if request.method == "POST":
            selected_voucher_ids = request.POST.getlist('selected_vouchers')
            payments = tbl_payment_v.objects.filter(pv_id__in=selected_voucher_ids)
            
            p_temp = tbl_payment_v.objects.filter(pv_id__in=selected_voucher_ids).first()
            client = master_client.objects.filter(clt_id=p_temp.clt_id).first()

            invoices_data = []
            for payment in payments:
                last_invoice = tbl_invoice.objects.order_by('inv_id').last()
                if last_invoice:
                    last_inv_number = last_invoice.invNumber 
                    last_number = int(last_inv_number[1:])
                    next_number = last_number + 1
                else:
                    next_number = 1

                invoice_number = f"A{next_number:06d}" 
                
                payment.inv_number = invoice_number
                payment.save()

                invoices_data.append({
                    'name': payment.name,
                    'mobile': payment.mobile,
                    'address': payment.address,
                    'gst_no': payment.gst_no,
                    'perticular': payment.perticular,
                    'unit': payment.unit,
                    'quantity': payment.quantity,
                    'price': payment.price,
                    'pv_id': payment.pv_id,
                    'invoice_number': invoice_number,
                })

            # If only one payment is selected, extract data for that single payment
            if len(invoices_data) == 1:
                single_invoice_data = invoices_data[0]
                return render(request, "generate-payment-invoice.html", {
                    'company_list': company_list,
                    "client_email" : client.email,
                    "client_state" : client.state,
                    'states':states,
                    'payments': [single_invoice_data],  # Return a single payment in list
                    'session_roleid': session_roleid,
                    'invoice_number':invoice_number,
                })
            else:
                return render(request, "generate-payment-invoice.html", {
                    'company_list': company_list,
                    "client_email" : client.email,
                    "client_state" : client.state,
                    'states':states,
                    'payments': invoices_data,
                    'session_roleid': session_roleid,
                    'invoice_number':invoice_number,
                })

    else:
        return redirect('login')
 
def add_receipt(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        data = master_client.objects.filter(transaction_type="Debited")
        products = master_product.objects.all()
        
        client = None
        invoices = []
        payment_vouchers = []
        receive_vouchers = []

        if request.method == 'POST':
            clt_id = request.POST.get('clt_id')
            if clt_id:
                client = get_object_or_404(master_client, clt_id=clt_id) 
                invoices = tbl_invoice.objects.filter(clt_id=clt_id)
                payment_vouchers = tbl_payment_v.objects.filter(clt_id=clt_id)
                receive_vouchers = tbl_receive_v.objects.filter(clt_id=clt_id)
        
        return render(request,"receipt-voucher-leasting.html",{
            'data':data,
            'products':products,
            'session_roleid':session_roleid,
            'entries': client,
            'invoices': invoices,
            'payment_vouchers': payment_vouchers,
            'receive_vouchers': receive_vouchers,
        })
    else:
        return redirect(login)
        
def receipt_excel(request):
    if request.method == 'POST':
        from_date = request.POST.get('from_date')
        to_date = request.POST.get('to_date')

        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
            except ValueError:
                pass
            
        else:
            return HttpResponse("Please select a date.", status=404)

        receipt_entries = tbl_receive_v.objects.filter(
            payment_date__range=[from_date, to_date]
        )

        if receipt_entries.count() == 0:
            return HttpResponse("No records found for the given date range.", status=404)

        wb = Workbook()
        ws = wb.active
        ws.title = "payment voucher Entries"

        headers = [ "ID", "Voucher Number","Company name", "Client Type", "Client Name", "Client Company Name", 
                    "Mobile", "Address", "GST Number", "Perticuler", "GST Percent", "Quantity",
                    "Unit Measure", "Price", "Remark", "Mode of Payment","Online Payment Method","Bank Name","Cheque No","Date of Cheque","Cheque Amount","Total Amount", "Payment Date"]
        ws.append(headers)
        
        com_dict = {comp.com_id: comp.com_name for comp in master_company.objects.all()}
        company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}

        for entry in receipt_entries:
            payment_date = entry.payment_date.strftime('%d/%m/%Y') if entry.payment_date else 'N/A'
            cheque_date = entry.cheque_date.strftime('%d/%m/%Y') if entry.cheque_date else 'N/A'
            
            company_name = com_dict.get(entry.company_id, 'N/A') 
            if entry.client_type =="Client":
                clt_company_name = company_dict.get(entry.clt_id, 'N/A') 
            else:
                clt_company_name = entry.comp_name
                
            ws.append([
                entry.rv_id,
                entry.vouch_num,
                company_name,
                entry.client_type,
                entry.name,
                clt_company_name,
                entry.mobile,
                entry.address,
                entry.gst_no,
                entry.perticular,
                entry.gst_per,
                entry.quantity,
                entry.unit,
                entry.price,
                entry.remark,
                entry.payment_mode,
                entry.online_payment_method,
                entry.bank_name,
                entry.cheque_no,
                cheque_date,
                entry.cheque_amount,
                entry.total_amount,
                payment_date,
            ])

        response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        response['Content-Disposition'] = 'attachment; filename="Receipt-voucher-Report.xlsx"'
        wb.save(response)

        return response
        
# def create_receipt_voucher(request):
#     if 'session_id' in request.session:
#         compney_list = master_company.objects.all()
#         if request.method == 'POST':
#             last_invoice = tbl_receive_v.objects.order_by('-vouch_num').first()
#             new_number = int(last_invoice.vouch_num[1:]) + 1 if last_invoice else 1
#             new_vouch_num = f"R{new_number:06d}"
            
#             company_id = request.POST.get('company_id')
#             client_type = request.POST.get('client_type')
#             name1 = request.POST.get('name1')
#             name2 = request.POST.get('name2')
#             comp_name = request.POST.get('comp_name')
#             mobile = request.POST.get('mobile')
#             address = request.POST.get('address')
#             gst_no = request.POST.get('gst_no')
#             perticulars = request.POST.getlist('perticular[]')
#             gst_percents = request.POST.getlist('gst_per[]')
#             quantities = request.POST.getlist('quantity[]')
#             units = request.POST.getlist('unit[]')
#             prices = request.POST.getlist('price[]')
#             remarks = request.POST.getlist('remark[]')
#             payment_mode = request.POST.get('payment_mode') or None
#             bank_name = request.POST.get('bank_name') or None
#             cheque_no = request.POST.get('cheque_no') or None
#             cheque_date = request.POST.get('cheque_date') or None
#             cheque_amount = request.POST.get('cheque_amount') or None
#             online_payment_method = request.POST.get('online_payment_method') or None
#             payment_date = request.POST.get('payment_date')
#             reason = request.POST.get('reason')
            
#             clt_n = master_client.objects.filter(name=name1).first()
#             clt_id = clt_n.clt_id if clt_n else None
            
#             if cheque_date:
#                 try:
#                     cheque_date = datetime.strptime(cheque_date, '%Y-%m-%d').date()
#                 except ValueError:
#                     return render(request, "payment-voucher-leasting.html", {'error': 'Invalid date format for cheque date.'})
#             else:
#                 cheque_date = None
                
#             total_amount = 0
                
#             for i in range(len(perticulars)):
#                 perticular = perticulars[i]
#                 gst_per = gst_percents[i]
#                 quantity = int(quantities[i])
#                 unit = units[i]
#                 price = float(prices[i])
#                 remark = remarks[i]

#                 total = price * quantity
                
#                 total_amount += total
                
#                 try:
#                     new_voucher = tbl_receive_v.objects.create(
#                         vouch_num=new_vouch_num,
#                         company_id=company_id,
#                         client_type=client_type,
#                         name=name1 if client_type == 'Client' else name2,
#                         comp_name=comp_name,
#                         mobile=mobile,
#                         address=address,
#                         gst_no=gst_no,
#                         perticular=perticular,
#                         gst_per=gst_per,
#                         quantity=quantity,
#                         unit=unit,
#                         price=price,
#                         remark=remark,
#                         payment_mode=payment_mode,
#                         bank_name=bank_name,
#                         cheque_no=cheque_no,
#                         cheque_date=cheque_date,
#                         cheque_amount=cheque_amount,
#                         online_payment_method=online_payment_method,
#                         payment_date=payment_date,
#                         total=total,
#                         clt_id=clt_id,
#                         reason=reason,
#                         add_by_id=request.session['session_id'],
#                         add_by_name=request.session['session_user'],
#                         create_time = timezone.now() + timedelta(hours=5, minutes=30)
#                     )
                
#                     tbl_messages.objects.create(
#                         message_name = request.session['session_user'],
#                         change_status=f"Add receipt voucher - {name1 if client_type == 'Client' else name2}",
#                         added_date = timezone.now() + timedelta(hours=5, minutes=30),
#                         company_id = request.session['company_id']
#                     )
                    
#                 except ValidationError as e:
#                     return render(request, "receipt-voucher-leasting.html", {'error': str(e)})
                    
#             tbl_receive_v.objects.filter(vouch_num=new_vouch_num).update(total_amount=total_amount)
                    
#             return JsonResponse({'status': 'success', 'message': f'Receipt Voucher added successfully!'})
            
#         return render(request, "receipt-voucher-leasting.html", {'compney_list': compney_list})
#     else:
#         return redirect(login)
        
def create_receipt_voucher(request):
    if 'session_id' in request.session:
        compney_list = master_company.objects.all()
        selected_company_id = request.session.get('selected_company_id')
        
        if request.method == 'POST':
            if not selected_company_id or int(selected_company_id) == 0:
                return JsonResponse({'status': 'error', 'message': 'Please select a company first!'})
                
            last_invoice = tbl_receive_v.objects.order_by('-vouch_num').first()
            new_number = int(last_invoice.vouch_num[1:]) + 1 if last_invoice else 1
            new_vouch_num = f"R{new_number:06d}"
            
            transaction_type = request.POST.get('transaction_type') or None
            name = request.POST.get('name')
            comp_name = request.POST.get('comp_name') or None
            mobile = request.POST.get('mobile') or None
            address = request.POST.get('address') or None
            gst_no = request.POST.get('gst_no') or None
            perticulars = request.POST.getlist('perticular[]') or None
            gst_percents = request.POST.getlist('gst_per[]') or None
            hsn = request.POST.getlist('hsn[]') or None
            quantity = request.POST.getlist('quantity[]') or None
            prices = request.POST.getlist('price[]') or None
            payment_mode = request.POST.get('payment_mode') or None
            bank_name = request.POST.get('bank_name') or None
            cheque_no = request.POST.get('cheque_no') or None
            cheque_date = request.POST.get('cheque_date') or None
            cheque_amount = request.POST.get('cheque_amount') or None
            online_payment_method = request.POST.get('online_payment_method') or None
            payment_date = request.POST.get('payment_date')
            Amount = request.POST.get('Amount')
            Particular1 = request.POST.get('Particular1')
            Invoice = request.POST.get('Invoice')
            clt_id = request.POST.get('clt_id')
            
            if cheque_date:
                try:
                    cheque_date = datetime.strptime(cheque_date, '%Y-%m-%d').date()
                except ValueError:
                    return render(request, "payment-voucher-leasting.html", {'error': 'Invalid date format for cheque date.'})
            else:
                cheque_date = None
                
            
            total_amount = 0
            
            if transaction_type in ['Credited', 'Debited']:
                perticulars = request.POST.getlist('perticular[]')
                gst_percents = request.POST.getlist('gst_per[]')
                hsns = request.POST.getlist('hsn[]')
                quantities = request.POST.getlist('quantity[]')
                prices = request.POST.getlist('price[]')
    
                for i in range(len(perticulars)):
                    qty = int(quantities[i]) if quantities[i] else 0
                    price = float(prices[i]) if prices[i] else 0
                    item_total = qty * price
                    total_amount += item_total
    
                    tbl_receive_v.objects.create(
                        vouch_num=new_vouch_num,
                        name=name,
                        comp_name=comp_name,
                        mobile=mobile,
                        address=address,
                        gst_no=gst_no,
                        transaction_type=transaction_type,
                        perticular=perticulars[i],
                        gst_per=gst_percents[i],
                        quantity=qty,
                        price=prices[i],
                        total=item_total,
                        inv_number=Invoice,
                        payment_mode=payment_mode,
                        online_payment_method=online_payment_method,
                        bank_name=bank_name,
                        cheque_no=cheque_no,
                        cheque_date=cheque_date,
                        cheque_amount=cheque_amount,
                        payment_date=payment_date,
                        client_type=None,
                        company_id=selected_company_id,
                        add_by_id=request.session.get('session_id'),
                        add_by_name=request.session.get('session_user'),
                        clt_id=clt_id,
                        create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    )
    
            else:  # Expense or Salary Account — only one entry
                total_amount = float(Amount) if Amount else 0
                tbl_receive_v.objects.create(
                    vouch_num=new_vouch_num,
                    name=name,
                    comp_name=comp_name,
                    mobile=mobile,
                    address=address,
                    gst_no=gst_no,
                    transaction_type=transaction_type,
                    perticular=Particular1,
                    # total=total_amount,
                    payment_mode=payment_mode,
                    online_payment_method=online_payment_method,
                    bank_name=bank_name,
                    cheque_no=cheque_no,
                    cheque_date=cheque_date,
                    cheque_amount=cheque_amount,
                    payment_date=payment_date,
                    company_id=selected_company_id,
                    add_by_id=request.session.get('session_id'),
                    add_by_name=request.session.get('session_user'),
                    clt_id=clt_id,
                    inv_number=Invoice,
                    create_time=timezone.now() + timedelta(hours=5, minutes=30),
                )
                       
            ip_address = get_client_ip(request) 
            tbl_messages.objects.create(
                message_name=request.session['session_user'],
                change_status=f"Add receipt voucher - {name}",
                added_date=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

                # Update total_amount in all related entries
            tbl_receive_v.objects.filter(vouch_num=new_vouch_num).update(total_amount=total_amount)
            
            # return redirect(add_receipt)  
            return JsonResponse({'status': 'success', 'message': 'Receipt Voucher added successfully!'})

        return render(request, "receipt-voucher-leasting.html", {'compney_list': compney_list})
    
    else:
        return redirect(login)        
    
# def edit_receipt(request, rv_id):
#     if 'session_id' not in request.session:
#         return redirect('login')

#     session_roleid = request.session.get('session_roleid')
#     compney_list = master_company.objects.all()
#     payment = get_object_or_404(tbl_receive_v, rv_id=rv_id)
#     data = master_client.objects.all()
#     products = master_product.objects.all()
#     units = master_unit.objects.all()
#     reasons = tbl_reason.objects.all()

#     payment_entries = tbl_receive_v.objects.filter(vouch_num=payment.vouch_num)

#     if request.method == 'POST':
#         last_invoice = tbl_receive_v.objects.order_by('-vouch_num').first()
#         new_number = int(last_invoice.vouch_num[1:]) + 1 if last_invoice else 1
#         new_vouch_num = f"P{new_number:06d}"
        
#         company_id = request.POST.get('company_id')
#         client_type = request.POST.get('client_type')
#         name1 = request.POST.get('name1')
#         name2 = request.POST.get('name2')
#         comp_name = request.POST.get('comp_name')
#         mobile = request.POST.get('mobile')
#         address = request.POST.get('address')
#         gst_no = request.POST.get('gst_no')
#         perticulars = request.POST.getlist('perticular[]')
#         gst_percents = request.POST.getlist('gst_per[]')
#         quantities = request.POST.getlist('quantity[]')
#         units = request.POST.getlist('unit[]')
#         prices = request.POST.getlist('price[]')
#         remarks = request.POST.getlist('remark[]')
#         payment_mode = request.POST.get('payment_mode')
#         bank_name = request.POST.get('bank_name') or None
#         cheque_no = request.POST.get('cheque_no') or None
#         cheque_date = request.POST.get('cheque_date') or None
#         cheque_amount = request.POST.get('cheque_amount') or None
#         online_payment_method = request.POST.get('online_payment_method') or None
#         payment_date = request.POST.get('payment_date')
#         reason = request.POST.get('reason')

#         clt_n = master_client.objects.filter(name=name1).first()
#         clt_id = clt_n.clt_id if clt_n else None
        
#         if cheque_date:
#             try:
#                 cheque_date = datetime.strptime(cheque_date, '%Y-%m-%d').date()
#             except ValueError:
#                 return render(request, "receipt-voucher-leasting.html", {'error': 'Invalid date format for cheque date.'})
#         else:
#             cheque_date = None
            
#         if client_type == 'Client':
#             name_to_save = name1
#         elif client_type == 'Other':
#             name_to_save = name2
#         else:
#             name_to_save = None
            
#         payment.company_id = company_id
#         payment.client_type = client_type
#         payment.name = name_to_save
#         payment.comp_name = comp_name
#         payment.mobile = mobile
#         payment.address = address
#         payment.gst_no = gst_no
#         payment.payment_mode = payment_mode
#         payment.bank_name = bank_name
#         payment.cheque_no = cheque_no
#         payment.cheque_date = cheque_date
#         payment.cheque_amount = cheque_amount
#         payment.online_payment_method = online_payment_method
#         payment.payment_date = payment_date
#         payment.clt_id = clt_id
        
#         payment.save()
#         total_amount = 0
        
#         for i in range(len(perticulars)):
#             perticular = perticulars[i]
#             gst_per = gst_percents[i]
#             quantity = int(quantities[i])
#             unit = units[i]
#             price = float(prices[i])
#             remark = remarks[i]
    
#             total = price * quantity
#             total_amount += total
#             try:
#                 entry = payment_entries[i]
#                 entry.perticular = perticular
#                 entry.gst_per = gst_per
#                 entry.quantity = quantity
#                 entry.unit = unit
#                 entry.price = price
#                 entry.remark = remark
#                 entry.payment_mode = payment_mode
#                 entry.bank_name = bank_name
#                 entry.cheque_no = cheque_no
#                 entry.cheque_date = cheque_date
#                 entry.cheque_amount = cheque_amount
#                 entry.online_payment_method = online_payment_method
#                 entry.payment_date = payment_date
#                 entry.total = total
#                 entry.clt_id = clt_id
#                 entry.reason = reason
                
#                 entry.company_id = company_id
#                 entry.client_type = client_type
#                 entry.name = name_to_save
#                 entry.comp_name = comp_name
#                 entry.mobile = mobile
#                 entry.address = address
#                 entry.gst_no = gst_no
                
#                 entry.save()
        
#                 tbl_messages.objects.create(
#                     message_name = request.session['session_user'],
#                     change_status=f"Edit receipt voucher - {payment.name}",
#                     added_date = timezone.now() + timedelta(hours=5, minutes=30),
#                     company_id = request.session['company_id']
#                 )
    
#             except ValidationError as e:
#                 return render(request, "receipt-voucher-leasting.html", {'error': str(e)})
                
#         tbl_receive_v.objects.filter(vouch_num=payment.vouch_num).update(total_amount=total_amount) 
        
#         return JsonResponse({
#                     'status': 'success',
#                     'message': f'Receipt Voucher {payment.name} has been successfully updated!'
#                 })

#     return render(request, "receipt-voucher-leasting.html", {
#         'payment': payment,
#         'payment_entries': payment_entries,
#         'compney_list': compney_list,
#         "reasons":reasons,
#         'data': data,
#         'products': products,
#         'units': units,
#         'session_roleid': session_roleid,
#         'comp_name': request.session['user_compney'],
#         'company_id': request.session['company_id'],
#         'is_edit': True,
#     })
        
def edit_receipt(request, rv_id):
    if 'session_id' not in request.session:
        return redirect('login')

    session_roleid = request.session.get('session_roleid')
    compney_list = master_company.objects.all()
    payment = get_object_or_404(tbl_receive_v, rv_id=rv_id)
    data = master_client.objects.all()
    products = master_product.objects.all()
    units = master_unit.objects.all()
    reasons = tbl_reason.objects.all()
    payment_entries = list(tbl_receive_v.objects.filter(vouch_num=payment.vouch_num).order_by('rv_id'))

    client = get_object_or_404(master_client, clt_id=payment.clt_id)
    invoices = tbl_invoice.objects.filter(clt_id=payment.clt_id)
    payment_vouchers = tbl_payment_v.objects.filter(clt_id=payment.clt_id)
    receive_vouchers = tbl_receive_v.objects.filter(clt_id=payment.clt_id)

    if request.method == 'POST':
        # company_id = request.POST.get('company_id')
        transaction_type = request.POST.get('transaction_type')
        invoice_number = request.POST.get('Invoice')
        name = request.POST.get('name')
        comp_name = request.POST.get('comp_name')
        mobile = request.POST.get('mobile')
        address = request.POST.get('address')
        gst_no = request.POST.get('gst_no')
        payment_mode = request.POST.get('payment_mode')
        bank_name = request.POST.get('bank_name') or None
        cheque_no = request.POST.get('cheque_no') or None
        cheque_date = request.POST.get('cheque_date') or None
        cheque_amount = request.POST.get('cheque_amount') or None
        online_payment_method = request.POST.get('online_payment_method') or None
        payment_date = request.POST.get('payment_date')
        reason = request.POST.get('reason')

        client_type = request.POST.get('client_type')
        selected_client_id = payment.clt_id

        if cheque_date:
            try:
                cheque_date = datetime.strptime(cheque_date, '%Y-%m-%d').date()
            except ValueError:
                return render(request, "receipt-voucher-leasting.html", {'error': 'Invalid cheque date format.'})
        else:
            cheque_date = None

        clt_n = master_client.objects.filter(name=name).first()
        clt_id = clt_n.clt_id if clt_n else None

        base_fields = {
            # 'company_id': company_id,
            'transaction_type': transaction_type,
            'inv_number': invoice_number,
            'name': name,
            'comp_name': comp_name,
            'mobile': mobile,
            'address': address,
            'gst_no': gst_no,
            'payment_mode': payment_mode,
            'bank_name': bank_name,
            'cheque_no': cheque_no,
            'cheque_date': cheque_date,
            'cheque_amount': cheque_amount,
            'online_payment_method': online_payment_method,
            'payment_date': payment_date,
            'clt_id': clt_id,
            'reason': reason,
            'client_type': client_type,
            'selected_client_id': selected_client_id
        }

        for field, value in base_fields.items():
            setattr(payment, field, value)
        payment.save()

        total_amount = 0

        if transaction_type in ['Credited', 'Debited']:
            perticulars = request.POST.getlist('perticular[]')
            gst_percents = request.POST.getlist('gst_per[]')
            quantities = request.POST.getlist('quantity[]')
            prices = request.POST.getlist('price[]')
            units_list = request.POST.getlist('unit[]')
            remarks = request.POST.getlist('remark[]')

            new_count = len(perticulars)
            existing_count = len(payment_entries)

            for i in range(new_count):
                try:
                    quantity = int(quantities[i]) if quantities[i].strip() else 0
                except (ValueError, IndexError):
                    quantity = 0
                try:
                    price = float(prices[i]) if prices[i].strip() else 0.0
                except (ValueError, IndexError):
                    price = 0.0

                total = quantity * price
                total_amount += total

                entry_data = {
                    'perticular': perticulars[i],
                    'gst_per': gst_percents[i],
                    'quantity': quantity,
                    'unit': units_list[i] if i < len(units_list) else '',
                    'price': price,
                    'remark': remarks[i] if i < len(remarks) else '',
                }

                shared_fields = {
                    'vouch_num': payment.vouch_num,
                    # 'company_id': company_id,
                    'transaction_type': transaction_type,
                    'inv_number': invoice_number,
                    'name': name,
                    'comp_name': comp_name,
                    'mobile': mobile,
                    'address': address,
                    'gst_no': gst_no,
                    'payment_mode': payment_mode,
                    'bank_name': bank_name,
                    'cheque_no': cheque_no,
                    'cheque_date': cheque_date,
                    'cheque_amount': cheque_amount,
                    'online_payment_method': online_payment_method,
                    'payment_date': payment_date,
                    'total': total,
                    'clt_id': clt_id,
                    'reason': reason,
                    'add_by_id': request.session['session_id'],
                    'add_by_name': request.session['session_user'],
                }

                if i < existing_count:
                    entry = payment_entries[i]
                    for field, value in {**entry_data, **shared_fields}.items():
                        setattr(entry, field, value)
                    entry.save()
                else:
                    tbl_receive_v.objects.create(
                        **entry_data,
                        **shared_fields,
                        create_time=timezone.now() + timedelta(hours=5, minutes=30)
                    )

            if new_count < existing_count:
                for entry in payment_entries[new_count:]:
                    entry.delete()

        else:
            Particular1 = request.POST.get('Particular1')
            Amount = request.POST.get('Amount')
            total_amount = float(Amount) if Amount else 0

            existing_entry = tbl_receive_v.objects.filter(vouch_num=payment.vouch_num).first()

            if existing_entry:
                update_fields = {
                    # 'company_id': company_id,
                    'transaction_type': transaction_type,
                    'inv_number': invoice_number,
                    'name': name,
                    'comp_name': comp_name,
                    'mobile': mobile,
                    'address': address,
                    'gst_no': gst_no,
                    'payment_mode': payment_mode,
                    'bank_name': bank_name,
                    'cheque_no': cheque_no,
                    'cheque_date': cheque_date,
                    'cheque_amount': cheque_amount,
                    'online_payment_method': online_payment_method,
                    'payment_date': payment_date,
                    'clt_id': clt_id,
                    'perticular': Particular1,
                    'total': total_amount,
                    'add_by_id': request.session['session_id'],
                    'add_by_name': request.session['session_user'],
                    'inv_number': payment.inv_number,
                    'reason': reason,
                    'create_time': timezone.now() + timedelta(hours=5, minutes=30),
                }

                for field, value in update_fields.items():
                    setattr(existing_entry, field, value)
                existing_entry.save()
            else:
                tbl_receive_v.objects.create(
                    vouch_num=payment.vouch_num,
                    # company_id=company_id,
                    transaction_type=transaction_type,
                    name=name,
                    comp_name=comp_name,
                    mobile=mobile,
                    address=address,
                    gst_no=gst_no,
                    payment_mode=payment_mode,
                    bank_name=bank_name,
                    cheque_no=cheque_no,
                    cheque_date=cheque_date,
                    cheque_amount=cheque_amount,
                    online_payment_method=online_payment_method,
                    payment_date=payment_date,
                    clt_id=clt_id,
                    perticular=Particular1,
                    total=total_amount,
                    add_by_id=request.session['session_id'],
                    add_by_name=request.session['session_user'],
                    inv_number=payment.inv_number,
                    reason=reason,
                    create_time=timezone.now() + timedelta(hours=5, minutes=30),
                )

        tbl_receive_v.objects.filter(vouch_num=payment.vouch_num).update(total_amount=total_amount)

        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name=request.session['session_user'],
            change_status=f"Edit receipt voucher - {comp_name}",
            added_date=timezone.now() + timedelta(hours=5, minutes=30),
            company_id=request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )

        return JsonResponse({
            'status': 'success',
            'message': f'Receipt Voucher for {comp_name} updated successfully!'
        })

    return render(request, "receipt-voucher-leasting.html", {
        'entries': payment,
        'invoices': invoices,
        'payment_vouchers': payment_vouchers,
        'receive_vouchers': receive_vouchers,
        'payment_entries': payment_entries,
        'compney_list': compney_list,
        'data': data,
        'products': products,
        'units': units,
        'reasons': reasons,
        'session_roleid': session_roleid,
        'selected_client_id': payment.clt_id,
        'comp_name': request.session['user_compney'],
        'company_id': request.session['company_id'],
        'is_edit': True,
    })
        
def delete_receipt_voucher(request, rv_id):
    if 'session_id' in request.session:
        payment_voucher = get_object_or_404(tbl_receive_v, rv_id=rv_id)
        related_receipts = tbl_receive_v.objects.filter(vouch_num=payment_voucher.vouch_num) 
        
        name = payment_voucher.name
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete receipt voucher - {name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        related_receipts.delete()

        return JsonResponse({'success': True,'rv_id':rv_id,  'name': name}) 
    else:
        return redirect(login)
        
def view_client_receipt_voucher(request,rv_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        data = get_object_or_404(tbl_receive_v, rv_id=rv_id)
        vouch_num = data.vouch_num
        matching_data = tbl_receive_v.objects.filter(vouch_num=vouch_num)
        
        return render(request,"view-client-receipt-voucher.html",{'data':matching_data,'session_roleid':session_roleid})
    else:
        return redirect(login)
           
def receipt_voucher(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        products = master_product.objects.all()
        units = master_unit.objects.all()
        # data = tbl_receive_v.objects.all()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        vouch_num = request.GET.get('vouch_num')
        name = request.GET.get('name')
        comp_name = request.GET.get('comp_name')
        mobile = request.GET.get('mobile')
        address = request.GET.get('address')
        gst_no = request.GET.get('gst_no')
        perticular = request.GET.get('perticular')
        quantity = request.GET.get('quantity')
        unit = request.GET.get('unit')
        price = request.GET.get('price')
        total_amount = request.GET.get('total_amount')
        remark = request.GET.get('remark')
        payment_mode = request.GET.get('payment_mode')
        online_payment_method = request.GET.get('online_payment_method')
        bank_name = request.GET.get('bank_name')
        cheque_no = request.GET.get('cheque_no')
        cheque_date = request.GET.get('cheque_date')
        cheque_amount = request.GET.get('cheque_amount')
        payment_date = request.GET.get('payment_date')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(create_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if vouch_num:
            query |= Q(vouch_num__icontains=vouch_num)
        if name:
            query |= Q(name__icontains=name)
        if comp_name:
            query |= Q(comp_name__icontains=comp_name)
        if mobile:
            query |= Q(mobile__icontains=mobile)
        if address:
            query |= Q(address__icontains=address)
        if gst_no:
            query |= Q(gst_no__icontains=gst_no)
        if perticular:
            query |= Q(perticular__icontains=perticular)
        if quantity:
            query |= Q(quantity__icontains=quantity)
        if unit:
            query |= Q(unit__icontains=unit)
        if price:
            query |= Q(price__icontains=price)
        if total_amount:
            query |= Q(total_amount__icontains=total_amount)
        if remark:
            query |= Q(remark__icontains=remark)
        if payment_mode:
            query |= Q(payment_mode__icontains=payment_mode)
        if online_payment_method:
            query |= Q(online_payment_method__icontains=online_payment_method)
        if bank_name:
            query |= Q(bank_name__icontains=bank_name)
        if cheque_no:
            query |= Q(cheque_no__icontains=cheque_no)
        if cheque_date:
            query |= Q(cheque_date__icontains=cheque_date)
        if cheque_amount:
            query |= Q(cheque_amount__icontains=cheque_amount)
        if payment_date:
            query |= Q(payment_date__icontains=payment_date)
            query |= Q(amount__icontains=amount)
            
        # data = data.filter(query)
        # data = data.order_by('-rv_id')
        
        if set(session_roleid).intersection({"1"}): 
            selected_company_id = request.session.get('selected_company_id', None)
            if selected_company_id:
                receipts = tbl_receive_v.objects.filter(company_id=selected_company_id).filter(query).values('vouch_num').annotate(latest_rv_id=Max('rv_id'))
            else:
                receipts = tbl_receive_v.objects.filter(query).values('vouch_num').annotate(latest_rv_id=Max('rv_id'))
        else:
            receipts = tbl_receive_v.objects.filter(query).values('vouch_num').annotate(latest_rv_id=Max('rv_id'))
            
        # receipt_details = []
        # for receipt in receipts:
        #     receipt_data = tbl_receive_v.objects.filter( 
        #         vouch_num=receipt['vouch_num'], rv_id=receipt['latest_rv_id']
        #     ).first()
            
        #     receipt_details.append(receipt_data)
            
        # return render(request,"view-receipt-voucher-leasting.html",{'units':units,'products':products,'data':receipt_details,'session_roleid':session_roleid})

        # receipt_details = []
        # for payment in receipts:
        #     receipt_data = tbl_receive_v.objects.filter(
        #         vouch_num=payment['vouch_num'], rv_id=payment['latest_rv_id']
        #     ).first()
        
        #     if receipt_data:
        #         if int(receipt_data.comp_name):
        #             client = master_client.objects.filter(clt_id=receipt_data.comp_name).first()
        #             receipt_data.client_company = client.comp_name if client else "N/A"
        #         else :
        #             receipt_data.client_company = client.comp_name if client else "N/A"
                    
        #     receipt_details.append(receipt_data)
        
        # return render(request, "view-receipt-voucher-leasting.html", {
        #     'units': units,
        #     'products': products,
        #     'data': receipt_details,
        #     'session_roleid': session_roleid
        # })
        receipt_details = []
        
        for payment in receipts:
            receipt_data = tbl_receive_v.objects.filter(
                vouch_num=payment['vouch_num'], rv_id=payment['latest_rv_id']
            ).first()
        
            if receipt_data:
                try:
                    # Check if comp_name is numeric (assumed to be clt_id)
                    if str(receipt_data.comp_name).isdigit():
                        client = master_client.objects.filter(clt_id=int(receipt_data.comp_name)).first()
                        receipt_data.client_company = client.comp_name if client else "N/A"
                    else:
                        receipt_data.client_company = receipt_data.comp_name or "N/A"
                except Exception as e:
                    print(f"Error fetching client for receipt: {e}")
                    receipt_data.client_company = "N/A"
        
            receipt_details.append(receipt_data)
        
        return render(request, "view-receipt-voucher-leasting.html", {
            'units': units,
            'products': products,
            'data': receipt_details,
            'session_roleid': session_roleid
        })

    else:
        return redirect(login)
           
import logging

def receipt_voucher_pdf(request, rv_id):
    if 'session_id' not in request.session:
        return redirect('login')
        
    company_id = request.session['company_id']
    session_roleid = request.session.get('session_roleid')
    
    data = get_object_or_404(tbl_receive_v, rv_id=rv_id)
    
    vouch_num = data.vouch_num
    
    matching_data = tbl_receive_v.objects.filter(vouch_num=vouch_num)
    
    company_id = data.company_id  
    product_details = master_company.objects.filter(com_id=company_id).first()
    
    if product_details is None:
        return render(request, "receipt-voucher-pdf.html", {'message': "No company details found."})
        
    company_name = product_details.com_name
    c_email = product_details.email
    c_mobile = product_details.mobile
    
    company_list = master_company.objects.all()
    
    return render(request, "receipt-voucher-pdf.html", {
        'data': matching_data,
        'company': company_list,
        'c_email': c_email,
        'c_mobile': c_mobile,
        'company_name': company_name,
        'session_roleid': session_roleid
    })
    
def generate_receipt_invoice(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        company_list = master_company.objects.all()
        states = master_state.objects.all()

        if request.method == "POST":
            selected_voucher_ids = request.POST.getlist('selected_vouchers')
            payments = tbl_receive_v.objects.filter(rv_id__in=selected_voucher_ids)
            
            p_temp = tbl_receive_v.objects.filter(rv_id__in=selected_voucher_ids).first()
            client = master_client.objects.filter(clt_id=p_temp.clt_id).first()

            invoices_data = []
            for payment in payments:
                last_invoice = tbl_invoice.objects.order_by('inv_id').last()
                if last_invoice:
                    last_inv_number = last_invoice.invNumber 
                    last_number = int(last_inv_number[1:]) 
                    next_number = last_number + 1
                else:
                    next_number = 1

                invoice_number = f"A{next_number:06d}"
                
                payment.inv_number = invoice_number
                payment.save()

                invoices_data.append({
                    'name': payment.name,
                    'mobile': payment.mobile,
                    'address': payment.address,
                    'gst_no': payment.gst_no,
                    'perticular': payment.perticular,
                    'unit': payment.unit,
                    'quantity': payment.quantity,
                    'price': payment.price,
                    'rv_id': payment.rv_id,
                    'invoice_number': invoice_number,
                })

            # If only one payment is selected, extract data for that single payment
            if len(invoices_data) == 1:
                single_invoice_data = invoices_data[0]
                return render(request, "generate_receipt_invoice.html", {
                    'company_list': company_list,
                    'states':states,
                    "client_email" : client.email,
                    "client_state" : client.state,

                    'payments': [single_invoice_data],
                    'session_roleid': session_roleid,
                    'invoice_number':invoice_number,
                })
            else:
                return render(request, "generate_receipt_invoice.html", {
                    'company_list': company_list,
                    'states':states,
                    "client_email" : client.email,
                    "client_state" : client.state,
                    'payments': invoices_data,
                    'session_roleid': session_roleid,
                    'invoice_number':invoice_number,
                })

    else:
        return redirect('login')
        
        
def client_voucher(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = master_client.objects.filter(company_id=selected_company_id)
                else:
                    data = master_client.objects.all()
            else:
                data = master_client.objects.all()
        
            from_date = request.GET.get('fromDate')
            to_date = request.GET.get('toDate')
                
            comp_name = request.GET.get('comp_name')
            name = request.GET.get('name')
            mobile = request.GET.get('mobile')
            email = request.GET.get('email')
            address = request.GET.get('address')
            area = request.GET.get('area')
            city = request.GET.get('city')
            state = request.GET.get('state')
            country = request.GET.get('country')
            billing_add = request.GET.get('billing_add')
            gst_number = request.GET.get('gst_number')
            pan_card = request.GET.get('pan_card')
            
            if from_date and to_date:
                data = data.filter(create_time__range=[from_date, to_date])
            
            data = data.order_by('-create_time') 
            
            if comp_name:
                data = data.filter(comp_name__icontains=comp_name)
            if name:
                data = data.filter(name__icontains=name)
            if mobile:
                data = data.filter(mobile__icontains=mobile)
            if email:
                data = data.filter(email__icontains=email)
            if address:
                data = data.filter(address__icontains=address)
            if area:
                data = data.filter(area__icontains=area)
            if city:
                data = data.filter(city__icontains=city)
            if state:
                data = data.filter(state__icontains=state)
            if country:
                data = data.filter(country__icontains=country)
            if billing_add:
                data = data.filter(billing_add__icontains=billing_add)
            if gst_number:
                data = data.filter(gst_number__icontains=gst_number)
            if pan_card:
                data = data.filter(pan_card__icontains=pan_card)
                
        return render(request,"open_client_voucher_least_page.html",{'data':data, 'session_roleid':session_roleid})
    else:
        return redirect(login) 
        
def open_client_invoice_least_page(request, name, clt_id):
    name = unquote(name)
    
    if 'session_id' in request.session:
        company_id = request.session['company_id']
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']  # Retrieve session_id from session
        user_compeny = request.session['user_compney']
        # if session_id and session_roleid:
        #     if session_roleid =="1" or session_roleid =="11":
        #         # if company_id == 0:
        #         data = tbl_invoice.objects.filter(clt_id = clt_id).order_by('-create_time') 
        #     else:
        #         data = tbl_invoice.objects.filter(company_id=company_id, clt_id = clt_id).order_by('-create_time')
        #     return render(request, "client-invoice.html", {'data': data, 'Username':Username, 'session_id':session_id, 'session_roleid':session_roleid,'comp_name':user_compeny, 'companey_list':master_company.objects.all(),'company_id': company_id, 'name':name}) # Assuming user_id field in tbl_lead corresponds to user's ID
        # else:
        #     data = tbl_invoice.objects.filter(add_by_id=session_id, company_id=company_id, clt_id = clt_id ).order_by('-create_time')
        data = tbl_invoice.objects.filter(clt_id = clt_id).order_by('-create_time') 
        return render(request, "client-invoice.html", {'data': data, 'Username':Username, 'session_id':session_id, 'session_roleid':session_roleid,'comp_name':user_compeny, 'companey_list':master_company.objects.all(),'company_id': company_id, 'name':name}) # Assuming user_id field in tbl_lead corresponds to user's ID

        # else:
        #     return redirect(login)
    else:
        return redirect(login)
        

def open_client_payment_voucer_least_page(request, name, clt_id):
    name = name.replace('', '') 
    
    if 'session_id' in request.session:
        company_id = request.session['company_id']
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']  # Retrieve session_id from session
        user_compeny = request.session['user_compney']
        
        # from_date = request.GET.get('fromDate')
        # to_date = request.GET.get('toDate')
        
        # if session_id and session_roleid: 
        #     if session_roleid == "1" or session_roleid == "11" :
        #         if company_id == 0:
        #             data = tbl_payment_v.objects.filter(clt_id = clt_id).order_by('-create_time')
        #         else:
        #             data = tbl_payment_v.objects.filter(company_id=company_id, clt_id = clt_id).order_by('-create_time') 
        #     else:
        #         data = tbl_payment_v.objects.filter(add_by_id=session_id, company_id=company_id, clt_id = clt_id ).order_by('-create_time')
        
        # if session_id and session_roleid:
        #     if session_roleid == "1" or session_roleid == "11":
        #         data = tbl_payment_v.objects.filter(clt_id = clt_id).order_by('-create_time')
        #     else:
        #         data = tbl_payment_v.objects.filter(company_id=company_id, clt_id = clt_id).order_by('-create_time')
        # else:
        #     data = tbl_payment_v.objects.filter(add_by_id=session_id, company_id=company_id, clt_id = clt_id ).order_by('-create_time')

        data = tbl_payment_v.objects.filter(clt_id = clt_id).order_by('-create_time')
        
        # payments = tbl_payment_v.objects.filter(clt_id=clt_id).values('vouch_num').annotate(latest_pv_id=Max('pv_id'))
        
        # payment_details = []
        # for payment in payments:
        #     payment_data = tbl_payment_v.objects.filter(
        #         vouch_num=payment['vouch_num'], pv_id=payment['latest_pv_id']
        #     ).first()
            
        #     if payment_data:
        #         payment_details.append(payment_data)
                
        return render(request, "client-payment.html", {
            'data': data,
            'name':name, 
            'Username': Username,
            'session_id': session_id,
            'session_roleid': session_roleid,
            'comp_name': user_compeny,
            'companey_list': master_company.objects.all(),
            'company_id': company_id,
            
            'clt_id':clt_id,
        }) 
            
        # else:
        #     return redirect(login)
    else:
        return redirect(login)
        

        
def open_client_recipt_voucer_least_page(request, name, clt_id):
    name = name.replace('', '')
    
    if 'session_id' in request.session:
        company_id = request.session['company_id']
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid') 
        user_compeny = request.session['user_compney']
        Username = request.session['session_user']
        
        # if session_id and session_roleid:
        #     if session_roleid == "1" or session_roleid == "11" :
        #         if company_id == 0:
        #             data = tbl_receive_v.objects.filter(clt_id = clt_id).order_by('-create_time') 
        #         else:
        #             data = tbl_receive_v.objects.filter(company_id=company_id, clt_id = clt_id).order_by('-create_time') 
        #     else:
        #         data = tbl_receive_v.objects.filter(add_by_id=session_id, company_id=company_id, clt_id = clt_id ).order_by('-create_time')
        
        # if session_id and session_roleid:
        #     if session_roleid == "1" or session_roleid == "11":
        #         data = tbl_receive_v.objects.filter(clt_id=clt_id).order_by('-create_time')
        #     else:
        #         data = tbl_receive_v.objects.filter(company_id=company_id, clt_id=clt_id).order_by('-create_time')
        # else:
        #     data = tbl_receive_v.objects.filter(add_by_id=session_id, company_id=company_id, clt_id=clt_id).order_by('-create_time')
        data = tbl_receive_v.objects.filter(clt_id=clt_id).order_by('-create_time')
        
        # receipts = tbl_receive_v.objects.filter(clt_id=clt_id).values('vouch_num').annotate(latest_rv_id=Max('rv_id'))
        
        # receipt_details = []
        # for receipt in receipts:
        #     receipt_data = tbl_receive_v.objects.filter(
        #         vouch_num=receipt['vouch_num'], rv_id=receipt['latest_rv_id']
        #     ).first()
            
        #     if receipt_data:
        #         receipt_details.append(receipt_data)
                
        return render(request, "client-receipt.html", {
            'data': data,
            'Username': Username,
            'session_id': session_id,
            'session_roleid': session_roleid,
            'comp_name': user_compeny,
            'companey_list': master_company.objects.all(),
            'company_id': company_id,
            'name':name,
            'clt_id':clt_id,
        })
        # else:
        #     return redirect(login)
    else:
        return redirect(login)
        
def invoice(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        products = master_product.objects.all()
        cites = master_city.objects.all()  
        companies = master_company.objects.all()  
        clients = master_client.objects.all() 
        units = master_unit.objects.all() 
        states = master_state.objects.all()
        company_id = request.session['company_id']
        
        # Generate the next invoice number
        last_invoice = tbl_invoice.objects.order_by('inv_id').last()
        if last_invoice:
            last_inv_number = last_invoice.invNumber 
            last_number = int(last_inv_number[1:])  # Extract number and convert to int
            next_number = last_number + 1
        else:
            next_number = 1  # Start from 1 if no invoices exist
        
        invoice_number = f"A{next_number:06d}"  # Format to "A000001"

        data = tbl_invoice.objects.all()
        return render(request, "open-invoice-leasting.html", {
            'data': data,
            'Username': Username,
            'products': products,
            'cites': cites,
            'comp_name': user_compeny,
            'session_roleid': session_roleid,
            'companey_list': master_company.objects.all(),
            'company_id': company_id,
            'companies': companies,
            'clients': clients,
            'states':states,
            'units': units,
            'invoice_number': invoice_number,  # Pass the invoice number to the template
        })
    else:
        return redirect(login)


def invoice_excel(request):
    if request.method == 'POST':
        from_date = request.POST.get('from_date')
        to_date = request.POST.get('to_date')

        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
            except ValueError:
                pass
        else:
            return HttpResponse("Please select a date.", status=404)
            
        invoice_entries = tbl_invoice.objects.filter(
            date__range=[from_date, to_date]
        )

        if invoice_entries.count() == 0:
            return HttpResponse("No records found for the given date range.", status=404)

        wb = Workbook()
        ws = wb.active
        ws.title = "Invoice Entries"

        headers = [ "Invoice Number", 
                    "Date",
                    "Company Name", 
                    "GST Number", 
                    
                    "client Name", 
                    "client Mail",
                    "client Number",
                    "client Address",
                    "client GST",
                    "client State",
        
                    "product Name",
                    "unit Of Measure",
                    "Quentity",
                    "hsn",
                    "rate",
                    "taxable Amount",
                    "GST Percentage",
                    "GST Amount",
                    "Total Amount",
                    
                    "cgst",
                    "sgst",
                    "igst",
                    "grandAmount"
]
        ws.append(headers)
        
        # users_dict = {user.userId: user.name for user in tbl_users2.objects.all()}

        for entry in invoice_entries:
            date = entry.date.strftime('%d/%m/%Y') if entry.date else 'N/A'

            # assigned_to_name = users_dict.get(entry.assign_to, 'N/A')
        
            ws.append([
                entry.invNumber,
                date,
                entry.compName,
                entry.compGst,
                
                entry.clientName,
                entry.clientMail,
                entry.clientMoNumber,
                entry.clientAddress,
                entry.clientGst,
                entry.clientState,
                
                entry.productName,
                entry.unitOfMeasure,
                entry.qty,
                entry.hsn,
                entry.rate,
                entry.taxableAmount,
                entry.gstPercentage,
                entry.gstAmount,
                entry.totalAmount,
                
                entry.cgst,
                entry.sgst,
                entry.igst,
                entry.grandAmount,
            ])

        response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        response['Content-Disposition'] = 'attachment; filename="Invoice-Report.xlsx"'
        wb.save(response)

        return response


def invoice_listing(request):
    if 'session_id' not in request.session:
        return redirect('login')

    session_id = request.session.get('session_id')
    session_roleid = request.session.get('session_roleid')
    states = master_state.objects.all()
    products = master_product.objects.all()
    units = master_unit.objects.all()

    # Base queryset based on role
    if set(session_roleid).intersection({"1"}):
        selected_company_id = request.session.get('selected_company_id', None)
        if selected_company_id:
            data = tbl_invoice.objects.filter(company_id=selected_company_id)
        else:
            data = tbl_invoice.objects.all()
    else:
        data = tbl_invoice.objects.all()
        
        
    # query = Q()
            
    #     if from_date or to_date:
    #         try:
    #             if from_date:
    #                 from_date = datetime.strptime(from_date, '%Y-%m-%d')
    #             else:
    #                 from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
    #             if to_date:
    #                 to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
    #             else:
    #                 to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
    #             if from_date > to_date:
    #                 from_date, to_date = to_date, from_date
                    
    #             query &= Q(create_time__range=[from_date, to_date])
                
    #         except ValueError:
    #             pass
            
    #     if invNumber:
    #         query |= Q(invNumber__icontains=invNumber)
    #     if date:
    #         query |= Q(date__icontains=date)
    #     if compName:
    #         query |= Q(compName__icontains=compName)
    #     if compAddress:
    #         query |= Q(compAddress__icontains=compAddress)
    #     if compMoNumber:
    #         query |= Q(compMoNumber__icontains=compMoNumber)
    #     if compGst:
    #         query |= Q(compGst__icontains=compGst)
    #     if clientName:
    #         query |= Q(clientName__icontains=clientName)
    #     if clientMail:
    #         query |= Q(clientMail__icontains=clientMail)
    #     if clientMoNumber:
    #         query |= Q(clientMoNumber__icontains=clientMoNumber)
    #     if clientAddress:
    #         query |= Q(clientAddress__icontains=clientAddress)
    #     if clientGst:
    #         query |= Q(clientGst__icontains=clientGst)
    #     if clientState:
    #         query |= Q(clientState__icontains=clientState)
    #     if productName:
    #         query |= Q(productName__icontains=productName)
    #     if unitOfMeasure:
    #         query |= Q(unitOfMeasure__icontains=unitOfMeasure)
    #     if qty:
    #         query |= Q(qty__icontains=qty)
    #     if hsn:
    #         query |= Q(hsn__icontains=hsn)
    #     if rate:
    #         query |= Q(rate__icontains=rate)
    #     if taxableAmount:
    #         query |= Q(taxableAmount__icontains=taxableAmount)
    #     if gstPercentage:
    #         query |= Q(gstPercentage__icontains=gstPercentage)
    #     if gstAmount:
    #         query |= Q(gstAmount__icontains=gstAmount)
    #     if grandAmount:
    #         query |= Q(grandAmount__icontains=grandAmount)

    # Filters
    date_range_filter = request.GET.get('date_range')
    invNumber = request.GET.get('invNumber')
    clientcom = request.GET.get('clientcom')
    compName = request.GET.get('compName')
    clientMail = request.GET.get('clientMail')
    clientMoNumber = request.GET.get('clientMoNumber')
    clientAddress = request.GET.get('clientAddress')
    clientGst = request.GET.get('clientGst')
    clientState = request.GET.get('clientState')
    productName = request.GET.get('productName')
    unitOfMeasure = request.GET.get('unitOfMeasure')
    qty = request.GET.get('qty')
    rate = request.GET.get('rate')
    grandAmount = request.GET.get('grandAmount')

    if date_range_filter:
        try:
            start_str, end_str = date_range_filter.split(' - ')
            start_date = parser.parse(start_str.strip())
            end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
            data = data.filter(create_time__gte=start_date, create_time__lte=end_date)
        except Exception as e:
            print(f"Date parsing error: {e}")

    if invNumber:
        data = data.filter(invNumber__icontains=invNumber)
    if clientcom:
        data = data.filter(clientcom__icontains=clientcom)
    if compName:
        data = data.filter(compName__icontains=compName)
    if clientMail:
        data = data.filter(clientMail__icontains=clientMail)
    if clientMoNumber:
        data = data.filter(clientMoNumber__icontains=clientMoNumber)
    if clientAddress:
        data = data.filter(clientAddress__icontains=clientAddress)
    if clientGst:
        data = data.filter(clientGst__icontains=clientGst)
    if clientState:
        data = data.filter(clientState__icontains=clientState)
    if productName:
        data = data.filter(productName__icontains=productName)
    if unitOfMeasure:
        data = data.filter(unitOfMeasure__icontains=unitOfMeasure)
    if qty:
        data = data.filter(qty__icontains=qty)
    if rate:
        data = data.filter(rate__icontains=rate)
    if grandAmount:
        data = data.filter(grandAmount__icontains=grandAmount)

    data = data.order_by('-invNumber')

    # Get only latest invoice per invNumber
    latest_invoices = data.values('invNumber').annotate(latest_inv_id=Max('inv_id'))

    # Fetch actual invoice records with client details
    invoice_details = []
    for invoice in latest_invoices:
        invoice_data = tbl_invoice.objects.filter(
            invNumber=invoice['invNumber'], inv_id=invoice['latest_inv_id']
        ).first()

        if invoice_data:
            client = master_client.objects.filter(clt_id=invoice_data.clt_id).first()
            invoice_data.comp_name = client.comp_name if client else "N/A"

        invoice_details.append(invoice_data)

    # Export to Excel if requested
    if request.GET.get('download') == 'excel':
        wb = Workbook()
        ws = wb.active
        ws.title = "Invoices"

        headers = [
            "Invoice Number", "Date", "Company Name", "Client Name", "Email", "Mobile Number",
            "Address", "GST Number", "State", "Product", "Unit Of Measure", "Quantity",
            "Rate", "Taxable Amount", "GST%", "GST Amount", "CGST", "SGST", "IGST", "Total Amount", "Grand Total", "Created Time"
        ]
        ws.append(headers)

        for lead in invoice_details:
            row = [
                lead.invNumber,
                lead.date.strftime("%Y-%m-%d %H:%M") if lead.date else '',
                lead.comp_name,
                lead.clientName,
                lead.clientMail,
                lead.clientMoNumber,
                lead.clientAddress,
                lead.clientGst,
                lead.clientState,
                lead.productName,
                lead.unitOfMeasure,
                lead.qty,
                lead.rate,
                lead.taxableAmount,
                lead.gstPercentage,
                lead.gstAmount,
                lead.cgst,
                lead.sgst,
                lead.igst,
                lead.totalAmount,
                lead.grandAmount,
                lead.create_time.strftime("%Y-%m-%d %H:%M") if lead.create_time else '',
            ]
            ws.append(row)

        # Autofit column widths
        for col in ws.columns:
            max_length = 0
            col_letter = get_column_letter(col[0].column)
            for cell in col:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            ws.column_dimensions[col_letter].width = max_length + 2

        response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        response["Content-Disposition"] = "attachment; filename=invoices_filtered.xlsx"
        wb.save(response)
        return response

    return render(request, "open-invoice-leasting1.html", {
        'data': invoice_details,
        'session_roleid': session_roleid,
        'states': states,
        'units': units,
        'products': products,
        'session_id': session_id
    })

# def create_invoice(request):
#     if 'session_id' in request.session:
#         Username = request.session['session_user']
#         session_id = request.session.get('session_id')
#         company_list = master_company.objects.all()
#         states = master_state.objects.all()

#         if request.method == 'POST':
#             inv_number = request.POST.get('invoiceNo')
#             date = request.POST.get('invoiceDate') or timezone.now()
#             comp_name = request.POST.get('company_name')
#             comp_address = request.POST.get('address1')
#             comp_mobile = request.POST.get('mobile')
#             gst_no = request.POST.get('gst_no')
#             client_name = request.POST.get('client_name')
#             client_email = request.POST.get('cMail')
#             client_mobile = request.POST.get('cNumber')
#             client_address = request.POST.get('cAddress')
#             client_gst = request.POST.get('cGst')
#             client_state = request.POST.get('cState')
#             products = request.POST.getlist('product')
#             unit_of_measures = request.POST.getlist('unitOfMeasure')
#             quantities = request.POST.getlist('quantity')
#             hsn_codes = request.POST.getlist('hsn')
#             rates = request.POST.getlist('rate')
#             taxable_amounts = request.POST.getlist('taxableAmount')
#             gst_percentages = request.POST.getlist('gstPercentage')
#             gst_amounts = request.POST.getlist('gstAmount')
#             total_amounts = request.POST.getlist('totalAmount')

#             company_n = master_company.objects.filter(com_name=comp_name).first()
#             company_id = company_n.com_id if company_n else None

#             clt_n = master_client.objects.filter(name=client_name).first()
#             clt_id = clt_n.clt_id if clt_n else None
            
#             grandAmount = sum(Decimal(total) for total in total_amounts)

#             with transaction.atomic():
#                 for i in range(len(products)):
#                     gst_amount = Decimal(gst_amounts[i])
#                     total_amount = Decimal(total_amounts[i])
                    
#                     if client_state.lower() == "gujarat":
#                         cgst = gst_amount / 2
#                         sgst = gst_amount / 2
#                         igst = 0
#                     else:
#                         cgst = 0
#                         sgst = 0
#                         igst = gst_amount

#                     invoice_item = tbl_invoice(
#                         invNumber=inv_number,
#                         date=date,
#                         compName=comp_name,
#                         compAddress=comp_address,
#                         compMoNumber=comp_mobile,
#                         clientName=client_name,
#                         clientMail=client_email,
#                         clientMoNumber=client_mobile,
#                         clientAddress=client_address,
#                         clientGst=client_gst,
#                         clientState=client_state,
#                         productName=products[i],
#                         unitOfMeasure=unit_of_measures[i],
#                         qty=Decimal(quantities[i]),
#                         hsn=hsn_codes[i],
#                         rate=Decimal(rates[i]),
#                         taxableAmount=Decimal(taxable_amounts[i]),
#                         gstPercentage=Decimal(gst_percentages[i]),
#                         gstAmount=gst_amount,
#                         totalAmount=total_amount,
#                         cgst=cgst,
#                         sgst=sgst,
#                         igst=igst,
#                         grandAmount=grandAmount,
#                         add_by_id=session_id,
#                         add_by_name=Username,
#                         create_time=timezone.now() + timedelta(hours=5, minutes=30),
#                         update_by_id=session_id,
#                         update_by_name=Username,
#                         compGst=gst_no,
#                         clt_id=clt_id,
#                         company_id=company_id,
#                     )
#                     invoice_item.save()

#                 if clt_id:
#                     tbl_payment_v.objects.filter(clt_id=clt_id, company_id=company_id).update(inv_number=inv_number)
                
#                 if clt_id:
#                     tbl_receive_v.objects.filter(clt_id=clt_id, company_id=company_id).update(inv_number=inv_number)
                    
#                 tbl_messages.objects.create(
#                     message_name = request.session['session_user'],
#                     change_status=f"Add invoice - {client_name}",
#                     added_date = timezone.now() + timedelta(hours=5, minutes=30),
#                     company_id = request.session['company_id']
#                 )
                
#             if client_mobile:
#                 # ph_no = str(client_mobile).strip()
#                 # company_obj = get_object_or_404(master_company, com_id=company_id)
#                 # company_name = company_obj.com_name.title()
#                 # lead_name = curr_data.c_name.title()
            
#                 # quatation_obj = tbl_quatation_history.objects.filter(l_id = l_id).order_by("-qu_id").first()
#                 # media_link = str(quatation_obj.file_name).strip()
#                 # quotation_link = f"https://shubhamsingh.in/new_crm/media/{media_link}"
#                 # response = send_whatsapp_message(
#                 #     ph_no, 
#                 #     message_type='template',
#                 #     template_name='quotauion_message_4',  # must match your registered WhatsApp template name
#                 #     template_params=[company_name, lead_name, quotation_link]
#                 # )
 
#                 ph_no = str(client_mobile).strip()
#                 company_obj = get_object_or_404(master_company, com_id=company_id)
#                 company_name = company_obj.com_name.title()
                
#                 # # Generate the invoice PDF file and save it
#                 # invoice_pdf_path = generate_invoice_pdf(inv_number)  # <-- Create this helper
#                 # invoice_link = f"https://yourdomain.com/media/invoices/{invoice_pdf_path}"
#                 date_str = date.strftime('%d-%m-%Y') if date else ''

#                 response = send_whatsapp_message(
#                 ph_no,
#                 message_type='template',
#                 template_name='invoice',  # Your registered template name
#                 template_params=[
#                     client_name.title(),
#                     company_name,
#                     inv_number,
#                     date_str,
#                     str(grandAmount),
#                     # invoice_link
#                 ]
#                 )  

#             return redirect(f"{reverse('invoice_listing')}?success=1")

#         return render(request, "open-invoice-listing.html", {
#             'company_list': company_list,
#             'states': states,
#             'is_edit': False,
#         })
#     else:
#         return redirect(login)
            
def create_invoice(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        session_id = request.session.get('session_id')
        selected_company_id = request.session.get('selected_company_id')
        company_list = master_company.objects.all()
        states = master_state.objects.all()

        if request.method == 'POST':
            if not selected_company_id or int(selected_company_id) == 0:
                return JsonResponse({'status': 'error', 'message': 'Please select a company first!'})
                
            inv_number = request.POST.get('invoiceNo')
            date_input = request.POST.get('invoiceDate')

            try:
                date = datetime.strptime(date_input, '%Y-%m-%d') if date_input else timezone.now()
            except ValueError:
                date = timezone.now()

            # comp_name = request.POST.get('company_name')
            # comp_address = request.POST.get('address1')
            # comp_mobile = request.POST.get('mobile')
            # gst_no = request.POST.get('gst_no')
            client_com = request.POST.get('client_com')
            client_email = request.POST.get('cMail')
            client_mobile = request.POST.get('cNumber')
            client_address = request.POST.get('cAddress')
            client_gst = request.POST.get('cGst')
            client_state = request.POST.get('cState')
            products = request.POST.getlist('product')
            unit_of_measures = request.POST.getlist('unitOfMeasure')
            quantities = request.POST.getlist('quantity')
            hsn_codes = request.POST.getlist('hsn')
            rates = request.POST.getlist('rate')
            taxable_amounts = request.POST.getlist('taxableAmount')
            gst_percentages = request.POST.getlist('gstPercentage')
            gst_amounts = request.POST.getlist('gstAmount')
            total_amounts = request.POST.getlist('totalAmount')

            # company_n = master_company.objects.filter(com_name=comp_name).first()
            # company_id = company_n.com_id if company_n else None
            
            try:
                company_obj = master_company.objects.get(com_id=selected_company_id)
            except master_company.DoesNotExist:
                return JsonResponse({'status': 'error', 'message': 'Selected company not found!'})
                
            comp_name = company_obj.com_name
            comp_address = company_obj.address
            comp_mobile = company_obj.mobile
            gst_no = company_obj.gst_no

            clt_n = master_client.objects.filter(comp_name=client_com).first()
            clt_id = clt_n.clt_id if clt_n else None
            name = clt_n.name if clt_n else None

            grandAmount = sum(Decimal(total) for total in total_amounts)

            with transaction.atomic():
                for i in range(len(products)):
                    gst_amount = Decimal(gst_amounts[i])
                    total_amount = Decimal(total_amounts[i])

                    if client_state.lower() == "gujarat":
                        cgst = gst_amount / 2
                        sgst = gst_amount / 2
                        igst = 0
                    else:
                        cgst = 0
                        sgst = 0
                        igst = gst_amount

                    invoice_item = tbl_invoice(
                        invNumber=inv_number,
                        date=date,
                        compName=comp_name or None,
                        compAddress=comp_address or None,
                        compMoNumber=comp_mobile or None,
                        clientcom=client_com,
                        clientName=name,
                        clientMail=client_email,
                        clientMoNumber=client_mobile,
                        clientAddress=client_address,
                        clientGst=client_gst,
                        clientState=client_state,
                        productName=products[i],
                        unitOfMeasure=unit_of_measures[i],
                        qty=Decimal(quantities[i]),
                        hsn=hsn_codes[i],
                        rate=Decimal(rates[i]),
                        taxableAmount=Decimal(taxable_amounts[i]),
                        gstPercentage=Decimal(gst_percentages[i]),
                        gstAmount=gst_amount,
                        totalAmount=total_amount,
                        cgst=cgst,
                        sgst=sgst,
                        igst=igst,
                        grandAmount=grandAmount,
                        add_by_id=session_id,
                        add_by_name=Username,
                        create_time=timezone.now() + timedelta(hours=5, minutes=30),
                        update_by_id=session_id,
                        update_by_name=Username,
                        compGst=gst_no or None,
                        clt_id=clt_id,
                        company_id=selected_company_id,
                    )
                    invoice_item.save()

                # if clt_id:
                #     tbl_payment_v.objects.filter(clt_id=clt_id, company_id=company_id).update(inv_number=inv_number)
                #     tbl_receive_v.objects.filter(clt_id=clt_id, company_id=company_id).update(inv_number=inv_number)
                
                ip_address = get_client_ip(request)
                tbl_messages.objects.create(
                    message_name=request.session['session_user'],
                    change_status=f"Add invoice - {client_com}",
                    added_date=timezone.now() + timedelta(hours=5, minutes=30),
                    company_id=request.session['company_id'],
                    user_id = request.session['session_id'],
                    ip_address = ip_address,
                )

            # if client_mobile:
            #     ph_no = str(client_mobile).strip()
            #     company_obj = get_object_or_404(master_company, com_id=selected_company_id)
            #     company_name = company_obj.com_name.title()
            #     date_str = date.strftime('%d-%m-%Y')
            #     inv_pdf = f"https://shubhamsingh.in/new_crm/invoice_share/{inv_number}/"

            #     response = send_whatsapp_message(
            #         ph_no,
            #         message_type='template',
            #         # template_name='invoice',  # Make sure this is registered in WhatsApp Business API
            #         template_name='test_invoice',  # Make sure this is registered in WhatsApp Business API
            #         template_params=[
            #             client_name.title(),
            #             company_name,
            #             str(inv_pdf),
            #         ]
            #     )

            return redirect(f"{reverse('invoice_listing')}?success=1")

        return render(request, "open-invoice-listing.html", {
            'company_list': company_list,
            'states': states,
            'is_edit': False,
        })
    else:
        return redirect(login)

def edit_invoice(request, inv_id):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        
        invoice = get_object_or_404(tbl_invoice, inv_id=inv_id)
        
        invoice_entries = tbl_invoice.objects.filter(invNumber=invoice.invNumber)

        if request.method == 'POST':
            invoice.invNumber = request.POST.get('invoiceNo')
            invoice.date = request.POST.get('invoiceDate') or timezone.now()
            # invoice.compName = request.POST.get('company_name')
            # invoice.compAddress = request.POST.get('address1')
            # invoice.compMoNumber = request.POST.get('mobile')
            invoice.clientcom = request.POST.get('client_com')
            invoice.clientMail = request.POST.get('cMail')
            invoice.clientMoNumber = request.POST.get('cNumber')
            invoice.clientAddress = request.POST.get('cAddress')
            invoice.clientGst = request.POST.get('cGst')
            invoice.clientState = request.POST.get('cState')
            # invoice.compGst = request.POST.get('gst_no')
            
            # company_n = master_company.objects.filter(com_name=invoice.compName).first()
            # if company_n:
            #     company_id = company_n.com_id
            # else:
            #     messages.error(request, "Company not found.")
            #     return redirect('invoice_listing')

            clt_n = master_client.objects.filter(comp_name=invoice.clientcom).first()
            if clt_n:
                clt_id = clt_n.clt_id
                name = clt_n.name
            else:
                messages.error(request, "Client not found.")
                return redirect('invoice_listing')
                
            product_list = request.POST.getlist('product')
            unit_list = request.POST.getlist('unitOfMeasure')
            qty_list = request.POST.getlist('quantity')
            hsn_list = request.POST.getlist('hsn')
            rate_list = request.POST.getlist('rate')
            taxable_list = request.POST.getlist('taxableAmount')
            gst_percent_list = request.POST.getlist('gstPercentage')
            gst_amount_list = request.POST.getlist('gstAmount')
            total_list = request.POST.getlist('totalAmount')
            item_ids = request.POST.getlist('invoice_item_id') 
            deleted_items = request.POST.get('deletedItems', '')
            
            if deleted_items:
                deleted_ids = [int(i) for i in deleted_items.split(',') if i.isdigit()]
                if deleted_ids:
                    tbl_invoice.objects.filter(inv_id__in=deleted_ids).delete()
                
            grandAmount = sum(Decimal(total) for total in total_list)
            
            for i in range(len(product_list)):
                item_id = item_ids[i] if i < len(item_ids) and item_ids[i] else None
            
                if item_id:
                    try:
                        invoice_item = tbl_invoice.objects.get(pk=item_id, invNumber=invoice.invNumber)
                    except tbl_invoice.DoesNotExist:
                        invoice_item = tbl_invoice()
                else:
                    invoice_item = tbl_invoice()

                # Assign all fields
                invoice_item.invNumber = invoice.invNumber
                invoice_item.date = invoice.date
                invoice_item.clientcom = invoice.clientcom
                invoice_item.clientName = name
                invoice_item.clientMail = invoice.clientMail
                invoice_item.clientMoNumber = invoice.clientMoNumber
                invoice_item.clientAddress = invoice.clientAddress
                invoice_item.clientGst = invoice.clientGst
                invoice_item.clientState = invoice.clientState
                invoice_item.productName = product_list[i]
                invoice_item.unitOfMeasure = unit_list[i]
                invoice_item.qty = Decimal(qty_list[i])
                invoice_item.hsn = hsn_list[i]
                invoice_item.rate = Decimal(rate_list[i])
                invoice_item.taxableAmount = Decimal(taxable_list[i])
                invoice_item.gstPercentage = Decimal(gst_percent_list[i])
                invoice_item.gstAmount = Decimal(gst_amount_list[i])
                invoice_item.totalAmount = Decimal(total_list[i])

                gst_amount = Decimal(gst_amount_list[i])
                if invoice.clientState.strip().lower() == "gujarat":
                    invoice_item.cgst = gst_amount / 2
                    invoice_item.sgst = gst_amount / 2
                    invoice_item.igst = 0
                else:
                    invoice_item.cgst = 0
                    invoice_item.sgst = 0
                    invoice_item.igst = gst_amount

                invoice_item.grandAmount = grandAmount
                invoice_item.update_by_id = session_id
                invoice_item.update_by_name = Username
                invoice_item.clt_id = clt_id

                invoice_item.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name=request.session['session_user'],
                change_status=f"Edit invoice - {invoice.clientName}",
                added_date=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

            return redirect(f"{reverse('invoice_listing')}?success1=1")

        products = master_product.objects.all()
        companies = master_company.objects.all()
        clients = master_client.objects.all()
        units = master_unit.objects.all()
        states = master_state.objects.all()

        return render(request, "open-invoice-leasting.html", {
            'invoice': invoice,
            'invoice_entries': invoice_entries,
            'products': products,
            'companies': companies,
            'clients': clients,
            'units': units,
            'states': states,
            'invoice_number': invoice.invNumber,
            'session_roleid': session_roleid,
            'company_id': request.session['company_id'],
            'is_edit': True,
        })
    else:
        return redirect('login')
        
def delete_invoice(request, inv_id):
    if 'session_id' in request.session:
        invoice = get_object_or_404(tbl_invoice, inv_id=inv_id)
        related_invoices = tbl_invoice.objects.filter(invNumber=invoice.invNumber)
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete invoice - {invoice.clientName}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
                
        related_invoices.delete()
        return JsonResponse({'success': True, 'inv_id': inv_id, 'name': invoice.clientcom})
        # return redirect(f"{reverse('invoice_listing')}?success2=1")
    else:
        return redirect(login)
        
# utils.py (or directly in your views.py for simplicity)
# def number_to_words(n):
#     if n < 0:
#         return "minus " + number_to_words(-n)

#     words = {
#         0: "zero", 1: "one", 2: "two", 3: "three", 4: "four", 5: "five",
#         6: "six", 7: "seven", 8: "eight", 9: "nine", 10: "ten",
#         11: "eleven", 12: "twelve", 13: "thirteen", 14: "fourteen",
#         15: "fifteen", 16: "sixteen", 17: "seventeen", 18: "eighteen",
#         19: "nineteen", 20: "twenty", 30: "thirty", 40: "forty",
#         50: "fifty", 60: "sixty", 70: "seventy", 80: "eighty", 90: "ninety"
#     }

#     if n < 20:
#         return words[n]
    
#     if n < 100:
#         return words[n // 10 * 10] + ('' if n % 10 == 0 else ' ' + words[n % 10])
    
#     if n < 1000:
#         return words[n // 100] + ' hundred' + ('' if n % 100 == 0 else ' and ' + number_to_words(n % 100))

#     if n < 1000000:
#         return number_to_words(n // 1000) + ' thousand' + ('' if n % 1000 == 0 else ' ' + number_to_words(n % 1000))

#     return number_to_words(n // 1000000) + ' million' + ('' if n % 1000000 == 0 else ' ' + number_to_words(n % 1000000))


def invoice_pdf(request, invNumber):
    # Check if the user is logged in
    if 'session_id' not in request.session:
        return redirect('login')

    # Retrieve session variables
    session_roleid = request.session.get('session_roleid')

    # Get the invoice data or return a 404 if not found
    invoice = tbl_invoice.objects.filter(invNumber=invNumber).first()
    if not invoice:
        return render(request, "no_records.html", {'message': "No invoice records found."})

    # Get company details based on the invoice
    product_details = master_company.objects.filter(com_id=invoice.company_id).first()

    # Extract relevant company information
    company_name = product_details.com_name
    company_contact = {
        'email': product_details.email,
        'mobile': product_details.mobile,
        'gst_no': product_details.gst_no,
        'bank_name': product_details.bank_name,
        'acc_no': product_details.acc_no,
        'ifsc_code': product_details.ifsc_code,
        'branch_name': product_details.branch_name,
    }

    # Extract client and invoice details
    client_details = {
        'name': invoice.clientcom,
        'address': invoice.clientAddress,
        'state': invoice.clientState,
        'gst_no': invoice.clientGst,
    }
    invoice_date = invoice.date
    invoice_no = invoice.invNumber

    # Fetch all invoice items related to the invoice
    invoice_items = tbl_invoice.objects.filter(invNumber=invNumber)

    # Calculate totals
    total_amount = sum(item.totalAmount for item in invoice_items)
    # total_in_words = number_to_words(total_amount)  # Assuming you have a utility function for this

    tax_total = sum(item.taxableAmount for item in invoice_items)

    # Get CGST, SGST, IGST directly from the invoice
    cgst = sum(item.cgst for item in invoice_items)
    sgst = sum(item.sgst for item in invoice_items)
    igst = sum(item.igst for item in invoice_items)

    # Calculate the number of blank rows to maintain table structure
    blank_rows = max(10 - invoice_items.count(), 0)

    # Prepare a list for blank rows
    blank_rows_list = [''] * blank_rows  # Create a list with empty strings for blank rows

    # Render the invoice PDF page with the relevant context
    return render(request, "invoice-pdf.html", {
        'data': invoice_items,
        'company_name': company_name,
        'company_contact': company_contact,
        'client_details': client_details,
        'invoice_date': invoice_date,
        'invoice_no': invoice_no,
        'tax_total': tax_total,
        'session_roleid': session_roleid,
        'grand_total': total_amount,
        # 'total_in_words': total_in_words,
        'blank_rows': blank_rows_list,
        'cgst': cgst,
        'sgst': sgst,
        'igst': igst,
    })


def invoice_pdf_share(request, invNumber):
    # Check if the user is logged in
    if 'session_id' not in request.session:
        return redirect('login')

    # Retrieve session variables
    session_roleid = request.session.get('session_roleid')

    # Get the invoice data or return a 404 if not found
    invoice = tbl_invoice.objects.filter(invNumber=invNumber).first()
    if not invoice:
        return render(request, "no_records.html", {'message': "No invoice records found."})

    # Get company details based on the invoice
    product_details = master_company.objects.filter(com_id=invoice.company_id).first()

    # Extract relevant company information
    company_name = product_details.com_name
    company_contact = {
        'email': product_details.email,
        'mobile': product_details.mobile,
        'gst_no': product_details.gst_no,
        'bank_name': product_details.bank_name,
        'acc_no': product_details.acc_no,
        'ifsc_code': product_details.ifsc_code,
        'branch_name': product_details.branch_name,
    }

    # Extract client and invoice details
    client_details = {
        'name': invoice.clientcom,
        'address': invoice.clientAddress,
        'state': invoice.clientState,
        'gst_no': invoice.clientGst,
    }
    invoice_date = invoice.date
    invoice_no = invoice.invNumber

    # Fetch all invoice items related to the invoice
    invoice_items = tbl_invoice.objects.filter(invNumber=invNumber)

    # Calculate totals
    total_amount = sum(item.totalAmount for item in invoice_items)
    # total_in_words = number_to_words(total_amount)  # Assuming you have a utility function for this

    tax_total = sum(item.taxableAmount for item in invoice_items)

    # Get CGST, SGST, IGST directly from the invoice
    cgst = sum(item.cgst for item in invoice_items)
    sgst = sum(item.sgst for item in invoice_items)
    igst = sum(item.igst for item in invoice_items)

    # Calculate the number of blank rows to maintain table structure
    blank_rows = max(10 - invoice_items.count(), 0)

    # Prepare a list for blank rows
    blank_rows_list = [''] * blank_rows  # Create a list with empty strings for blank rows

    # Render the invoice PDF page with the relevant context
    return render(request, "invoice-pdf-share.html", {
        'data': invoice_items,
        'company_name': company_name,
        'company_contact': company_contact,
        'client_details': client_details,
        'invoice_date': invoice_date,
        'invoice_no': invoice_no,
        'tax_total': tax_total,
        'session_roleid': session_roleid,
        'grand_total': total_amount,
        # 'total_in_words': total_in_words,
        'blank_rows': blank_rows_list,
        'cgst': cgst,
        'sgst': sgst,
        'igst': igst,
    })
 
def payment_report(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        client_data = master_client.objects.all()
        
        if request.method == "POST":
            date_range = request.POST.get('date_range')
            from_date = to_date = None
            client_id = request.POST.get('client')
            
            query = Q()
            
            try:
                if date_range:
                    date_range = date_range.replace('+', ' ')  # handle URL-encoded spaces
                    start_str, end_str = date_range.split(' - ')
                    from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0, microsecond=0)
                    to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
            
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
            
                    query &= Q(payment_date__range=[from_date, to_date])
            except Exception as e:
                messages.error(request, "Invalid date format. Please use yyyy-mm-dd - yyyy-mm-dd.")
                return render(request, "payment_report.html", {
                    'session_roleid': session_roleid,
                    'client_data': client_data
                })
            
            # try:
            #     if from_date or to_date:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                        
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(payment_date__range=[from_date, to_date])
                    
            # except ValueError:
            #     messages.error(request, "Invalid date format. Please use dd/mm/yyyy.")
            #     return render(request, "payment_report.html", {
            #         'session_roleid': session_roleid,
            #         'client_data': client_data
            #     })
                
            if client_id != 'ALL' and client_id:
                query &= Q(clt_id=client_id)
                
            if request.POST.get('action') == 'search':
                payments = tbl_payment_v.objects.filter(query).order_by('vouch_num')
                company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}
                
                seen_vouchers = set()
                unique_payments = []
                total_amount_sum = 0
                
                for payment in payments:
                    if payment.vouch_num not in seen_vouchers:
                        unique_payments.append(payment)
                        seen_vouchers.add(payment.vouch_num)
                        total_amount_sum += float(payment.total_amount or 0)
                        
                    if payment.client_type =="Client":
                        clt_company_name = company_dict.get(payment.clt_id, 'N/A') 
                    else:
                        clt_company_name = payment.comp_name if payment.comp_name else 'N/A'
                        
                    payment.clt_company_name = clt_company_name
                            
                if not unique_payments:
                    messages.error(request, "No data available for the given date range.")
                    return render(request, "payment_report.html", {
                        'session_roleid': session_roleid,
                        'client_data': client_data,
                        'payments': unique_payments,
                        'total_amount_sum': 0
                    })
                    
                return render(request, "payment_report.html", {
                    'session_roleid': session_roleid,
                    'client_data': client_data,
                    'payments': unique_payments,
                    'total_amount_sum': total_amount_sum
                })
                
            elif request.POST.get('action') == 'download':
                
                payments = tbl_payment_v.objects.filter(query).order_by('vouch_num')
                
                if not payments:
                    messages.error(request, "No data available for the given date range.")
                    return render(request, "payment_report.html", {
                        'session_roleid': session_roleid, 
                        'client_data': client_data
                    })
                    
                response = HttpResponse(content_type='application/pdf')
                response['Content-Disposition'] = 'attachment; filename="Payment-Voucher-Report.pdf"'
                p = canvas.Canvas(response, pagesize=letter)
                width, height = letter
                
                p.setFont("Helvetica-Bold", 16)
                title = "Payment Report"
                title_width = p.stringWidth(title, "Helvetica-Bold", 16)
                p.drawString((width - title_width) / 2, height - 40, title)
                
                if from_date and to_date:
                    date_range = f"From: {from_date.strftime('%d/%m/%Y')} To: {to_date.strftime('%d/%m/%Y')}"
                else:
                    date_range = "No date range selected"
                p.setFont("Helvetica", 10)
                date_range_width = p.stringWidth(date_range, "Helvetica", 10)
                p.drawString((width - date_range_width) / 2, height - 60, date_range)
                
                if client_id != 'ALL' and client_id:
                    try:
                        client = master_client.objects.get(clt_id=client_id)
                        client_name = client.name if client else 'Unknown Client'
                    except master_client.DoesNotExist:
                        client_name = 'Client Not Found'
                else:
                    client_name = 'All Clients'
                    
                p.setFont("Helvetica", 10)
                client_name_text = f"Client: {client_name}"
                client_name_width = p.stringWidth(client_name_text, "Helvetica", 10)
                p.drawString((width - client_name_width) / 2, height - 80, client_name_text)

                p.setFont("Helvetica-Bold", 10)
                headers = ["Payment Date", "Voucher No", "Company Name", "Total"]
                x_positions = [
                    (width - 500) / 2,            # Payment Date
                    (width - 500) / 2 + 90,       # Voucher No
                    (width - 500) / 2 + 200,      # Company Name
                    (width - 500) / 2 + 400       # Total
                ]

                y_position = height - 100
                for i, header in enumerate(headers):
                    p.drawString(x_positions[i], y_position, header)

                y_position -= 20
                p.setFont("Helvetica", 9)

                seen_vouchers = set()
                total_amount_sum = 0
                company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}

                for payment in payments:
                    if payment.vouch_num not in seen_vouchers:
                        if y_position < 50:
                            p.showPage()
                            y_position = height - 50
                            p.setFont("Helvetica-Bold", 10)
                            for i, header in enumerate(headers):
                                p.drawString(x_positions[i], y_position, header)
                            y_position -= 20
                            p.setFont("Helvetica", 9)

                        payment_date = payment.payment_date.strftime('%d/%m/%Y') if payment.payment_date else 'N/A'
                        company_name = (
                            company_dict.get(payment.clt_id, 'N/A')
                            if payment.client_type == "Client"
                            else (payment.comp_name if payment.comp_name else 'N/A')
                        )
                        client_name = payment.name or 'N/A'
                        total = float(payment.total_amount or 0)
                        total_amount_sum += total

                        # Line 1: Payment Info
                        p.drawString(x_positions[0], y_position, payment_date)
                        p.drawString(x_positions[1], y_position, payment.vouch_num)
                        p.drawString(x_positions[2], y_position, company_name)
                        p.drawString(x_positions[3], y_position, f"{total:.2f}")
                        y_position -= 12

                        # Line 2: Client name, indented
                        p.drawString(x_positions[2], y_position, f"Client: {client_name}")
                        y_position -= 15

                        seen_vouchers.add(payment.vouch_num)

                # Final total
                if y_position < 50:
                    p.showPage()
                    y_position = height - 50

                p.setFont("Helvetica-Bold", 10)
                p.drawString(x_positions[2], y_position, "Grand Total:")
                p.drawString(x_positions[3], y_position, f"{total_amount_sum:.2f}")

                p.showPage()
                p.save()
                return response
            
        return render(request, "payment_report.html", { 
            'session_roleid': session_roleid, 
            'client_data': client_data
        })
    else:
        return redirect('login')
 
def receipt_report(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        client_data = master_client.objects.all()
        
        if request.method == "POST":
            date_range = request.POST.get('date_range')
            from_date = to_date = None
            client_id = request.POST.get('client')
            
            query = Q()
            
            try:
                if date_range:
                    date_range = date_range.replace('+', ' ')  # handle URL-encoded spaces
                    start_str, end_str = date_range.split(' - ')
                    from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0, microsecond=0)
                    to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
            
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
            
                    query &= Q(payment_date__range=[from_date, to_date])
            except Exception as e:
                messages.error(request, "Invalid date format. Please use yyyy-mm-dd - yyyy-mm-dd.")
                return render(request, "receipt_report.html", {
                    'session_roleid': session_roleid,
                    'client_data': client_data
                })
            
            # try:
            #     if from_date or to_date:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                        
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(payment_date__range=[from_date, to_date])
                    
            # except ValueError:
            #     messages.error(request, "Invalid date format. Please use dd/mm/yyyy.")
            #     return render(request, "receipt_report.html", {
            #         'session_roleid': session_roleid,
            #         'client_data': client_data
            #     })
                
            if client_id != 'ALL' and client_id:
                query &= Q(clt_id=client_id)
            
            if request.POST.get('action') == 'search':
                receipts = tbl_receive_v.objects.filter(query).order_by('vouch_num')
                company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}
                
                seen_vouchers = set()
                unique_receipts = []
                total_amount_sum = 0
                
                for receipt in receipts:
                    if receipt.vouch_num not in seen_vouchers:
                        unique_receipts.append(receipt)
                        seen_vouchers.add(receipt.vouch_num)
                        total_amount_sum += float(receipt.total_amount or 0)
                        
                    if receipt.client_type =="Client":
                        clt_company_name = company_dict.get(receipt.clt_id, 'N/A') 
                    else:
                        clt_company_name = receipt.comp_name if receipt.comp_name else 'N/A'
                        
                    receipt.clt_company_name = clt_company_name
                        
                if not unique_receipts:
                    messages.error(request, "No data available for the given date range.")
                    return render(request, "receipt_report.html", {
                        'session_roleid': session_roleid,
                        'client_data': client_data,
                        'receipts': unique_receipts,
                        'total_amount_sum': 0
                    })
                    
                return render(request, "receipt_report.html", {
                    'session_roleid': session_roleid,
                    'client_data': client_data,
                    'receipts': unique_receipts,
                    'total_amount_sum': total_amount_sum
                })
                
            elif request.POST.get('action') == 'download':
            
                receipts = tbl_receive_v.objects.filter(query).order_by('vouch_num')
                if not receipts:
                    messages.error(request, "No data available for the given date range.")
                    return render(request, "receipt_report.html", {
                        'session_roleid': session_roleid, 
                        'client_data': client_data
                    })
                    
                response = HttpResponse(content_type='application/pdf')
                response['Content-Disposition'] = 'attachment; filename="Receipt-Voucher-Report.pdf"'
                p = canvas.Canvas(response, pagesize=letter)
                width, height = letter
                
                p.setFont("Helvetica-Bold", 16)
                title = "Receipt Report"
                title_width = p.stringWidth(title, "Helvetica-Bold", 16)
                p.drawString((width - title_width) / 2, height - 40, title)
                
                if from_date and to_date:
                    date_range = f"From: {from_date.strftime('%d/%m/%Y')} To: {to_date.strftime('%d/%m/%Y')}"
                else:
                    date_range = "No date range selected"
                p.setFont("Helvetica", 10)
                date_range_width = p.stringWidth(date_range, "Helvetica", 10)
                p.drawString((width - date_range_width) / 2, height - 60, date_range)
                
                if client_id != 'ALL' and client_id:
                    try:
                        client = master_client.objects.get(clt_id=client_id)
                        client_name = client.name if client else 'Unknown Client'
                    except master_client.DoesNotExist:
                        client_name = 'Client Not Found'
                else:
                    client_name = 'All Clients'
                    
                # p.setFont("Helvetica", 10)
                # client_name_text = f"Client: {client_name}"
                # client_name_width = p.stringWidth(client_name_text, "Helvetica", 10)
                # p.drawString((width - client_name_width) / 2, height - 80, client_name_text)
                
                p.setFont("Helvetica", 10)
                client_name_text = f"Client: {client_name}"
                client_name_width = p.stringWidth(client_name_text, "Helvetica", 10)
                p.drawString((width - client_name_width) / 2, height - 80, client_name_text)

                p.setFont("Helvetica-Bold", 10)
                headers = ["Payment Date", "Voucher No", "Company Name", "Total"]
                x_positions = [
                    (width - 500) / 2,            # Payment Date
                    (width - 500) / 2 + 90,       # Voucher No
                    (width - 500) / 2 + 200,      # Company Name
                    (width - 500) / 2 + 400       # Total
                ]

                y_position = height - 100
                for i, header in enumerate(headers):
                    p.drawString(x_positions[i], y_position, header)

                y_position -= 20
                p.setFont("Helvetica", 9)

                seen_vouchers = set()
                total_amount_sum = 0
                company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}

                for receipt in receipts:
                    if receipt.vouch_num not in seen_vouchers:
                        if y_position < 50:
                            p.showPage()
                            y_position = height - 50
                            p.setFont("Helvetica-Bold", 10)
                            for i, header in enumerate(headers):
                                p.drawString(x_positions[i], y_position, header)
                            y_position -= 20
                            p.setFont("Helvetica", 9)

                        payment_date = receipt.payment_date.strftime('%d/%m/%Y') if receipt.payment_date else 'N/A'
                        company_name = (
                            company_dict.get(receipt.clt_id, 'N/A')
                            if receipt.client_type == "Client"
                            else (receipt.comp_name if receipt.comp_name else 'N/A')
                        )
                        client_name = receipt.name or 'N/A'
                        total = float(receipt.total_amount or 0)
                        total_amount_sum += total

                        # Line 1: Payment Info
                        p.drawString(x_positions[0], y_position, payment_date)
                        p.drawString(x_positions[1], y_position, receipt.vouch_num)
                        p.drawString(x_positions[2], y_position, company_name)
                        p.drawString(x_positions[3], y_position, f"{total:.2f}")
                        y_position -= 12

                        # Line 2: Client name, indented
                        p.drawString(x_positions[2], y_position, f"Client: {client_name}")
                        y_position -= 15

                        seen_vouchers.add(receipt.vouch_num)

                # Final total
                if y_position < 50:
                    p.showPage()
                    y_position = height - 50

                p.setFont("Helvetica-Bold", 10)
                p.drawString(x_positions[2], y_position, "Grand Total:")
                p.drawString(x_positions[3], y_position, f"{total_amount_sum:.2f}")
                        
                p.showPage()
                p.save()
                
                return response
            
        return render(request, "receipt_report.html", {
            'session_roleid': session_roleid, 
            'client_data': client_data
        })
    else:
        return redirect('login')
 
def ledger(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        client_data = master_client.objects.all()
        
        if request.method == "POST":
            # from_date = request.POST.get('from_date')
            # to_date = request.POST.get('to_date')
            date_range = request.POST.get('date_range')
            from_date = to_date = None
            client_id = request.POST.get('client')
            
            query = Q()
            
            try:
                if date_range:
                    date_range = date_range.replace('+', ' ')  # handle URL-encoded spaces
                    start_str, end_str = date_range.split(' - ')
                    from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0, microsecond=0)
                    to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
            
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
            
                    query &= Q(payment_date__range=[from_date, to_date])
            except Exception as e:
                messages.error(request, "Invalid date format. Please use yyyy-mm-dd - yyyy-mm-dd.")
                return render(request, "open-ledger.html", {
                    'session_roleid': session_roleid,
                    'client_data': client_data
                })
            
            # try:
            #     if from_date or to_date:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                        
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(payment_date__range=[from_date, to_date])
                    
            # except ValueError:
            #     messages.error(request, "Invalid date format. Please use dd/mm/yyyy.")
            #     return render(request, "open-ledger.html", {
            #         'session_roleid': session_roleid,
            #         'client_data': client_data
            #     })
                
            if client_id != 'ALL' and client_id:
                query &= Q(clt_id=client_id)
                
            if request.POST.get('action') == 'search':
                receipts = tbl_receive_v.objects.filter(query).order_by('vouch_num')
                payments = tbl_payment_v.objects.filter(query).order_by('vouch_num')
                
                company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}
                
                seen_receipts_vouchers = set()
                unique_receipts = []
                total_payment_amount = 0
                total_receipt_amount = 0
                
                for receipt in receipts:
                    if receipt.vouch_num not in seen_receipts_vouchers:
                        unique_receipts.append(receipt)
                        seen_receipts_vouchers.add(receipt.vouch_num)
                        total_receipt_amount += float(receipt.total_amount or 0)
                        
                    if receipt.client_type =="Client":
                        clt_company_name = company_dict.get(receipt.clt_id, 'N/A') 
                    else:
                        clt_company_name = receipt.comp_name if receipt.comp_name else 'N/A'
                        
                    receipt.clt_company_name = clt_company_name
                
                seen_payments_vouchers = set()
                unique_payments = []
                
                for payment in payments:
                    if payment.vouch_num not in seen_payments_vouchers:
                        unique_payments.append(payment)
                        seen_payments_vouchers.add(payment.vouch_num)
                        total_payment_amount += float(payment.total_amount or 0)
                        
                    if payment.client_type =="Client":
                        clt_company_name = company_dict.get(payment.clt_id, 'N/A') 
                    else:
                        clt_company_name = payment.comp_name if payment.comp_name else 'N/A'
                        
                    payment.clt_company_name = clt_company_name
                
                if not unique_receipts and not unique_payments:
                    messages.error(request, "No data available for the given date range.")
                    return render(request, "open-ledger.html", {
                        'session_roleid': session_roleid,
                        'client_data': client_data,
                        'receipts': unique_receipts,
                        'payments': unique_payments,
                        'total_payment_amount': 0,
                        'total_receipt_amount': 0
                    })
                
                return render(request, "open-ledger.html", {
                    'session_roleid': session_roleid,
                    'client_data': client_data,
                    'receipts': unique_receipts,
                    'payments': unique_payments,
                    'total_receipt_amount': total_receipt_amount,
                    'total_payment_amount': total_payment_amount
                })
                
            elif request.POST.get('action') == 'download':
                
                payments = tbl_payment_v.objects.filter(query).order_by('vouch_num')
                receipts = tbl_receive_v.objects.filter(query).order_by('vouch_num')
                
                if not payments and not receipts:
                    messages.error(request, "No data available for the given date range.")
                    return render(request, "open-ledger.html", {
                        'session_roleid': session_roleid, 
                        'client_data': client_data
                    })
                    
                response = HttpResponse(content_type='application/pdf')
                response['Content-Disposition'] = 'attachment; filename="Voucher-Report.pdf"'
                
                p = canvas.Canvas(response, pagesize=letter)
                width, height = letter
                
                p.setFont("Helvetica-Bold", 16)
                title = "Ledger Report"
                title_width = p.stringWidth(title, "Helvetica-Bold", 16)
                p.drawString((width - title_width) / 2, height - 40, title)
                
                if from_date and to_date:
                    date_range = f"From: {from_date.strftime('%d/%m/%Y')} To: {to_date.strftime('%d/%m/%Y')}"
                else:
                    date_range = "No date range selected"
                p.setFont("Helvetica", 10)
                date_range_width = p.stringWidth(date_range, "Helvetica", 10)
                p.drawString((width - date_range_width) / 2, height - 60, date_range)
                
                if client_id != 'ALL' and client_id:
                    try:
                        client = master_client.objects.get(clt_id=client_id)
                        client_name = client.name if client else 'Unknown Client'
                    except master_client.DoesNotExist:
                        client_name = 'Client Not Found'
                else:
                    client_name = 'All Clients'
                    
                p.setFont("Helvetica", 10)
                client_name_text = f"Client: {client_name}" 
                client_name_width = p.stringWidth(client_name_text, "Helvetica", 10)
                p.drawString((width - client_name_width) / 2, height - 80, client_name_text) 
                
                p.setFont("Helvetica-Bold", 12)
                p.drawString(30, height - 100, "Payment Voucher")
                y_position = height - 120
                
                headers = ["Payment Date", "Voucher No", "Company Name", "Total"]
                x_positions = [
                    (width - 500) / 2,            # Payment Date
                    (width - 500) / 2 + 90,       # Voucher No
                    (width - 500) / 2 + 200,      # Company Name
                    (width - 500) / 2 + 400       # Total
                ]
                
                # Table headers for payments
                for i, header in enumerate(headers):
                    p.setFont("Helvetica-Bold", 10)
                    p.drawString(x_positions[i], y_position, header)
                y_position -= 20
                
                # Payment details
                p.setFont("Helvetica", 9)
                seen_vouchers = set()
                total_payment_amount = 0
                company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}
                
                for payment in payments:
                    if payment.vouch_num not in seen_vouchers:
                        # Pagination check
                        if y_position < 50:
                            p.showPage()
                            y_position = height - 50
                            p.setFont("Helvetica-Bold", 10)
                            for i, header in enumerate(headers):
                                p.drawString(x_positions[i], y_position, header)
                            y_position -= 20
                            p.setFont("Helvetica", 9)
            
                        payment_date = payment.payment_date.strftime('%d/%m/%Y') if payment.payment_date else 'N/A'
                        company_name = (
                            company_dict.get(payment.clt_id, 'N/A')
                            if payment.client_type == "Client"
                            else (payment.comp_name if payment.comp_name else 'N/A')
                        )
                        client_name = payment.name or 'N/A'
                        total = float(payment.total_amount or 0)
                        total_payment_amount += total
            
                        # Payment line 1: Info
                        p.drawString(x_positions[0], y_position, payment_date)
                        p.drawString(x_positions[1], y_position, payment.vouch_num)
                        p.drawString(x_positions[2], y_position, company_name)
                        p.drawString(x_positions[3], y_position, f"{total:.2f}")
                        y_position -= 12
            
                        # Payment line 2: Client Name below Company Name
                        p.drawString(x_positions[2], y_position, f"Client: {client_name}")
                        y_position -= 15
            
                        seen_vouchers.add(payment.vouch_num)
            
                # Total for Payments
                if y_position < 50:
                    p.showPage()
                    y_position = height - 50
                p.setFont("Helvetica-Bold", 10)
                p.drawString(x_positions[2], y_position, "Grand Total:")
                p.drawString(x_positions[3], y_position, f"{total_payment_amount:.2f}")
                y_position -= 20
            
                # ---- Receipt Voucher Section ----
                p.setFont("Helvetica-Bold", 12)
                p.drawString(30, y_position, "Receipt Voucher")
                y_position -= 20
                
                # Table headers for receipts
                for i, header in enumerate(headers):
                    p.setFont("Helvetica-Bold", 10)
                    p.drawString(x_positions[i], y_position, header)
                y_position -= 20
                
                # Receipt details
                seen_vouchers = set()
                total_receipt_amount = 0
                
                for receipt in receipts:
                    if receipt.vouch_num not in seen_vouchers:
                        # Pagination check
                        if y_position < 50:
                            p.showPage()
                            y_position = height - 50
                            p.setFont("Helvetica-Bold", 10)
                            for i, header in enumerate(headers):
                                p.drawString(x_positions[i], y_position, header)
                            y_position -= 20
                            p.setFont("Helvetica", 9)
            
                        payment_date = receipt.payment_date.strftime('%d/%m/%Y') if receipt.payment_date else 'N/A'
                        company_name = (
                            company_dict.get(receipt.clt_id, 'N/A')
                            if receipt.client_type == "Client"
                            else (receipt.comp_name if receipt.comp_name else 'N/A')
                        )
                        client_name = receipt.name or 'N/A'
                        total = float(receipt.total_amount or 0)
                        total_receipt_amount += total
            
                        # Receipt line 1: Info
                        p.drawString(x_positions[0], y_position, payment_date)
                        p.drawString(x_positions[1], y_position, receipt.vouch_num)
                        p.drawString(x_positions[2], y_position, company_name)
                        p.drawString(x_positions[3], y_position, f"{total:.2f}")
                        y_position -= 12
            
                        # Receipt line 2: Client Name below Company Name
                        p.drawString(x_positions[2], y_position, f"Client: {client_name}")
                        y_position -= 15
            
                        seen_vouchers.add(receipt.vouch_num)
            
                # Total for Receipts
                if y_position < 50:
                    p.showPage()
                    y_position = height - 50
                p.setFont("Helvetica-Bold", 10)
                p.drawString(x_positions[2], y_position, "Grand Total:")
                p.drawString(x_positions[3], y_position, f"{total_receipt_amount:.2f}")
                
                # Save PDF
                p.showPage()
                p.save()
                
                return response
        
        return render(request, "open-ledger.html", { 
            'session_roleid': session_roleid, 
            'client_data': client_data
        })
    else:
        return redirect('login')
 
def reports(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        client_data = master_client.objects.all() 
        
        if request.method == "POST":
            # from_date = request.POST.get('from_date')
            # to_date = request.POST.get('to_date')
            date_range = request.POST.get('date_range')
            from_date = to_date = None
            client_id = request.POST.get('client')
            
            query = Q()
            
            try:
                if date_range:
                    date_range = date_range.replace('+', ' ')  # handle URL-encoded spaces
                    start_str, end_str = date_range.split(' - ')
                    from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0, microsecond=0)
                    to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
            
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
            
                    query &= Q(date__range=[from_date, to_date])
            except Exception as e:
                messages.error(request, "Invalid date format. Please use yyyy-mm-dd - yyyy-mm-dd.")
                return render(request, "open-reports-leasting.html", {
                    'session_roleid': session_roleid,
                    'client_data': client_data
                })
            
            # try:
            #     if from_date or to_date:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                        
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(date__range=[from_date, to_date])
                    
            # except ValueError:
            #     messages.error(request, "Invalid date format. Please use dd/mm/yyyy.")
            #     return render(request, "open-reports-leasting.html", {
            #         'session_roleid': session_roleid,
            #         'client_data': client_data
            #     })
                
            if client_id != 'ALL' and client_id:
                query &= Q(clt_id=client_id)
                
            if request.POST.get('action') == 'search':
                invoices = tbl_invoice.objects.filter(query).order_by('invNumber')
                
                company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()} 
                
                seen_vouchers = set()
                unique_invoices = []
                total_amount_sum = 0
                
                for invoice in invoices:
                    if invoice.invNumber not in seen_vouchers:
                        unique_invoices.append(invoice)
                        seen_vouchers.add(invoice.invNumber)
                        total_amount_sum += float(invoice.grandAmount or 0)
                        
                    invoice.comp_name = company_dict.get(invoice.clt_id, "Unknown Company")
                        
                if not unique_invoices:
                    messages.error(request, "No data available for the given date range.")
                    return render(request, "open-reports-leasting.html", {
                        'session_roleid': session_roleid,
                        'client_data': client_data,
                        'invoices': unique_invoices,
                        'total_amount_sum': 0
                    })
                    
                return render(request, "open-reports-leasting.html", {
                    'session_roleid': session_roleid,
                    'client_data': client_data,
                    'invoices': unique_invoices,
                    'total_amount_sum': total_amount_sum
                })
                
            elif request.POST.get('action') == 'download':
                invoices = tbl_invoice.objects.filter(query).order_by('invNumber')
            
                if not invoices:
                    messages.error(request, "No data available for the given date range.")
                    return render(request, "open-reports-leasting.html", {
                        'session_roleid': session_roleid, 
                        'client_data': client_data
                    })
                            
                response = HttpResponse(content_type='application/pdf')
                response['Content-Disposition'] = 'attachment; filename="Invoice-Report.pdf"'
                p = canvas.Canvas(response, pagesize=letter)
                width, height = letter
                
                # Title
                p.setFont("Helvetica-Bold", 16)
                title = "Invoice Report"
                title_width = p.stringWidth(title, "Helvetica-Bold", 16)
                p.drawString((width - title_width) / 2, height - 40, title)
            
                # Date Range
                if from_date and to_date:
                    date_range = f"From: {from_date.strftime('%d/%m/%Y')} To: {to_date.strftime('%d/%m/%Y')}"
                else:
                    date_range = "No date range selected"
                p.setFont("Helvetica", 10)
                date_range_width = p.stringWidth(date_range, "Helvetica", 10)
                p.drawString((width - date_range_width) / 2, height - 60, date_range)
                
                # Client Name
                if client_id != 'ALL' and client_id:
                    try:
                        client = master_client.objects.get(clt_id=client_id)
                        client_name = client.name if client else 'Unknown Client'
                    except master_client.DoesNotExist:
                        client_name = 'Client Not Found'
                else:
                    client_name = 'All Clients'
                
                p.setFont("Helvetica", 10)
                client_name_text = f"Client: {client_name}"
                client_name_width = p.stringWidth(client_name_text, "Helvetica", 10)
                p.drawString((width - client_name_width) / 2, height - 80, client_name_text)
                
                # Table Header
                p.setFont("Helvetica-Bold", 10)
                headers = ["Invoice Date", "Invoice No", "Company Name", "Total Amount"]
                x_positions = [
                    (width - 500) / 2,            # Invoice Date
                    (width - 500) / 2 + 90,       # Invoice No
                    (width - 500) / 2 + 200,      # Company Name
                    # (width - 500) / 2 + 400,      # Client Name
                    (width - 500) / 2 + 400       # Total Amount
                ]
                
                y_position = height - 100
                for i, header in enumerate(headers):
                    p.drawString(x_positions[i], y_position, header)
                
                y_position -= 20
                p.setFont("Helvetica", 9)
                
                # Initialize variables
                seen_vouchers = set()
                total_amount_sum = 0
                company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}
                
                # Loop through invoices
                for invoice in invoices:
                    if invoice.invNumber not in seen_vouchers:
                        if y_position < 50:
                            p.showPage()
                            y_position = height - 50
                            p.setFont("Helvetica-Bold", 10)
                            for i, header in enumerate(headers):
                                p.drawString(x_positions[i], y_position, header)
                            y_position -= 20
                            p.setFont("Helvetica", 9)
            
                        invoice_date = invoice.date.strftime('%d/%m/%Y') if invoice.date else 'N/A'
                        company_name = company_dict.get(invoice.clt_id, 'N/A')
                        # client_name = invoice.clientName or 'N/A'
                        total = float(invoice.grandAmount or 0)
                        total_amount_sum += total
            
                        # Line 1: Invoice Info
                        p.drawString(x_positions[0], y_position, invoice_date)
                        p.drawString(x_positions[1], y_position, invoice.invNumber)
                        p.drawString(x_positions[2], y_position, company_name)
                        p.drawString(x_positions[3], y_position, f"{total:.2f}")
                        y_position -= 12
                        
                        # Line 2: Client Name (Under Company Name)
                        p.drawString(x_positions[2], y_position, f"Client: {invoice.clientName}")
                        # p.drawString(x_positions[4], y_position, f"{total:.2f}")
                        y_position -= 15
                        
                        seen_vouchers.add(invoice.invNumber)
                
                # Final Total
                if y_position < 50:
                    p.showPage()
                    y_position = height - 50
            
                p.setFont("Helvetica-Bold", 10)
                p.drawString(x_positions[2], y_position, "Grand Total:")
                p.drawString(x_positions[3], y_position, f"{total_amount_sum:.2f}")
            
                p.showPage()
                p.save()
                return response

        
        return render(request, "open-reports-leasting.html", {
            'client_data': client_data,
            'session_roleid': session_roleid
        })
    else:
        return redirect('login')
 
def receipt_invoice(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        client_data = master_client.objects.all()
        
        if request.method == "POST":
            # from_date = request.POST.get('from_date')
            # to_date = request.POST.get('to_date')
            date_range = request.POST.get('date_range')
            from_date = to_date = None
            client_id = request.POST.get('client')
            
            query = Q()
            
            try:
                if date_range:
                    date_range = date_range.replace('+', ' ')  # handle URL-encoded spaces
                    start_str, end_str = date_range.split(' - ')
                    from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0, microsecond=0)
                    to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
            
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
            
                    query &= Q(payment_date__range=[from_date, to_date])
            except Exception as e:
                messages.error(request, "Invalid date format. Please use yyyy-mm-dd - yyyy-mm-dd.")
                return render(request, "receipt_invoice.html", {
                    'session_roleid': session_roleid,
                    'client_data': client_data
                })
            
            # try:
            #     if from_date or to_date:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                        
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(payment_date__range=[from_date, to_date])
                    
            # except ValueError:
            #     messages.error(request, "Invalid date format. Please use dd/mm/yyyy.")
            #     return render(request, "receipt_invoice.html", {
            #         'session_roleid': session_roleid,
            #         'client_data': client_data
            #     })
                
            if client_id != 'ALL' and client_id:
                query &= Q(clt_id=client_id)
                
            if request.POST.get('action') == 'search':
                receipts = tbl_receive_v.objects.filter(query).order_by('vouch_num')
                
                company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}
                
                seen_vouchers = set()
                unique_receipts = []
                total_amount_sum = 0
                
                for receipt in receipts:
                    if receipt.vouch_num not in seen_vouchers:
                        unique_receipts.append(receipt)
                        seen_vouchers.add(receipt.vouch_num)
                        total_amount_sum += float(receipt.total_amount or 0)
                        
                    if receipt.client_type =="Client":
                        clt_company_name = company_dict.get(receipt.clt_id, 'N/A') 
                    else:
                        clt_company_name = receipt.comp_name if receipt.comp_name else 'N/A'
                        
                    receipt.clt_company_name = clt_company_name
                        
                if not unique_receipts:
                    messages.error(request, "No data available for the given date range.")
                    return render(request, "receipt_invoice.html", {
                        'session_roleid': session_roleid,
                        'client_data': client_data,
                        'receipts': unique_receipts,
                        'total_amount_sum': 0
                    })
                    
                return render(request, "receipt_invoice.html", {
                    'session_roleid': session_roleid,
                    'client_data': client_data,
                    'receipts': unique_receipts,
                    'total_amount_sum': total_amount_sum
                })
                
            elif request.POST.get('action') == 'download':
                
                receipts = tbl_receive_v.objects.filter(query).order_by('vouch_num')
                if not receipts:
                    messages.error(request, "No data available for the given date range.")
                    return render(request, "receipt_invoice.html", {
                        'session_roleid': session_roleid, 
                        'client_data': client_data
                    })
                    
                response = HttpResponse(content_type='application/pdf')
                response['Content-Disposition'] = 'attachment; filename="Receipt-Invoice-Report.pdf"'
                p = canvas.Canvas(response, pagesize=letter)
                width, height = letter
                
                p.setFont("Helvetica-Bold", 16)
                title = "Receipt Report"
                title_width = p.stringWidth(title, "Helvetica-Bold", 16)
                p.drawString((width - title_width) / 2, height - 40, title)

                # Date Range
                if from_date and to_date:
                    date_range = f"From: {from_date.strftime('%d/%m/%Y')} To: {to_date.strftime('%d/%m/%Y')}"
                else:
                    date_range = "No date range selected"
                p.setFont("Helvetica", 10)
                p.drawString((width - p.stringWidth(date_range, "Helvetica", 10)) / 2, height - 60, date_range)

                # Client Name
                if client_id != 'ALL' and client_id:
                    try:
                        client = master_client.objects.get(clt_id=client_id)
                        client_name = client.name if client else 'Unknown Client'
                    except master_client.DoesNotExist:
                        client_name = 'Client Not Found'
                else:
                    client_name = 'All Clients'
                client_name_text = f"Client: {client_name}"
                p.drawString((width - p.stringWidth(client_name_text, "Helvetica", 10)) / 2, height - 80, client_name_text)

                # Layout Settings
                p.setFont("Helvetica-Bold", 10)
                headers = ["Payment Date", "Voucher No", "Company Name","Total", "Invoice Number"]
                # X positions adjusted for different column widths
                x_positions = [
                    (width - 500) / 2,              # Payment Date
                    (width - 500) / 2 + 90,         # Voucher No (adjusted space)
                    (width - 500) / 2 + 190,        # Company Name (adjusted space)
                    (width - 500) / 2 + 340,        # Total (was aligned after Name)
                    (width - 500) / 2 + 400         # Invoice Number (shifted to the right after removing Name)
                ]
                
                y_position = height - 100  # Start at 100px below top of page
                
                # Draw header
                for i, header in enumerate(headers):
                    p.drawString(x_positions[i], y_position, header)
                
                y_position -= 20  # Move down after header
                
                # Reset font for data
                p.setFont("Helvetica", 9)
                
                seen_vouchers = set()
                total_receipt_amount = 0
                company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}
                
                for receipt in receipts:
                    if receipt.vouch_num not in seen_vouchers:
                        if y_position < 50:  # If we're running out of space
                            p.showPage()  # Start a new page
                            y_position = height - 100  # Reset the Y position for the new page
                
                            # Redraw header on the new page
                            p.setFont("Helvetica-Bold", 10)
                            for i, header in enumerate(headers):
                                p.drawString(x_positions[i], y_position, header)
                            y_position -= 20  # Move down after header
                
                            p.setFont("Helvetica", 9)
                
                        # Get data for this row
                        payment_date = receipt.payment_date.strftime('%d/%m/%Y') if receipt.payment_date else 'N/A'
                        clt_company_name = (
                            company_dict.get(receipt.clt_id, 'N/A')
                            if receipt.client_type == "Client"
                            else (receipt.comp_name if receipt.comp_name else 'N/A')
                        )
                        inv_number = receipt.inv_number if receipt.inv_number else 'N/A'
                        receipt_name = receipt.name or 'N/A'
                        total = float(receipt.total_amount or 0)
                        total_receipt_amount += total
                
                        # Draw the line for this receipt
                        p.drawString(x_positions[0], y_position, payment_date)
                        p.drawString(x_positions[1], y_position, receipt.vouch_num)
                        p.drawString(x_positions[2], y_position, clt_company_name)
                        p.drawString(x_positions[3], y_position, f"{total:.2f}")
                        p.drawString(x_positions[4], y_position, inv_number)
                
                        y_position -= 12  # Move down for next line
                
                        # Optional additional detail (Client name under company name)
                        p.drawString(x_positions[2], y_position, f"Client: {receipt_name}")
                        y_position -= 15  # Add space after optional detail
                
                        seen_vouchers.add(receipt.vouch_num)
                
                # Grand Total
                if y_position < 50:
                    p.showPage()  # Start a new page if we're too low
                    y_position = height - 100
                
                p.setFont("Helvetica-Bold", 10)
                p.drawString(x_positions[2], y_position, "Grand Total:")
                p.drawString(x_positions[3], y_position, f"{total_receipt_amount:.2f}")
                
                p.showPage()  # End the page
                p.save()  # Finalize the PDF
                
                return response

            
        return render(request, "receipt_invoice.html", {
            'session_roleid': session_roleid, 
            'client_data': client_data
        })
    else:
        return redirect('login') 

def total_pending(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        pending_data = tbl_pending.objects.all()
        invoice_data = tbl_invoice.objects.all()
        client_data = master_client.objects.all()

        # Mapping client_id to a list of invoices
        invoice_dict = {}
        for inv in invoice_data:
            invoice_dict.setdefault(inv.clt_id, []).append(inv)

        combined_data = []
        for pending in pending_data:
            invoices = invoice_dict.get(pending.client_id, [])
            
            # Filter invoices related to the same product (if applicable)
            related_invoices = [inv for inv in invoices if inv.productName == pending.product]
            
            total_amount = int(pending.amount)
            paid_amount = sum(int(inv.totalAmount) for inv in related_invoices if inv.totalAmount)  # Sum all paid amounts
            due_amount = total_amount - paid_amount 
            
            # Fetching client name from master_client
            client = master_client.objects.filter(clt_id=pending.client_id).first()
            client_name = client.name if client else "Unknown Client"

            combined_data.append({
                'client_name': client_name,
                'product': pending.product,
                'total_amount': total_amount,
                'paid_amount': paid_amount,
                'due_amount': due_amount
            })

        return render(request, "total-pending.html", {
            'session_roleid': session_roleid,
            'pending_data': combined_data,
            'client_data': client_data ,
        })
    else:
        return redirect('login')


def download_excel(request):
    if request.method == "POST" and request.POST.get('action') == 'download_excel':
        date_range = request.POST.get('date_range')
        from_date = to_date = None

        if date_range:
            try:
                date_range = date_range.replace('+', ' ')
                start_str, end_str = date_range.split(' - ')
                from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0, microsecond=0)
                to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
            except Exception:
                messages.error(request, "Invalid date format. Please use yyyy-mm-dd - yyyy-mm-dd.")
                return redirect('total_pending')
                
        client_id = request.POST.get('client')

        # Filter pending data
        pending_data = tbl_pending.objects.all()

        # Filter by client if not "ALL"
        if client_id and client_id != "ALL":
            pending_data = pending_data.filter(client_id=client_id)
        
        # Filter by date range using 'created_time'
        if from_date and to_date:
            pending_data = pending_data.filter(created_time__range=[from_date, to_date])

        # Prepare data for Excel
        combined_data = []
        for pending in pending_data:
            invoices = tbl_invoice.objects.filter(clt_id=pending.client_id, productName=pending.product)
            total_amount = int(pending.amount)
            paid_amount = sum(int(inv.totalAmount) for inv in invoices if inv.totalAmount)
            due_amount = total_amount - paid_amount

            client = master_client.objects.filter(clt_id=pending.client_id).first()
            client_name = client.name if client else "Unknown Client"
            client_company = client.comp_name if client else "Unknown Client"

            combined_data.append({
                'Comapny Name': client_company, 
                'Client Name': client_name, 
                'Product': pending.product,
                'Total Amount': total_amount,
                'Paid Amount': paid_amount,
                'Due Amount': due_amount
            })

        # Create Excel file
        df = pd.DataFrame(combined_data)

        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        response['Content-Disposition'] = 'attachment; filename=pending_data.xlsx'
        with pd.ExcelWriter(response, engine='openpyxl') as writer:
            df.to_excel(writer, index=False)

        return response

    # Redirect if accessed via GET or without proper POST data
    return redirect('total_pending')  # Assuming 'total_pending' is your main page

def download_pdf(request):
    if request.method == "POST" and request.POST.get('action') == 'download_pdf':
        date_range = request.POST.get('date_range')
        from_date = to_date = None

        if date_range:
            try:
                date_range = date_range.replace('+', ' ')
                start_str, end_str = date_range.split(' - ')
                from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0, microsecond=0)
                to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
            except Exception:
                messages.error(request, "Invalid date format. Please use yyyy-mm-dd - yyyy-mm-dd.")
                return redirect('total_pending')
                
        client_id = request.POST.get('client')

        # Filter pending data
        pending_data = tbl_pending.objects.all()

        # Filter by client if not "ALL"
        if client_id and client_id != "ALL":
            pending_data = pending_data.filter(client_id=client_id)
        
        # Filter by date range using 'created_time'
        if from_date and to_date:
            pending_data = pending_data.filter(created_time__range=[from_date, to_date])

        # Prepare data for PDF
        combined_data = []
        for pending in pending_data:
            invoices = tbl_invoice.objects.filter(clt_id=pending.client_id, productName=pending.product)
            total_amount = int(pending.amount)
            paid_amount = sum(int(inv.totalAmount) for inv in invoices if inv.totalAmount)
            due_amount = total_amount - paid_amount

            client = master_client.objects.filter(clt_id=pending.client_id).first()
            client_name = client.name if client else "Unknown Client"
            client_company = client.comp_name if client else "Unknown Company"

            combined_data.append({
                'Comapny Name': client_company, 
                'Client Name': client_name,
                'Product': pending.product,
                'Total Amount': total_amount,
                'Paid Amount': paid_amount,
                'Due Amount': due_amount
            })

        # Create PDF file
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = 'attachment; filename="pending_data.pdf"'

        p = canvas.Canvas(response, pagesize=letter)
        width, height = letter

        # Title
        p.setFont("Helvetica-Bold", 16)
        title = "Pending Data Report"
        title_width = p.stringWidth(title, "Helvetica-Bold", 16)
        p.drawString((width - title_width) / 2, height - 40, title)

        y_position = height - 80
        p.setFont("Helvetica-Bold", 10)
        
        # Column headers and their widths
        headers = ["Comapny Name", "Client Name", "Product", "Total Amount", "Paid Amount", "Due Amount"]
        column_widths = {
            "Comapny Name":120,
            "Client Name": 120,
            "Product": 120,    # Double the width of other columns
            "Total Amount": 70,
            "Paid Amount": 70,
            "Due Amount": 70
        }

        # Draw table headers
        x_position = 30
        for header in headers:
            p.drawString(x_position, y_position, header)
            x_position += column_widths[header]
        y_position -= 20

        # Draw data rows
        for data in combined_data:
            x_position = 30
            row = [
                data['Comapny Name'],
                data['Client Name'],
                data['Product'],
                str(data['Total Amount']),
                str(data['Paid Amount']), 
                str(data['Due Amount'])
            ]
            for i, item in enumerate(row):
                p.drawString(x_position, y_position, item)
                x_position += column_widths[headers[i]]  # Adjust based on column width
            y_position -= 20

        p.showPage()
        p.save()

        return response

    # Redirect if accessed via GET or without proper POST data
    return redirect('total_pending')  # Adjust based on your project
    
def download_report(request):
    if request.method == "POST":
        action = request.POST.get('action')
        # from_date = request.POST.get('from_date')
        # to_date = request.POST.get('to_date')
        # client_id = request.POST.get('client')

        if action == 'download_pdf':
            return download_pdf(request)  # Call the PDF download function
        elif action == 'download_excel':
            return download_excel(request)  # Call the Excel download function

    return redirect('total_pending')


# def profit_loss(request):
#     if 'session_id' in request.session:
#         session_roleid = request.session.get('session_roleid')

#         total_receipts = 0
#         total_payments = 0
#         profit_loss_value = 0

#         if request.method == "POST":
#             from_date = request.POST.get('from_date')
#             to_date = request.POST.get('to_date')

#             query = Q()

#             try:
#                 if from_date or to_date:
#                     if from_date:
#                         from_date = datetime.strptime(from_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
#                     else:
#                         from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)

#                     if to_date:
#                         to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
#                     else:
#                         to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)

#                     if from_date > to_date:
#                         from_date, to_date = to_date, from_date

#                     query &= Q(payment_date__range=[from_date, to_date])

#             except ValueError:
#                 messages.error(request, "Invalid date format. Please use dd/mm/yyyy.")
#                 return render(request, "profit_loss.html", {'session_roleid': session_roleid})

#             # Handling Search Action
#             if request.POST.get('action') == 'search':
#                 receipts = tbl_receive_v.objects.filter(query).order_by('vouch_num')
#                 payments = tbl_payment_v.objects.filter(query).order_by('vouch_num')
                
#                 company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}
                
#                 for job_obj in receipts:
                    
#                     if job_obj.client_type =="Client":
#                         clt_company_name = company_dict.get(job_obj.clt_id, "Unknown Company")
#                     else:
#                         clt_company_name = job_obj.comp_name if job_obj.comp_name else 'N/A'
                        
#                     job_obj.clt_company_name = clt_company_name
                    
#                 for job_objs in payments:
                    
#                     if job_objs.client_type =="Client":
#                         clt_company_name = company_dict.get(job_objs.clt_id, "Unknown Company")
#                     else:
#                         clt_company_name = job_objs.comp_name if job_objs.comp_name else 'N/A'
                        
#                     job_objs.clt_company_name = clt_company_name

#                 total_receipts = receipts.aggregate(Sum('total_amount'))['total_amount__sum'] or 0
#                 total_payments = payments.aggregate(Sum('total_amount'))['total_amount__sum'] or 0
#                 profit_loss_value = total_receipts - total_payments

#                 if not receipts and not payments:
#                     messages.error(request, "No data available for the given date range.")
#                     return render(request, "profit_loss.html", {
#                         'session_roleid': session_roleid,
#                         'receipts': receipts,
#                         'payments': payments
#                     })

#                 return render(request, "profit_loss.html", {
#                     'session_roleid': session_roleid,
#                     'receipts': receipts,
#                     'payments': payments,
#                     'total_receipts': total_receipts,
#                     'total_payments': total_payments,
#                     'profit_loss': profit_loss_value
#                 })

#             # Handling PDF Download Action
#             elif request.POST.get('action') == 'download':
#                 receipts = tbl_receive_v.objects.filter(query).order_by('vouch_num')
#                 payments = tbl_payment_v.objects.filter(query).order_by('vouch_num')

#                 total_receipts = receipts.aggregate(Sum('total_amount'))['total_amount__sum'] or 0
#                 total_payments = payments.aggregate(Sum('total_amount'))['total_amount__sum'] or 0
#                 profit_loss_value = total_receipts - total_payments

#                 if not payments and not receipts:
#                     messages.error(request, "No data available for the given date range.")
#                     return render(request, "profit_loss.html", {'session_roleid': session_roleid})

#                 response = HttpResponse(content_type='application/pdf')
#                 response['Content-Disposition'] = 'attachment; filename="Voucher-Report.pdf"'

#                 p = canvas.Canvas(response, pagesize=letter)
#                 width, height = letter

#                 # Page Setup
#                 y_position = height - 40
#                 LINE_HEIGHT = 20
#                 MAX_Y_POSITION = 50  # Threshold for new page

#                 def add_line(text, y_pos, font_size=10, bold=False):
#                     if y_pos < MAX_Y_POSITION:
#                         p.showPage()  # Start a new page
#                         nonlocal y_position
#                         y_position = height - 40  # Reset position
#                     p.setFont("Helvetica-Bold" if bold else "Helvetica", font_size)
#                     p.drawString(30, y_pos, text)
#                     return y_pos - LINE_HEIGHT

#                 # Title
#                 y_position = add_line("Ledger Report", y_position, 16, True)
#                 date_range = f"From: {from_date.strftime('%d/%m/%Y')} To: {to_date.strftime('%d/%m/%Y')}"
#                 y_position = add_line(date_range, y_position, 10)

#                 # Receipts Section
#                 y_position = add_line("Payment Voucher", y_position, 12, True)
#                 headers = ["Payment Date", "Voucher No","company Name", "Name", "Total"]
#                 x_positions = [30, 130, 230, 330, 430]

#                 # Header Row
#                 for i, header in enumerate(headers):
#                     p.drawString(x_positions[i], y_position, header)
#                 y_position -= LINE_HEIGHT
                
#                 company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}

#                 # Receipts Data
#                 for receipt in receipts:
#                     if y_position < MAX_Y_POSITION:
#                         p.showPage()
#                         y_position = height - 40
                        
#                     receipt.comp_name = company_dict.get(receipt.clt_id, "Unknown Company")

#                     p.drawString(x_positions[0], y_position, receipt.payment_date.strftime('%d/%m/%Y') if receipt.payment_date else 'N/A')
#                     p.drawString(x_positions[1], y_position, receipt.vouch_num)
#                     p.drawString(x_positions[2], y_position, receipt.comp_name)
#                     p.drawString(x_positions[3], y_position, receipt.name)
#                     p.drawString(x_positions[4], y_position, str(receipt.total_amount))
#                     y_position -= LINE_HEIGHT

#                 # Payments Section
#                 y_position = add_line("Receipt Voucher", y_position, 12, True)
#                 for payment in payments:
#                     if y_position < MAX_Y_POSITION:
#                         p.showPage()
#                         y_position = height - 40
                        
#                     payment.comp_name = company_dict.get(payment.clt_id, "Unknown Company")

#                     p.drawString(x_positions[0], y_position, payment.payment_date.strftime('%d/%m/%Y') if payment.payment_date else 'N/A')
#                     p.drawString(x_positions[1], y_position, payment.vouch_num)
#                     p.drawString(x_positions[2], y_position, payment.name)
#                     p.drawString(x_positions[3], y_position, payment.comp_name)
#                     p.drawString(x_positions[4], y_position, str(payment.total_amount))
#                     y_position -= LINE_HEIGHT

#                 # Profit & Loss
#                 y_position = add_line(f"Total Receipts: {total_receipts}", y_position, 12, True)
#                 y_position = add_line(f"Total Payments: {total_payments}", y_position, 12, True)
#                 y_position = add_line(f"Profit/Loss: {profit_loss_value}", y_position, 12, True)

#                 p.showPage()
#                 p.save()
#                 return response

#         return render(request, "profit_loss.html", {'session_roleid': session_roleid})

#     else:
#         return redirect('login')

def profit_loss(request):   
    if 'session_id' not in request.session:
        return redirect('login')

    session_roleid = request.session.get('session_roleid')

    if request.method == "POST":
        # from_date = request.POST.get('from_date')
        # to_date = request.POST.get('to_date')
        
        date_range = request.POST.get('date_range')
        from_date = to_date = None
        
        query = Q()
        
        try:
            if date_range:
                date_range = date_range.replace('+', ' ')  # handle URL-encoded spaces
                start_str, end_str = date_range.split(' - ')
                from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0, microsecond=0)
                to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
        
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
        
                query &= Q(payment_date__range=[from_date, to_date])
        except Exception as e:
            messages.error(request, "Invalid date format. Please use yyyy-mm-dd - yyyy-mm-dd.")
            return render(request, "profit_loss.html", {'session_roleid': session_roleid})

        # try:
        #     if from_date or to_date:
        #         if from_date:
        #             from_date = datetime.strptime(from_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0)
        #         else:
        #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0)

        #         if to_date:
        #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59)
        #         else:
        #             to_date = from_date.replace(hour=23, minute=59, second=59)

        #         if from_date > to_date:
        #             from_date, to_date = to_date, from_date

        #         query &= Q(payment_date__range=[from_date, to_date])
        # except ValueError:
        #     messages.error(request, "Invalid date format. Please use yyyy-mm-dd.")
        #     return render(request, "profit_loss.html", {'session_roleid': session_roleid})

        receipts = tbl_receive_v.objects.filter(query).order_by('vouch_num')
        payments = tbl_payment_v.objects.filter(query).order_by('vouch_num')
        company_dict = {c.clt_id: c.comp_name for c in master_client.objects.all()}

        # Deduplicate and sum
        seen_receipts = set()
        unique_receipts = []
        total_receipts = 0

        for r in receipts:
            if r.vouch_num not in seen_receipts:
                r.clt_company_name = (
                    company_dict.get(r.clt_id, 'N/A') if r.client_type == 'Client'
                    else (r.comp_name or 'N/A')
                )
                unique_receipts.append(r)
                total_receipts += float(r.total_amount or 0)
                seen_receipts.add(r.vouch_num)

        seen_payments = set()
        unique_payments = []
        total_payments = 0

        for pmt in payments:
            if pmt.vouch_num not in seen_payments:
                pmt.clt_company_name = (
                    company_dict.get(pmt.clt_id, 'N/A') if pmt.client_type == 'Client'
                    else (pmt.comp_name or 'N/A')
                )
                unique_payments.append(pmt)
                total_payments += float(pmt.total_amount or 0)
                seen_payments.add(pmt.vouch_num)

        profit_loss_value = total_receipts - total_payments

        if request.POST.get('action') == 'search':
            if not unique_receipts and not unique_payments:
                messages.error(request, "No data available for the given date range.")
                return render(request, "profit_loss.html", {
                    'session_roleid': session_roleid,
                    'receipts': unique_receipts,
                    'payments': unique_payments
                })

            return render(request, "profit_loss.html", {
                'session_roleid': session_roleid,
                'receipts': unique_receipts,
                'payments': unique_payments,
                'total_receipts': total_receipts,
                'total_payments': total_payments,
                'profit_loss': profit_loss_value
            })

        elif request.POST.get('action') == 'download':
            payments = tbl_payment_v.objects.filter(query).order_by('vouch_num')
            receipts = tbl_receive_v.objects.filter(query).order_by('vouch_num')
            
            if not payments and not receipts:
                messages.error(request, "No data available for the given date range.")
                return render(request, "open-ledger.html", {
                    'session_roleid': session_roleid, 
                    'client_data': client_data
                })
                
            response = HttpResponse(content_type='application/pdf')
            response['Content-Disposition'] = 'attachment; filename="Voucher-Report.pdf"'
            
            p = canvas.Canvas(response, pagesize=letter)
            width, height = letter
            
            # Title and Date Range
            p.setFont("Helvetica-Bold", 16)
            title = "Profit & Loss Report"
            title_width = p.stringWidth(title, "Helvetica-Bold", 16)
            p.drawString((width - title_width) / 2, height - 40, title)
            
            if from_date and to_date:
                date_range = f"From: {from_date.strftime('%d/%m/%Y')} To: {to_date.strftime('%d/%m/%Y')}"
            else:
                date_range = "No date range selected"
            p.setFont("Helvetica", 10)
            date_range_width = p.stringWidth(date_range, "Helvetica", 10)
            p.drawString((width - date_range_width) / 2, height - 60, date_range)
            
            y_position = height - 100
            
            # Payment Voucher Header
            p.setFont("Helvetica-Bold", 12)
            p.drawString(30, y_position, "Payment Voucher")
            y_position -= 20
            
            # Table headers for payments
            headers = ["Payment Date", "Voucher No", "Company Name", "Total"]
            x_positions = [
                (width - 500) / 2,            # Payment Date
                (width - 500) / 2 + 90,       # Voucher No
                (width - 500) / 2 + 200,      # Company Name
                (width - 500) / 2 + 400       # Total
            ]
            
            for i, header in enumerate(headers):
                p.setFont("Helvetica-Bold", 10)
                p.drawString(x_positions[i], y_position, header)
            y_position -= 20
            
            # Payment details
            p.setFont("Helvetica", 9)
            seen_vouchers = set()
            total_payment_amount = 0
            company_dict = {comp.clt_id: comp.comp_name for comp in master_client.objects.all()}
            
            for payment in payments:
                if payment.vouch_num not in seen_vouchers:
                    # Pagination check
                    if y_position < 50:
                        p.showPage()
                        y_position = height - 50
                        p.setFont("Helvetica-Bold", 10)
                        for i, header in enumerate(headers):
                            p.drawString(x_positions[i], y_position, header)
                        y_position -= 20
                        p.setFont("Helvetica", 9)
            
                    payment_date = payment.payment_date.strftime('%d/%m/%Y') if payment.payment_date else 'N/A'
                    company_name = (
                        company_dict.get(payment.clt_id, 'N/A')
                        if payment.client_type == "Client"
                        else (payment.comp_name if payment.comp_name else 'N/A')
                    )
                    client_name = payment.name or 'N/A'
                    total = float(payment.total_amount or 0)
                    total_payment_amount += total
            
                    # Payment line 1: Info
                    p.drawString(x_positions[0], y_position, payment_date)
                    p.drawString(x_positions[1], y_position, payment.vouch_num)
                    p.drawString(x_positions[2], y_position, company_name)
                    p.drawString(x_positions[3], y_position, f"{total:.2f}")
                    y_position -= 12
            
                    # Payment line 2: Client Name below Company Name
                    p.drawString(x_positions[2], y_position, f"Client: {client_name}")
                    y_position -= 15
            
                    seen_vouchers.add(payment.vouch_num)
            
            # Total for Payments
            if y_position < 50:
                p.showPage()
                y_position = height - 50
            p.setFont("Helvetica-Bold", 10)
            p.drawString(x_positions[2], y_position, "Grand Total:")
            p.drawString(x_positions[3], y_position, f"{total_payment_amount:.2f}")
            y_position -= 20
            
            # ---- Receipt Voucher Section ----
            p.setFont("Helvetica-Bold", 12)
            p.drawString(30, y_position, "Receipt Voucher")
            y_position -= 20
            
            # Table headers for receipts
            for i, header in enumerate(headers):
                p.setFont("Helvetica-Bold", 10)
                p.drawString(x_positions[i], y_position, header)
            y_position -= 20
            
            # Receipt details
            seen_vouchers = set()
            total_receipt_amount = 0
            
            for receipt in receipts:
                if receipt.vouch_num not in seen_vouchers:
                    # Pagination check
                    if y_position < 50:
                        p.showPage()
                        y_position = height - 50
                        p.setFont("Helvetica-Bold", 10)
                        for i, header in enumerate(headers):
                            p.drawString(x_positions[i], y_position, header)
                        y_position -= 20
                        p.setFont("Helvetica", 9)
            
                    payment_date = receipt.payment_date.strftime('%d/%m/%Y') if receipt.payment_date else 'N/A'
                    company_name = (
                        company_dict.get(receipt.clt_id, 'N/A')
                        if receipt.client_type == "Client"
                        else (receipt.comp_name if receipt.comp_name else 'N/A')
                    )
                    client_name = receipt.name or 'N/A'
                    total = float(receipt.total_amount or 0)
                    total_receipt_amount += total
            
                    # Receipt line 1: Info
                    p.drawString(x_positions[0], y_position, payment_date)
                    p.drawString(x_positions[1], y_position, receipt.vouch_num)
                    p.drawString(x_positions[2], y_position, company_name)
                    p.drawString(x_positions[3], y_position, f"{total:.2f}")
                    y_position -= 12
            
                    # Receipt line 2: Client Name below Company Name
                    p.drawString(x_positions[2], y_position, f"Client: {client_name}")
                    y_position -= 15
            
                    seen_vouchers.add(receipt.vouch_num)
            
            # Grand Total for Payments
            if y_position < 50:
                p.showPage()
                y_position = height - 50
            p.setFont("Helvetica-Bold", 10)
            p.drawString(x_positions[2], y_position, "Grand Total:")
            p.drawString(x_positions[3], y_position, f"{total_receipt_amount:.2f}")
            y_position -= 20  # Space for the next row
            
            # ---- Receipt Voucher Section ----
            # Total Payment Amount
            p.setFont("Helvetica-Bold", 10)
            p.drawString(30, y_position, f"Total Payment Amount: {total_payment_amount:.2f}")
            y_position -= 15
            
            # Total Receipt Amount
            p.setFont("Helvetica-Bold", 10)
            p.drawString(30, y_position, f"Total Receipt Amount: {total_receipt_amount:.2f}")
            y_position -= 15
            
            # Profit & Loss Calculation (Receipt - Payment)
            profit_loss = total_receipt_amount - total_payment_amount
            p.setFont("Helvetica-Bold", 12)
            p.drawString(30, y_position, f"Profit & Loss: {profit_loss:.2f}")
            y_position -= 20

            
            # Save PDF
            p.showPage()
            p.save()
            
            return response


    return render(request, "profit_loss.html", {'session_roleid': session_roleid})

def client_project(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        data = tbl_pending.objects.all()
        clients = master_client.objects.all()
        projects = master_product.objects.all()
        
        com_dict = {client.clt_id: client.name for client in clients}
         
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        client_id = request.GET.get('client_id')
        product = request.GET.get('product')
        amount = request.GET.get('amount')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(created_time__range=[from_date, to_date])
                
            except ValueError:
                pass
        
        if client_id:
            query |= Q(client_id__icontains=client_id)
        if product:
            query |= Q(product__icontains=product)
        if amount:
            query |= Q(amount__icontains=amount)
        
        data = data.filter(query)
        data = data.order_by('-id')
        
        for job_obj in data:
            job_obj.client_name = com_dict.get(job_obj.client_id, "Unknown Company")
         
        return render(request,"client_project.html",{'projects':projects,'clients':clients,'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def add_client_project(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        clients = master_client.objects.all()
        projects = master_product.objects.all()
        
        return render(request, "add_client_project.html", {'projects':projects,'clients':clients,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def add_client_pro(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        
        if request.method == 'POST':
            userid = request.session['session_id']
            client_id = request.POST['client_id']
            product = request.POST['product']
            amount = request.POST['amount']
            
            new_product= tbl_pending.objects.create(
                client_id = client_id,
                product = product,
                amount = amount,
                add_by_id = userid,
                add_by_name = Username,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_product.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add Client project",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            # return redirect(add_client_project)
            return JsonResponse({'status': 'success', 'message': f'Client project added successfully!'})
         
            return render(request, "add_client_project.html", {'session_roleid':session_roleid}) 
    else:
        return redirect(login)
        
def edit_client_pro(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid') 
        clients = master_client.objects.all()
        projects = master_product.objects.all()
        
        products = get_object_or_404(tbl_pending, id=id)
        if request.method == 'POST':
            products.client_id = request.POST['client_id']
            products.product = request.POST['product']
            products.amount = request.POST['amount']
            products.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit Client project",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

            return JsonResponse({
                    'status': 'success',
                    'message': f'Client project has been successfully updated!'
                })
                
        return render(request, "add_client_project.html", {
            'products':products,
            'projects':projects,
            'clients':clients,
            'session_roleid': session_roleid,
            'is_edit': True,
        })
    else:
        return redirect(login)
        
def delete_client_pro(request, id):
    if 'session_id' in request.session:
        post = get_object_or_404(tbl_pending, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete Client project",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        post.delete() 
        
        return JsonResponse({'success': True, 'product': post.product})
    else:
        return redirect(login)
        
# def add_pending(request):
#     if 'session_id' in request.session:
#         session_roleid = request.session.get('session_roleid')
#         Username = request.session['session_user']
#         user_compeny = request.session['user_compney']
        
#         if request.method == 'POST':
#             userid = request.session['session_id']
#             client_id = request.POST['client_id']
#             product = request.POST['product']
#             amount = request.POST['amount']
            
#             new_product= tbl_pending.objects.create(
#                 client_id = client_id,
#                 product = product,
#                 amount = amount,
#                 add_by_id = userid,
#                 add_by_name = Username,
#                 created_time = timezone.now() + timedelta(hours=5, minutes=30),
#             )
#             new_product.save()
            
#             tbl_messages.objects.create(
#                 message_name = request.session['session_user'],
#                 change_status=f"Add Pending report",
#                 added_date = timezone.now() + timedelta(hours=5, minutes=30),
#                 company_id = request.session['company_id']
#             )
#             return JsonResponse({'status': 'success', 'message': f'Client project added successfully!'})
            
#             return render(request, "add-total-pending.html", {'session_roleid':session_roleid}) 
#     else:
#         return redirect(login)

def add_amc(request):
    if 'session_id' in request.session:
        company_id = request.session['company_id']
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        user_compeny = request.session['user_compney']
        Username = request.session['session_user']
        citys = master_city.objects.all()
            
        data = tbl_amc.objects.all()
        client = master_client.objects.all
        return render(request, "amc-leasting.html", {
            'data': data,
            'citys':citys,
            'client': client,
            'Username': Username,
            'session_id': session_id,
            'session_roleid': session_roleid,
            'comp_name': user_compeny,
            'companey_list': master_company.objects.all(),
            'company_id': company_id
        })
    else:
        return redirect(login) 
        

def addamc(request):
    if 'session_id' in request.session:
        company_id = request.session['company_id']
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')

        if request.method == 'POST':
            clt_id = request.POST.get('clt_id')
            p_name = request.POST.get('p_name')
            amc_type = request.POST.get('amc_type')
            amc_percentage = request.POST.get('amc_percentage')
            amc_amount = request.POST.get('amc_amount')
            server_sdate = request.POST.get('server_sdate')
            server_edate = request.POST.get('server_edate')
            server_price = request.POST.get('server_price')
            Domain_type = request.POST.get('Domain_type')
            domain_company = request.POST.get('domain_company', '')
            dom_startdate = request.POST.get('dom_startdate', '')
            dom_redate = request.POST.get('dom_redate', '')
            dom_amount = request.POST.get('dom_amount', '')
            
            # name = request.POST.get('name')
            # clt_id = request.POST.get('clt_id')
            # email = request.POST.get('email')
            # mobile = request.POST.get('mobile')
            # address = request.POST.get('address')
            # city = request.POST.get('city')
            # state = request.POST.get('state')
            # country = request.POST.get('country')
            # p_name = request.POST.get('p_name')
            # client_name = request.POST.get('client_name')
            # amc_type = request.POST.get('amc_type')
            # amc_amount = request.POST.get('amc_amount')
            # amc_redate = request.POST.get('amc_redate')
            # project_include = request.POST.get('project_include')
            # Domain_type = request.POST.get('Domain_type')
            # domain_company = request.POST.get('domain_company', '')
            # dom_redate = request.POST.get('dom_redate', '')
            # dom_amount = request.POST.get('dom_amount', '')
            # host_ser_type = request.POST.get('host_ser_type')
            # host_ser_price = request.POST.get('host_ser_price')
            # host_ser_redate = request.POST.get('host_ser_redate')
            # host_type = request.POST.get('host_type', '')
            # host_amount = request.POST.get('host_amount', '')

            clients = master_client.objects.filter(clt_id=clt_id).first()
            company_name = clients.comp_name if clients else "Unknown Company"
            client_name = clients.name if clients else "Unknown Client"
            # company_ids = clients.company_id if clients else "0"
 
            # client = master_client.objects.get(clt_id=clt_id)
            # client.name = client_name
            # client.comp_name = company_name
            # client.email = email
            # client.mobile = mobile
            # client.address = address
            # client.city = city
            # client.state = state
            # client.country = country
            # client.save()

            try:
                dom_startdate = datetime.strptime(dom_startdate, '%Y-%m-%d') if dom_startdate else None
                dom_redate = datetime.strptime(dom_redate, '%Y-%m-%d') if dom_redate else None
            except ValueError:
                return render(request, "amc-form.html", {
                    'client': master_client.objects.all(),
                    'error': 'Invalid date format. Please use YYYY-MM-DD.'
                })
                
            amc_entry = tbl_amc(
                clt_id = clt_id,
                company_name = company_name,
                name = client_name,
                p_name = p_name,
                amc_type = amc_type,
                amc_percentage = amc_percentage,
                amc_amount = amc_amount,
                server_sdate = server_sdate,
                server_edate = server_edate,
                server_price = server_price,
                Domain_type = Domain_type,
                domain_company = domain_company,
                dom_startdate = dom_startdate,
                dom_redate = dom_redate,
                dom_amount = dom_amount, 
                
                
                # clt_id = clt_id,
                # name = client_name,
                # email = email,
                # mobile = mobile,
                # address = address,
                # city = city,
                # state = state,
                # country = country,
                # p_name = p_name,
                # company_name = company_name,
                # amc_type = amc_type,
                # amc_amount = amc_amount,
                # amc_redate = amc_redate,
                # project_include = project_include,
                # Domain_type = Domain_type,
                # domain_company = domain_company,
                # dom_redate = dom_redate,
                # dom_amount = dom_amount,
                # host_ser_type = host_ser_type,
                # host_ser_price = host_ser_price,
                # host_ser_redate = host_ser_redate,
                # host_type = "Same" if host_type else "Different",
                # host_amount = host_amount,
                company_id=company_id,
                add_by_id=request.session['session_id'],
                add_by_name=request.session['session_user'],
                create_time=timezone.now() + timedelta(hours=5, minutes=30),
            )
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add AMC - {company_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            try:
                amc_entry.save()
                # return redirect('AMC')
                return JsonResponse({'status': 'success', 'message': f'AMC {company_name} added successfully!'})
            except ValidationError as e:
                return render(request, "amc-leasting.html", {
                    'client': master_client.objects.all(),
                    'error': e.messages
                })
                
        client = master_client.objects.all()
        return render(request, "amc-leasting.html", {'client': client,'session_roleid':session_roleid, is_edit : True})

    else:
        return redirect('login')
        

def edit_amc(request, amc_id):
    if 'session_id' in request.session:
        company_id = request.session['company_id']
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        citys = master_city.objects.all()

        amc_entry = get_object_or_404(tbl_amc, amc_id=amc_id)

        if request.method == 'POST':
            
            clt_id = request.POST.get('clt_id')
            p_name = request.POST.get('p_name')
            amc_type = request.POST.get('amc_type')
            amc_percentage = request.POST.get('amc_percentage')
            amc_amount = request.POST.get('amc_amount')
            server_sdate = request.POST.get('server_sdate')
            server_edate = request.POST.get('server_edate')
            server_price = request.POST.get('server_price')
            Domain_type = request.POST.get('Domain_type')
            domain_company = request.POST.get('domain_company', '')
            dom_startdate = request.POST.get('dom_startdate', '')
            dom_redate = request.POST.get('dom_redate', '')
            dom_amount = request.POST.get('dom_amount', '')
            
            # Extract data from the form
            # clt_id = request.POST.get('clt_id')
            # email = request.POST.get('email')
            # mobile = request.POST.get('mobile')
            # address = request.POST.get('address')
            # city = request.POST.get('city')
            # state = request.POST.get('state')
            # country = request.POST.get('country')
            # p_name = request.POST.get('p_name')
            # # company_name = request.POST.get('company_name')
            # client_name = request.POST.get('client_name')
            # amc_type = request.POST.get('amc_type')
            # amc_amount = request.POST.get('amc_amount')
            # amc_redate = request.POST.get('amc_redate')
            # project_include = request.POST.get('project_include')
            # Domain_type = request.POST.get('Domain_type')
            # domain_company = request.POST.get('domain_company', '')
            # dom_redate = request.POST.get('dom_redate', '')
            # dom_amount = request.POST.get('dom_amount', '')
            # host_ser_type = request.POST.get('host_ser_type')
            # host_ser_price = request.POST.get('host_ser_price')
            # host_ser_redate = request.POST.get('host_ser_redate')
            # host_type = request.POST.get('host_type', '')
            # host_amount = request.POST.get('host_amount', '') 
            
            clients = master_client.objects.filter(clt_id=clt_id).first()
            company_name = clients.comp_name if clients else "Unknown Company"
            client_name = clients.name if clients else "Unknown Client"
            # company_ids = clients.company_id if clients else "0"

            # client = master_client.objects.get(clt_id=clt_id)
            # client.name = client_name
            # client.comp_name = company_name
            # client.email = email
            # client.mobile = mobile
            # client.address = address
            # client.city = city
            # client.state = state
            # client.country = country
            # client.save()

            try:   
                dom_startdate = datetime.strptime(dom_startdate, '%Y-%m-%d') if dom_startdate else None
                dom_redate = datetime.strptime(dom_redate, '%Y-%m-%d') if dom_redate else None
            except ValueError:
                return render(request, "amc-form.html", {
                    'client': master_client.objects.all(),
                    'error': 'Invalid date format. Please use YYYY-MM-DD.'
                })

            # Update the AMC entry
            amc_entry.clt_id = clt_id
            amc_entry.company_name = company_name
            amc_entry.name = client_name
            amc_entry.p_name = p_name
            amc_entry.amc_type = amc_type
            amc_entry.amc_percentage = amc_percentage
            amc_entry.amc_amount = amc_amount
            amc_entry.server_sdate = server_sdate
            amc_entry.server_edate = server_edate
            amc_entry.server_price = server_price
            amc_entry.Domain_type = Domain_type
            amc_entry.domain_company = domain_company
            amc_entry.dom_startdate = dom_startdate
            amc_entry.dom_redate = dom_redate
            amc_entry.dom_amount = dom_amount
            
            # amc_entry.clt_id = clt_id
            # amc_entry.name = client_name
            # amc_entry.email = email
            # amc_entry.mobile = mobile
            # amc_entry.address = address
            # amc_entry.city = city
            # amc_entry.state = state
            # amc_entry.country = country
            # amc_entry.p_name = p_name
            # amc_entry.company_name = company_name
            # amc_entry.amc_type = amc_type
            # amc_entry.amc_amount = amc_amount
            # amc_entry.amc_redate = amc_redate
            # amc_entry.project_include = project_include
            # amc_entry.Domain_type = Domain_type
            # amc_entry.domain_company = domain_company
            # amc_entry.dom_redate = dom_redate
            # amc_entry.dom_amount = dom_amount
            # amc_entry.host_ser_type = host_ser_type
            # amc_entry.host_ser_price = host_ser_price
            # amc_entry.host_ser_redate = host_ser_redate
            # amc_entry.host_type = "Same" if host_type else "Different"
            # amc_entry.host_amount = host_amount
            # amc_entry.company_id = company_ids
            amc_entry.update_by_id = session_id
            amc_entry.update_by_name = request.session['session_user']
            amc_entry.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit AMC - {company_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            # return redirect('AMC')
            return JsonResponse({
                    'status': 'success',
                    'message': f'AMC {company_name} has been successfully updated!'
                })

        # Render the form with existing data if it's a GET request
        client = master_client.objects.all()
        data = tbl_amc.objects.all()
        return render(request, "amc-leasting.html", {
            'client': client,
            'citys':citys,
            'session_roleid':session_roleid,
            'amc_entry': amc_entry,
            'data': data,
            'is_edit': True  # Flag for edit mode
        })
    else:
        return redirect('login')
        
  

def delete_amc(request, amc_id):
    if 'session_id' in request.session:
        amc_entry = get_object_or_404(tbl_amc, amc_id=amc_id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete AMC - {amc_entry.clt_id}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        amc_entry.delete()

        return JsonResponse({'success': True, 'amc_id': amc_id})
    else:
        return redirect(login)

                
def AMC_excel(request):
    if request.method == 'POST':
        date_range = request.POST.get('from_date')

        if date_range:
            try:
                date_range = date_range.replace('+', ' ')  # handle URL-encoded spaces
                start_str, end_str = date_range.split(' - ')
                from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0, microsecond=0)
                to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)

                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                
                # if from_date:
                #     from_date = datetime.strptime(from_date, '%Y-%m-%d')
                # else:
                #     from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                # if to_date:
                #     to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                # else:
                #     to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                # if from_date > to_date:
                #     from_date, to_date = to_date, from_date
                    
            except ValueError:
                return HttpResponse("Invalid date format.", status=400)
        else:
            return HttpResponse("Please select a date.", status=404)

        AMC_entries = tbl_amc.objects.filter(
            create_time__range=[from_date, to_date]
        )

        if AMC_entries.count() == 0:
            return HttpResponse("No records found for the given date range.", status=404)

        wb = Workbook()
        ws = wb.active
        ws.title = "AMC Entries"

        headers = [ "ID", "Company Name","Project Name", "AMC Include", "AMC Percentage", "AMC Price", "Server start-date",
                    "Server end-date", "Server price", "Domain Type", "Domain Comany Name", "Start Date", "End Date", "Domain Price"]
        ws.append(headers)

        for entry in AMC_entries:
            server_sdate = entry.server_sdate.strftime('%d/%m/%Y') if entry.server_sdate else 'N/A'
            server_edate = entry.server_edate.strftime('%d/%m/%Y') if entry.server_edate else 'N/A'
            dom_startdate = entry.dom_startdate.strftime('%d/%m/%Y') if entry.dom_startdate else 'N/A'
            dom_redate = entry.dom_redate.strftime('%d/%m/%Y') if entry.dom_redate else 'N/A'
           
            ws.append([
                entry.amc_id,
                entry.company_name,
                entry.p_name,
                entry.amc_type,
                entry.amc_percentage,
                entry.amc_amount,
                server_sdate,
                server_edate,
                entry.server_price,
                entry.Domain_type,
                entry.domain_company,
                dom_startdate,
                dom_redate,
                entry.dom_amount,
            ])

        response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        response['Content-Disposition'] = 'attachment; filename="AMC-Report.xlsx"'
        wb.save(response)

        return response

def AMC(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()  
        companies = master_company.objects.all()
        session_id = request.session.get('session_id')
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_amc.objects.filter(company_id=selected_company_id)
                else:
                    data = tbl_amc.objects.all()
            else:
                data = tbl_amc.objects.all()
           
            date_range_filter = request.GET.get('date_range')
            
            company_name = request.GET.get('company_name')
            p_name = request.GET.get('p_name')
            amc_type = request.GET.get('amc_type')
            amc_percentage = request.GET.get('amc_percentage')
            amc_amount = request.GET.get('amc_amount')
            server_sdate = request.GET.get('server_sdate')
            server_edate = request.GET.get('server_edate')
            server_price = request.GET.get('server_price')
            Domain_type = request.GET.get('Domain_type')
            domain_company = request.GET.get('domain_company')
            dom_startdate = request.GET.get('dom_startdate')
            dom_redate = request.GET.get('dom_redate')
            dom_amount = request.GET.get('dom_amount')
            
            if date_range_filter:
                try:
                    start_str, end_str = date_range_filter.split(' - ')
                    start_date = parser.parse(start_str.strip())
                    end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                    data = data.filter(create_time__gte=start_date, create_time__lte=end_date)
                except Exception as e:
                    print(f"Date parsing error: {e}")
                
            if company_name:
                data = data.filter(company_name__icontains=company_name)
            if p_name:
                data = data.filter(p_name__icontains=p_name)
            if amc_type:
                data = data.filter(amc_type__icontains=amc_type)
            if amc_percentage:
                data = data.filter(amc_percentage__icontains=amc_percentage)
            if amc_amount:
                data = data.filter(amc_amount__icontains=amc_amount)
            if server_sdate:
                data = data.filter(server_sdate__icontains=server_sdate)
            if server_edate:
                data = data.filter(server_edate__icontains=server_edate)
            if server_price:
                data = data.filter(server_price__icontains=server_price)
            if Domain_type:
                data = data.filter(Domain_type__icontains=Domain_type)
            if domain_company:
                data = data.filter(domain_company__icontains=domain_company)
            if dom_startdate:
                data = data.filter(dom_startdate__icontains=dom_startdate)
            if dom_redate:
                data = data.filter(dom_redate__icontains=dom_redate)
            if dom_amount:
                data = data.filter(dom_amount__icontains=dom_amount)
            
            # query = Q()
                
            # if from_date or to_date:
            #     try:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(create_time__range=[from_date, to_date])
                    
            #     except ValueError:
            #         pass
                
            # if name:
            #     query |= Q(name__icontains=name)
            # if email:
            #     query |= Q(email__icontains=email)
            # if mobile:
            #     query |= Q(mobile__icontains=mobile)
            # if address:
            #     query |= Q(address__icontains=address)
            # if city:
            #     query |= Q(city__icontains=city)
            # if state:
            #     query |= Q(state__icontains=state)
            # if country:
            #     query |= Q(country__icontains=country)
            # if p_name:
            #     query |= Q(p_name__icontains=p_name)
            # if amc_type:
            #     query |= Q(amc_type=amc_type)
            # if amc_amount:
            #     query |= Q(amc_amount__icontains=amc_amount)
            # if amc_redate:
            #     query |= Q(amc_redate__icontains=amc_redate)
            # if Domain_type:
            #     query |= Q(Domain_type=Domain_type)
            # if domain_company:
            #     query |= Q(domain_company__icontains=domain_company)
            # if dom_amount:
            #     query |= Q(dom_amount__icontains=dom_amount)
            # if dom_redate:
            #     query |= Q(dom_redate__icontains=dom_redate)
            # if host_ser_type:
            #     query |= Q(host_ser_type=host_ser_type)
            # if host_ser_price:
            #     query |= Q(host_ser_price__icontains=host_ser_price)
            # if host_ser_redate:
            #     query |= Q(host_ser_redate__icontains=host_ser_redate)
            # if project_include:
            #     query |= Q(project_include=project_include)
            # if host_type:
            #     query |= Q(host_type__icontains=host_type)
                
            # data = data.filter(query)
            data = data.order_by('-amc_id')
        
        return render(request, "view-amc-leasting.html", {'data':data,'cites': cites,'companies': companies, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) 
    else:
        return redirect(login)
    
def view_amc(request, amc_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        amc = get_object_or_404(tbl_amc, amc_id=amc_id)
        
        return render(request, 'view-amc.html', {'amc':amc,'session_roleid':session_roleid})
    else:
        return redirect(login)
 
def add_smo(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()  
        companies = master_company.objects.all()
        data = tbl_smo.objects.all()
        client = master_client.objects.all()
        smo_plan = tbl_smo_plan.objects.all()
           
        return render(request, "smo-leasting.html", {'smo_plan':smo_plan, "client_list":client,'data':data,'cites': cites,'companies': companies, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) 
    else:
        return redirect(login)

def post_report(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        data = tbl_post.objects.all()
        
        smo_clients = tbl_smo.objects.values_list('clt_id', flat=True)
        clients = master_client.objects.filter(clt_id__in=smo_clients)
        # clients = master_client.objects.all()
        
        com_dict = {status.clt_id: status.name for status in master_client.objects.all()}
        
        date_range_filter = request.GET.get('date_range')
        client_id = request.GET.get('client_id')
        no_of_post = request.GET.get('no_of_post')
        no_of_reel = request.GET.get('no_of_reel')
        remark = request.GET.get('remark')
        
        if date_range_filter:
            try:
                start_str, end_str = date_range_filter.split(' - ')
                start_date = parser.parse(start_str.strip())
                end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                data = data.filter(post_date__gte=start_date, post_date__lte=end_date)
            except Exception as e:
                print(f"Date parsing error: {e}")
        
        if client_id:
            data = data.filter(client_id__icontains=client_id)
        if no_of_post:
            data = data.filter(no_of_post__icontains=no_of_post)
        if no_of_reel:
            data = data.filter(no_of_reel__icontains=no_of_reel)
        if remark:
            data = data.filter(remark__icontains=remark)
        
        # query = Q()
            
        # if from_date or to_date:
        #     try:
        #         if from_date:
        #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
        #         else:
        #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
        #         if to_date:
        #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
        #         else:
        #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
        #         if from_date > to_date:
        #             from_date, to_date = to_date, from_date
                    
        #         query &= Q(created_time__range=[from_date, to_date])
                
        #     except ValueError:
        #         pass
        
        # if client_id:
        #     query |= Q(client_id__icontains=client_id)
        # if post_date:
        #     query |= Q(post_date__icontains=post_date)
        # if no_of_post:
        #     query |= Q(no_of_post__icontains=no_of_post)
        
        # data = data.filter(query)
        data = data.order_by('-id')
        
        for job_obj in data:
            job_obj.com_name = com_dict.get(job_obj.client_id, "Unknown Company") 
            
        return render(request, "post_report.html", {
            'session_roleid':session_roleid,
            'data': data,
            'clients':clients
        })
    else:
        return redirect(login)
        
def add_post(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        smo_clients = tbl_smo.objects.filter(service_type="SMO").values_list('clt_id', flat=True).distinct()
        clients = master_client.objects.filter(clt_id__in=smo_clients)
        # clients = master_client.objects.all()
        return render(request, "add_post.html", {'clients':clients,'session_roleid':session_roleid})
    else:
        return redirect(login)

def addpost(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            client_id = request.POST['client_id']
            post_date = request.POST['post_date']
            post_type = request.POST['post_type']
            remark = request.POST['remark']
            try:
                no_of_post = int(request.POST['no_of_post'])
            except ValueError:
                no_of_post = 0 

            try:
                no_of_reel = int(request.POST['no_of_reel'])
            except ValueError:
                no_of_reel = 0
            
            client = master_client.objects.filter(clt_id=client_id).first()
            client_name = client.name if client else "Unknown Client"
            
            new_post = tbl_post.objects.create(
                client_id = client_id,
                client_name = client_name, 
                post_date = post_date,
                post_type = post_type,
                no_of_post = no_of_post,
                no_of_reel = no_of_reel,
                remark = remark,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
                add_by_id =  request.session['session_id'],
                add_by_name =  request.session['session_user'],
            )
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add - Post Report - {client_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            smo = tbl_smo.objects.filter(clt_id=client_id).first()
            if smo:
                if post_type == "POST":
                    current_post_count = int(smo.post_count) if smo.post_count and smo.post_count != '0' else 0
                    new_post_count = current_post_count + no_of_post
                    smo.post_count = str(new_post_count)  # Update post_count
                elif post_type == "REEL":
                    current_reel_count = int(smo.reel_count) if smo.reel_count and smo.reel_count != '0' else 0
                    new_reel_count = current_reel_count + no_of_reel
                    smo.reel_count = str(new_reel_count)  # Update reel_count
                
                smo.save()
            
            new_post.save()
            # return redirect(post_report)
            return JsonResponse({'status': 'success', 'message': f'Post Report added successfully!'})
            
        return render(request, "add_post.html", {'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def edit_post(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        post = get_object_or_404(tbl_post, id=id)
        
        smo_clients = tbl_smo.objects.values_list('clt_id', flat=True)
        clients = master_client.objects.filter(clt_id__in=smo_clients)
        
        if request.method == 'POST':
            client_id = request.POST['client_id']
            post.client_id = client_id
            post.post_date = request.POST['post_date']
            post.post_type = request.POST['post_type']
            post.remark = request.POST['remark']
            
            no_of_post = request.POST.get('no_of_post', '')
            no_of_reel = request.POST.get('no_of_reel', '')
            
            try:
                no_of_post = int(no_of_post) if no_of_post else 0
            except ValueError:
                no_of_post = 0

            try:
                no_of_reel = int(no_of_reel) if no_of_reel else 0
            except ValueError:
                no_of_reel = 0
                
            post.no_of_post = no_of_post
            post.no_of_reel = no_of_reel
            
            client = master_client.objects.filter(clt_id=client_id).first()
            client_name = client.name if client else "Unknown Client"
            
            post.client_name = client_name
            post.save()
            
            all_post = tbl_post.objects.filter(client_id=client_id)
            total_post = 0
            total_reel = 0
            
            for post_ in all_post:
                total_post += int(post_.no_of_post)
                total_reel += int(post_.no_of_reel)
            
            smo_update = tbl_smo.objects.get(clt_id=client_id)
            
            smo_update.post_count = total_post
            smo_update.reel_count = total_reel
            
            smo_update.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name=request.session['session_user'],
                change_status=f"Edit Post Report - {client_name}",
                added_date=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            # return redirect("post_report")
            return JsonResponse({
                'status': 'success',
                'message': f'Post Report has been successfully updated!'
            })
        
        return render(request, "add_post.html", {
            'post': post,
            'session_roleid': session_roleid,
            'is_edit': True,
            'clients': clients
        })

    return redirect(login)

def delete_post(request, id):
    if 'session_id' in request.session:
        post = get_object_or_404(tbl_post, id=id)
        client_id = post.client_id
        client_name = post.client_name
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name=request.session['session_user'],
            change_status=f"Delete Post - {client_name}",
            added_date=timezone.now() + timedelta(hours=5, minutes=30),
            company_id=request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        post.delete()
        
        smo = tbl_smo.objects.filter(clt_id=client_id).first()
        if smo:
            total_post_count = tbl_post.objects.filter(client_id=client_id).aggregate(total_posts=models.Sum('no_of_post'))['total_posts']
            total_reel_count = tbl_post.objects.filter(client_id=client_id).aggregate(total_reels=models.Sum('no_of_reel'))['total_reels']
            
            total_post_count = total_post_count if total_post_count else 0
            total_reel_count = total_reel_count if total_reel_count else 0
            
            smo.post_count = int(total_post_count)
            smo.reel_count = int(total_reel_count)
            smo.save()
            
        return JsonResponse({'success': True, 'name': post.client_name})
    else:
        return redirect(login)
     
def addsmo(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            
            clt_id = request.POST['clt_id']
            c_name = request.POST['c_name']
            plan_id = request.POST['plan_id']
            remark = request.POST['remark']
            face_uname = request.POST['face_uname']
            face_pass = request.POST['face_pass']
            insta_uname = request.POST['insta_uname']
            insta_pass = request.POST['insta_pass']
            
            # mobile = request.POST['mobile']
            # address = request.POST['address']
            # city = request.POST['city']
            # state = request.POST['state']
            # country = request.POST['country']
            # service_type = request.POST['service_type']
            # plan_type = request.POST['plan_type']
            # start_date = request.POST['start_date']
            # end_date = request.POST['end_date']
            # no_of_post = request.POST['no_of_post']
            # no_of_reel = request.POST['no_of_reel']
            # seo_start = request.POST['seo_start']
            # seo_expire = request.POST['seo_expire']
            
            
            clients = master_client.objects.filter(clt_id=clt_id).first()
            company_name = clients.comp_name if clients else "Unknown Company"
            clt_company_id = clients.company_id if clients else "Unknown Company"
            # client_name = clients.name if clients else "Unknown Client"
            # company_ids = clients.company_id if clients else "0"
            
            
            # try:
            #     start_date = datetime.strptime(start_date, '%Y-%m-%d') if start_date else None
            #     end_date = datetime.strptime(end_date, '%Y-%m-%d') if end_date else None
            #     seo_start = datetime.strptime(seo_start, '%Y-%m-%d') if seo_start else None
            #     seo_expire = datetime.strptime(seo_expire, '%Y-%m-%d') if seo_expire else None
            # except ValueError:
            #     return render(request, "amc-form.html", {
            #         'client': master_client.objects.all(),
            #         'error': 'Invalid date format. Please use YYYY-MM-DD.'
            #     })
                
             
            # client = master_client.objects.get(clt_id=clt_id)
            # client.name = client_name
            # client.comp_name = company_name
            # client.email = email
            # client.mobile = mobile
            # client.address = address
            # client.city = city
            # client.state = state
            # client.country = country
            # client.save()
            
            plan = tbl_smo_plan.objects.filter(id=plan_id).first()
            start_date = timezone.now() + timedelta(hours=5, minutes=30)  # IST timezone offset
            no_of_post = plan.no_of_post if plan else None
            no_of_reel = plan.no_of_reel if plan else None
            plan_type = plan.plan_name if plan else None
            plan_duration = plan.plan_duration if plan else None
            
            end_date = None
            if plan and plan.plan_duration:
                # Example plan_duration formats: "30", "30 days", "3 months", "1 year"
                duration_str = plan.plan_duration.strip().lower()

                try:
                    if "day" in duration_str:
                        days = int(''.join(filter(str.isdigit, duration_str)))
                        end_date = start_date + timedelta(days=days)
                    elif "month" in duration_str:
                        months = int(''.join(filter(str.isdigit, duration_str)))
                        # Adding months is tricky, approximate with 30 days per month
                        end_date = start_date + timedelta(days=months * 30)
                    elif "year" in duration_str:
                        years = int(''.join(filter(str.isdigit, duration_str)))
                        end_date = start_date + timedelta(days=years * 365)
                    else:
                        # Assume plain number of days if no unit
                        days = int(duration_str)
                        end_date = start_date + timedelta(days=days)
                except Exception as e:
                    end_date = None  # fallback if parsing fails
            
            new_lead = tbl_smo.objects.create(
                
                clt_id = clt_id,
                comp_name = company_name,
                c_name = c_name,
                remark = remark,
                face_uname = face_uname,
                face_pass = face_pass,
                insta_uname = insta_uname,
                insta_pass = insta_pass,
                service_type = "SMO",
                plan_id = plan_id,
                
                plan_type = plan_type,
                start_date = start_date,
                end_date = end_date,
                no_of_post = no_of_post,
                no_of_reel = no_of_reel,
                
                create_time = timezone.now() + timedelta(hours=5, minutes=30),
                company_id =  clt_company_id,
                add_by_id =  request.session['session_id'],
                add_by_name =  request.session['session_user'],
                user_id =  request.session['session_id'],
                
                # email = email,
                # mobile = mobile,
                # address = address,
                # city = city,
                # state = state,
                # country = country,
                # seo_start = seo_start,
                # seo_expire = seo_expire,
                
            )
            
            tbl_smo_plan_hsty.objects.create(
                clt_id = clt_id,
                plan_id = plan_id,
                smo_id = new_lead.smoId,
                plan_name = plan_type,
                plan_duration = plan_duration,
                start_date = start_date,
                end_date = end_date,
                no_of_post = no_of_post,
                no_of_reel = no_of_reel,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = clt_company_id,
                add_by_id =  request.session['session_id'],
                add_by_name =  request.session['session_user'],
            )
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add SMO - {company_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            try:
                new_lead.save()
                return JsonResponse({'status': 'success', 'message': f'SMO {company_name} added successfully!'})
                # return redirect(add_smo)
            except ValidationError as e:
                return render(request, "smo-leasting.html", {
                    'client': master_client.objects.all(),
                    'error': e.messages
                })
                
            return redirect(add_smo)
            
        return render(request, "smo-leasting.html", {'session_roleid':session_roleid})
    else:
        return redirect(login)    

def edit_smo(request, smoId):  
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        lead = get_object_or_404(tbl_smo, smoId=smoId)
        Username = request.session['session_user']
        userid = request.session['session_id']
        cites = master_city.objects.all()  
        smo_plan = tbl_smo_plan.objects.all()
        
        if request.method == 'POST':
            clt_id = request.POST.get('clt_id')
            c_name = request.POST.get('c_name')
            plan_id = request.POST.get('plan_id')
            remark = request.POST.get('remark')
            face_uname = request.POST.get('face_uname')
            face_pass = request.POST.get('face_pass')
            insta_uname = request.POST.get('insta_uname')
            insta_pass = request.POST.get('insta_pass')
    
            clients = master_client.objects.filter(clt_id=clt_id).first()
            company_name = clients.comp_name if clients else "Unknown Company"
    
            start_date = request.POST.get('start_date')
            end_date = request.POST.get('end_date')
            no_of_post = request.POST.get('no_of_post')
            no_of_reel = request.POST.get('no_of_reel')
    
            try:
                new_plan_id = int(plan_id)
            except (ValueError, TypeError):
                new_plan_id = None
    
            old_plan_id = lead.plan_id if lead.plan_id else None
            plan_changed = new_plan_id != old_plan_id
    
            print(f"Old plan_id: {old_plan_id}, New plan_id: {new_plan_id}, Plan changed: {plan_changed}")
    
            def is_field_changed(new_val, old_val):
                if new_val is None or new_val == '':
                    return False
                # For date fields, convert to string for comparison if necessary
                if hasattr(old_val, 'strftime'):
                    old_val_str = old_val.strftime('%Y-%m-%d') if old_val else ''
                    return str(new_val) != old_val_str
                return str(new_val) != str(old_val)
    
            manual_edit = (
                is_field_changed(start_date, lead.start_date) or
                is_field_changed(end_date, lead.end_date) or
                is_field_changed(no_of_post, lead.no_of_post) or
                is_field_changed(no_of_reel, lead.no_of_reel)
            )
    
            if plan_changed:
                plan = tbl_smo_plan.objects.filter(id=new_plan_id).first()
                if plan:
                    # Check if start_date was manually given (POST field)
                    if start_date and start_date.strip() != '':
                        start_date_obj = parse_date(start_date)
                    else:
                        # Keep old start date if not manually updated
                        start_date_obj = lead.start_date
            
                    no_of_post_val = plan.no_of_post
                    no_of_reel_val = plan.no_of_reel
                    plan_type = plan.plan_name
            
                    # Calculate end_date based on plan_duration relative to start_date_obj
                    end_date_obj = None
                    duration_str = plan.plan_duration.strip().lower() if plan.plan_duration else ''
                    try:
                        if "day" in duration_str:
                            days = int(''.join(filter(str.isdigit, duration_str)))
                            end_date_obj = start_date_obj + timedelta(days=days)
                        elif "month" in duration_str:
                            months = int(''.join(filter(str.isdigit, duration_str)))
                            end_date_obj = start_date_obj + timedelta(days=months * 30)
                        elif "year" in duration_str:
                            years = int(''.join(filter(str.isdigit, duration_str)))
                            end_date_obj = start_date_obj + timedelta(days=years * 365)
                        else:
                            days = int(duration_str) if duration_str.isdigit() else 0
                            end_date_obj = start_date_obj + timedelta(days=days)
                    except Exception as e:
                        print(f"Error parsing duration: {e}")
                        end_date_obj = None
                else:
                    # Plan not found fallback
                    start_date_obj = lead.start_date
                    end_date_obj = lead.end_date
                    no_of_post_val = lead.no_of_post
                    no_of_reel_val = lead.no_of_reel
                    plan_type = lead.plan_type

    
            elif manual_edit:
                # Update fields based on manual input
                start_date_obj = parse_date(start_date) if start_date else lead.start_date
                end_date_obj = parse_date(end_date) if end_date else lead.end_date
    
                try:
                    no_of_post_val = int(no_of_post) if no_of_post else lead.no_of_post
                except ValueError:
                    no_of_post_val = lead.no_of_post
    
                try:
                    no_of_reel_val = int(no_of_reel) if no_of_reel else lead.no_of_reel
                except ValueError:
                    no_of_reel_val = lead.no_of_reel
    
                plan_type = lead.plan_type
    
            else:
                # No change, keep old values
                start_date_obj = lead.start_date
                end_date_obj = lead.end_date
                no_of_post_val = lead.no_of_post
                no_of_reel_val = lead.no_of_reel
                plan_type = lead.plan_type
    
            # Update lead fields
            lead.clt_id = clt_id
            lead.comp_name = company_name
            lead.c_name = c_name
            lead.remark = remark
            lead.face_uname = face_uname
            lead.face_pass = face_pass
            lead.insta_uname = insta_uname
            lead.insta_pass = insta_pass
    
            lead.plan_type = plan_type
            lead.start_date = start_date_obj
            lead.end_date = end_date_obj
            lead.no_of_post = no_of_post_val
            lead.no_of_reel = no_of_reel_val
            lead.plan_id = new_plan_id
    
            try:
                lead.save()
                
                history_qs = tbl_smo_plan_hsty.objects.filter(smo_id=lead.smoId).order_by('-created_time')

                if history_qs.exists():
                    history_entry = history_qs.first()  # Latest or only one
                
                    history_entry.clt_id = clt_id
                    history_entry.plan_id = new_plan_id
                    history_entry.plan_name = plan_type
                    history_entry.plan_duration = plan.plan_duration if plan_changed and plan else history_entry.plan_duration
                    history_entry.start_date = start_date_obj
                    history_entry.end_date = end_date_obj
                    history_entry.no_of_post = no_of_post_val
                    history_entry.no_of_reel = no_of_reel_val
                    # history_entry.company_id = lead.company_id
                    # history_entry.add_by_id = userid
                    # history_entry.add_by_name = Username
                    # history_entry.created_time = now() + timedelta(hours=5, minutes=30)
                
                    history_entry.save()
                
                return JsonResponse({'status': 'success', 'message': f'SMO {company_name} updated successfully!'})
            except ValidationError as e:
                return render(request, "smo-leasting.html", {
                    'lead': lead,
                    'client_list': master_client.objects.all(),
                    'smo_plan': tbl_smo_plan.objects.all(),
                    'error': e.messages,
                    'session_roleid': session_roleid,
                    'is_edit': True,
                })
    
        else:
            return render(request, "smo-leasting.html", {
                'lead': lead,
                'client_list': master_client.objects.all(),
                'smo_plan': tbl_smo_plan.objects.all(),
                'session_roleid': session_roleid,
                'is_edit': True,
            })
    else:
        return redirect(login)
                  
def delete_smo(request, smoId):
    if 'session_id' in request.session:
        client = get_object_or_404(tbl_smo, smoId=smoId)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete - {client.service_type} - {client.comp_name}", 
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        client.delete()

        return JsonResponse({'success': True, 'smoId': smoId})
    else:
        return redirect(login)
        
def view_smo(request, smoId):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        # Fetch the SMO object based on smoId
        smo = get_object_or_404(tbl_smo, smoId=smoId)
        smo_plan = tbl_smo_plan_hsty.objects.filter(smo_id=smoId)
        # Fetch the latest plan from tbl_smo_plan_hsty based on the most recent start_date
        latest_smo_plan = tbl_smo_plan_hsty.objects.filter(smo_id=smoId).order_by('-start_date').first()
        
        # Fetch posts and reels related to this client
        post_data = tbl_post.objects.filter(client_id=smo.clt_id, post_type='POST')
        reel_data = tbl_post.objects.filter(client_id=smo.clt_id, post_type='REEL')

        # Safe int conversion function to handle None, empty, or invalid values
        def safe_int(value):
            if value in [None, '', 'null']:
                return 0
            try:
                return int(value)
            except (ValueError, TypeError):
                return 0
        
        # Default values if no plan is found
        if latest_smo_plan:
            no_of_post = safe_int(latest_smo_plan.no_of_post)
            no_of_reel = safe_int(latest_smo_plan.no_of_reel)
        else:
            no_of_post = 0
            no_of_reel = 0
        
        # Post and reel counts from the SMO table
        post_count = safe_int(smo.post_count)
        reel_count = safe_int(smo.reel_count)

        # Calculate pending posts and reels
        pending_posts = max(0, no_of_post - post_count)
        pending_reel = max(0, no_of_reel - reel_count)

        # Pass the data to the template
        return render(request, 'view-smo.html', {
            'smo': smo,
            'smo_plan': smo_plan,
            'latest_smo_plan': latest_smo_plan,
            'post_data': post_data,
            'reel_data': reel_data,
            'pending_reel': pending_reel,
            'pending_posts': pending_posts,
            'session_roleid': session_roleid
        })
    else:
        return redirect(login) 

  
def SMO(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()  
        companies = master_company.objects.all()
        smo_plan = tbl_smo_plan.objects.all()
        session_id = request.session.get('session_id')
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_smo.objects.filter(service_type="SMO",company_id=selected_company_id)
                else:
                    data = tbl_smo.objects.filter(service_type="SMO")
            else:
                data = tbl_smo.objects.filter(service_type="SMO")
        
            date_range_filter = request.GET.get('date_range')
            comp_name = request.GET.get('comp_name')
            c_name = request.GET.get('c_name')
            plan_id = request.GET.get('plan_id')
            start_date = request.GET.get('start_date')
            end_date = request.GET.get('end_date')
            no_of_post = request.GET.get('no_of_post')
            no_of_reel = request.GET.get('no_of_reel')
            remark = request.GET.get('remark')
            
            if date_range_filter:
                try:
                    start_str, end_str = date_range_filter.split(' - ')
                    start_dt = parser.parse(start_str.strip())
                    end_dt = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                    data = data.filter(create_time__gte=start_dt, create_time__lte=end_dt)
                except Exception as e:
                    print(f"Date parsing error: {e}")
                
            if comp_name:
                data = data.filter(comp_name__icontains=comp_name)
            if c_name:
                data = data.filter(c_name__icontains=c_name)
            if plan_id:
                data = data.filter(plan_id__icontains=plan_id)
            if start_date:
                data = data.filter(start_date__icontains=start_date)
            if end_date:
                data = data.filter(end_date__icontains=end_date)
            if no_of_post:
                data = data.filter(no_of_post__icontains=no_of_post)
            if no_of_reel:
                data = data.filter(no_of_reel__icontains=no_of_reel)
            if remark:
                data = data.filter(remark__icontains=remark)
            
            # query = Q()
                
            # if from_date or to_date:
            #     try:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(create_time__range=[from_date, to_date])
                    
            #     except ValueError:
            #         pass
                
            # if comp_name:
            #     query |= Q(comp_name__icontains=comp_name)
            # if c_name:
            #     query |= Q(c_name__icontains=c_name)
            # if email:
            #     query |= Q(email__icontains=email)
            # if mobile:
            #     query |= Q(mobile__icontains=mobile)
            # if address:
            #     query |= Q(address__icontains=address)
            # if city:
            #     query |= Q(city__icontains=city)
            # if state:
            #     query |= Q(state__icontains=state)
            # if country:
            #     query |= Q(country__icontains=country)
            # if service_type:
            #     query |= Q(service_type__icontains=service_type)
            # if plan_type:
            #     query |= Q(plan_type__icontains=plan_type)
            # if start_date:
            #     query |= Q(start_date__icontains=start_date)
            # if end_date:
            #     query |= Q(end_date__icontains=end_date)
            # if no_of_post:
            #     query |= Q(no_of_post__icontains=no_of_post)
            # if no_of_reel:
            #     query |= Q(no_of_reel__icontains=no_of_reel)
            # if remark:
            #     query |= Q(remark__icontains=remark)
            # if seo_start:
            #     query |= Q(seo_start__icontains=seo_start)
            # if seo_expire:
            #     query |= Q(seo_expire__icontains=seo_expire)
            
            # data = data.filter(query)
            data = data.order_by('-clt_id')  
            
            current_date = timezone.now()

            for item in data:
                item.show_renew = False  # default
            
                if item.end_date:
                    days_diff = (item.end_date - current_date).days
            
                    # Condition 1: Expiring within 7 days
                    if 0 <= days_diff <= 7:
                        item.show_renew = True
            
                    # Condition 2: Already expired and not renewed
                    elif item.end_date < current_date:
                        renewed = tbl_smo_plan_hsty.objects.filter(
                            smo_id=item.smoId,
                            start_date__gt=item.end_date
                        ).exists()
                        if not renewed:
                            item.show_renew = True 
           
        return render(request, "SMO.html", {'smo_plan':smo_plan,'data':data,'cites': cites,'companies': companies, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) 
    else:
        return redirect(login)
        
@csrf_exempt
def renew_smo_plan(request):
    if request.method == "POST":
        try:
            smo_id = request.POST.get("smo_id")
            plan_id = request.POST.get("plan_id")

            # Get the SMO and Plan
            smo = tbl_smo.objects.get(smoId=smo_id)
            plan = tbl_smo_plan.objects.filter(id=plan_id).first()

            # Get the current time and ensure it’s timezone aware
            now = timezone.now()

            # Make sure smo.end_date is timezone aware
            if smo.end_date and smo.end_date.tzinfo is None:
                smo.end_date = timezone.make_aware(smo.end_date, timezone.get_current_timezone())

            # Set start_date based on whether the plan is expired
            if smo.end_date and smo.end_date < now:
                start_date = now  # Use today's date if expired
            else:
                start_date = smo.end_date  # Use the current end date if not expired

            # Retrieve plan details
            no_of_post = plan.no_of_post if plan else None
            no_of_reel = plan.no_of_reel if plan else None
            plan_type = plan.plan_name if plan else None
            plan_duration = plan.plan_duration if plan else None

            # Calculate end_date based on plan duration
            end_date = None
            if plan and plan.plan_duration:
                duration_str = plan.plan_duration.strip().lower()
                try:
                    if "day" in duration_str:
                        days = int(''.join(filter(str.isdigit, duration_str)))
                        end_date = start_date + timedelta(days=days)
                    elif "month" in duration_str:
                        months = int(''.join(filter(str.isdigit, duration_str)))
                        end_date = start_date + timedelta(days=months * 30)
                    elif "year" in duration_str:
                        years = int(''.join(filter(str.isdigit, duration_str)))
                        end_date = start_date + timedelta(days=years * 365)
                    else:
                        days = int(duration_str)
                        end_date = start_date + timedelta(days=days)
                except Exception as e:
                    end_date = None

            # Save to history
            tbl_smo_plan_hsty.objects.create(
                clt_id=smo.clt_id,
                smo_id=smo.smoId,
                plan_id=plan.id,
                plan_name=plan.plan_name,
                plan_duration=plan.plan_duration,
                start_date=start_date,
                end_date=end_date,
                no_of_post=plan.no_of_post,
                no_of_reel=plan.no_of_reel,
                company_id=smo.company_id,
                add_by_id=request.session['session_id'],
                add_by_name=request.session['session_user'],
            )

            # Update main SMO table
            smo.plan_id = plan.id
            smo.plan_type = plan.plan_name
            smo.no_of_post = plan.no_of_post
            smo.no_of_reel = plan.no_of_reel
            smo.start_date = start_date
            smo.end_date = end_date
            smo.save()

            messages.success(request, "Plan renewed successfully.")
        except Exception as e:
            messages.error(request, f"Error: {e}")

    return redirect('SMO')
        
def smo_excel(request):
    if request.method == 'POST':
        from_date = request.POST.get('from_date') 
        to_date = request.POST.get('to_date')

        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
            except ValueError:
                pass
            
        else:
            return HttpResponse("Please select a date.", status=404)
            

        smo_entries = tbl_smo.objects.filter(
            create_time__range=[from_date, to_date]
        )

        if smo_entries.count() == 0:
            return HttpResponse("No records found for the given date range.", status=404)

        wb = Workbook()
        ws = wb.active
        ws.title = "payment voucher Entries"

        headers = [ "ID", "Client Name", "Client Company Name", "Email", 
                    "Mobile", "Address", "City", "State", "Country", "Service Type",
                    "SMO Plan", "SMO Start Date", "SMO Package Expire Date", "SMO Number of post","SMO Remark",
                    "SEO Package Start Date","SEO Package Expire Date","Added By"]
        ws.append(headers)
        

        for entry in smo_entries:
            start_date = entry.start_date.strftime('%d/%m/%Y') if entry.start_date else 'N/A'
            end_date = entry.end_date.strftime('%d/%m/%Y') if entry.end_date else 'N/A'
            seo_start = entry.seo_start.strftime('%d/%m/%Y') if entry.seo_start else 'N/A'
            seo_expire = entry.seo_expire.strftime('%d/%m/%Y') if entry.seo_expire else 'N/A'
            
            ws.append([
                entry.smoId,
                entry.c_name,
                entry.comp_name,
                entry.email,
                entry.mobile,
                entry.address,
                entry.city,
                entry.state,
                entry.country,
                entry.service_type,
                entry.plan_type,
                start_date,
                end_date,
                entry.no_of_post,
                entry.remark,
                seo_start,
                seo_expire,
                entry.add_by_name,
            ])

        response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        response['Content-Disposition'] = 'attachment; filename="SMO-Report.xlsx"'
        wb.save(response)

        return response
        
def SEO(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id') 
        cites = master_city.objects.all()  
        companies = master_company.objects.all()
        seo_plan = tbl_seo_plan.objects.all()
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_smo.objects.filter(service_type="SEO",company_id=selected_company_id)
                else:
                    data = tbl_smo.objects.filter(service_type="SEO")
            else:
                data = tbl_smo.objects.filter(service_type="SEO")
        
            date_range_filter = request.GET.get('date_range')
            comp_name = request.GET.get('comp_name')
            c_name = request.GET.get('c_name')
            seo_plan_id = request.GET.get('seo_plan_id')
            seo_start = request.GET.get('seo_start')
            seo_expire = request.GET.get('seo_expire')
            web_url = request.GET.get('web_url')
            remark = request.GET.get('remark')
            
            if date_range_filter:
                try:
                    start_str, end_str = date_range_filter.split(' - ')
                    start_dt = parser.parse(start_str.strip())
                    end_dt = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                    data = data.filter(create_time__gte=start_dt, create_time__lte=end_dt)
                except Exception as e:
                    print(f"Date parsing error: {e}")
                
            if c_name:
                data = data.filter(c_name__icontains=c_name)
            if seo_plan_id:
                data = data.filter(seo_plan_id__icontains=seo_plan_id)
            if seo_start:
                data = data.filter(seo_start__icontains=seo_start)
            if seo_expire:
                data = data.filter(seo_expire__icontains=seo_expire)
            if web_url:
                data = data.filter(web_url__icontains=web_url)
            if remark:
                data = data.filter(remark__icontains=remark)
                
            data = data.order_by('-clt_id')  
            
            current_date = timezone.now()

            for item in data:
                item.show_renew = False  # default
            
                if item.seo_expire:
                    days_diff = (item.seo_expire - current_date).days
            
                    # Condition 1: Expiring within 7 days
                    if 0 <= days_diff <= 7:
                        item.show_renew = True
            
                    # Condition 2: Already expired and not renewed
                    elif item.seo_expire < current_date:
                        renewed = tbl_seo_plan_hsty.objects.filter(
                            seo_id=item.smoId,
                            seo_start__gt=item.seo_expire
                        ).exists()
                        if not renewed:
                            item.show_renew = True 
           
        return render(request, "SEO.html", {'seo_plan':seo_plan,'data':data,'session_roleid':session_roleid,'companey_list':master_company.objects.all()}) 
    else:
        return redirect(login)
        
@csrf_exempt
def renew_seo_plan(request):
    if request.method == "POST": 
        try:
            smo_id = request.POST.get("smo_id")
            plan_id = request.POST.get("plan_id")

            # Get the SMO and Plan
            seo = tbl_smo.objects.get(smoId=smo_id)
            plan = tbl_seo_plan.objects.filter(id=plan_id).first()

            # Get the current time and ensure it’s timezone aware
            now = timezone.now()

            # Make sure smo.end_date is timezone aware
            if seo.seo_expire and seo.seo_expire.tzinfo is None:
                seo.seo_expire = timezone.make_aware(seo.seo_expire, timezone.get_current_timezone())

            # Set start_date based on whether the plan is expired
            if seo.seo_expire and seo.seo_expire < now:
                seo_start = now  # Use today's date if expired
            else:
                seo_start = seo.seo_expire  # Use the current end date if not expired

            # Retrieve plan details
            plan_type = plan.plan_name if plan else None
            plan_duration = plan.plan_duration if plan else None

            # Calculate end_date based on plan duration
            seo_expire = None
            if plan and plan.plan_duration:
                duration_str = plan.plan_duration.strip().lower()
                try:
                    if "day" in duration_str:
                        days = int(''.join(filter(str.isdigit, duration_str)))
                        seo_expire = seo_start + timedelta(days=days)
                    elif "month" in duration_str:
                        months = int(''.join(filter(str.isdigit, duration_str)))
                        seo_expire = seo_start + timedelta(days=months * 30)
                    elif "year" in duration_str:
                        years = int(''.join(filter(str.isdigit, duration_str)))
                        seo_expire = seo_start + timedelta(days=years * 365)
                    else:
                        days = int(duration_str)
                        seo_expire = seo_start + timedelta(days=days)
                except Exception as e:
                    seo_expire = None

            # Save to history
            
            tbl_seo_plan_hsty.objects.create(
                clt_id = seo.clt_id,
                plan_id = plan.id,
                seo_id = seo.smoId,
                plan_name = plan.plan_name,
                plan_duration = plan.plan_duration,
                seo_start = seo_start, 
                seo_expire = seo_expire,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = seo.company_id,
                add_by_id =  request.session['session_id'],
                add_by_name =  request.session['session_user'],
            )

            # Update main SMO table
            seo.seo_plan_id = plan.id
            seo.plan_type = plan.plan_name
            seo.seo_start = seo_start
            seo.seo_expire = seo_expire
            seo.save()

            messages.success(request, "Plan renewed successfully.")
        except Exception as e:
            messages.error(request, f"Error: {e}")

    return redirect('SEO')

def add_seo(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        client = master_client.objects.all()
        seo_plan = tbl_seo_plan.objects.all()
           
        return render(request, "seo-leasting.html", {'seo_plan':seo_plan,"client_list":client,'session_roleid':session_roleid}) 
    else:
        return redirect(login)
        
def addseo(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            
            clt_id = request.POST['clt_id']
            c_name = request.POST['c_name']
            seo_plan_id = request.POST['seo_plan_id']
            web_url = request.POST['web_url']
            remark = request.POST['remark']
            
            clients = master_client.objects.filter(clt_id=clt_id).first()
            company_name = clients.comp_name if clients else "Unknown Company"
            clt_company_id = clients.company_id if clients else "Unknown Company"
            
            plan = tbl_seo_plan.objects.filter(id=seo_plan_id).first()
            start_date = timezone.now() + timedelta(hours=5, minutes=30)
            plan_type = plan.plan_name if plan else None
            plan_duration = plan.plan_duration if plan else None
            
            end_date = None
            if plan and plan.plan_duration:
                # Example plan_duration formats: "30", "30 days", "3 months", "1 year"
                duration_str = plan.plan_duration.strip().lower()

                try:
                    if "day" in duration_str:
                        days = int(''.join(filter(str.isdigit, duration_str)))
                        end_date = start_date + timedelta(days=days)
                    elif "month" in duration_str:
                        months = int(''.join(filter(str.isdigit, duration_str)))
                        # Adding months is tricky, approximate with 30 days per month
                        end_date = start_date + timedelta(days=months * 30)
                    elif "year" in duration_str:
                        years = int(''.join(filter(str.isdigit, duration_str)))
                        end_date = start_date + timedelta(days=years * 365)
                    else:
                        # Assume plain number of days if no unit
                        days = int(duration_str)
                        end_date = start_date + timedelta(days=days)
                except Exception as e:
                    end_date = None  # fallback if parsing fails
            
            new_lead = tbl_smo.objects.create(
                
                clt_id = clt_id,
                comp_name = company_name,
                c_name = c_name,
                remark = remark,
                service_type = "SEO",
                plan_type = plan_type,
                seo_plan_id = seo_plan_id,
                seo_start = start_date,
                seo_expire = end_date,
                web_url = web_url,
                create_time = timezone.now() + timedelta(hours=5, minutes=30),
                company_id =  request.session['company_id'],
                add_by_id =  request.session['session_id'],
                add_by_name =  request.session['session_user'],
                user_id =  request.session['session_id'],
            )
            
            tbl_seo_plan_hsty.objects.create(
                clt_id = clt_id,
                plan_id = seo_plan_id,
                seo_id = new_lead.smoId,
                plan_name = plan_type,
                plan_duration = plan_duration,
                seo_start = start_date,
                seo_expire = end_date,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = clt_company_id,
                add_by_id =  request.session['session_id'],
                add_by_name =  request.session['session_user'],
            )
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add SEO - {company_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            try:
                new_lead.save()
                return JsonResponse({'status': 'success', 'message': f'SEO {company_name} added successfully!'})
                # return redirect(add_smo)
            except ValidationError as e:
                return render(request, "seo-leasting.html", {
                    'client': master_client.objects.all(),
                    'error': e.messages
                })
                
            return redirect(add_smo)
            
        return render(request, "seo-leasting.html", {'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def edit_seo(request, smoId):  
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        lead = get_object_or_404(tbl_smo, smoId=smoId)
        Username = request.session['session_user']
        userid = request.session['session_id']
        cites = master_city.objects.all()  
        seo_plan = tbl_seo_plan.objects.all()
        
        if request.method == 'POST':
            clt_id = request.POST.get('clt_id')
            c_name = request.POST.get('c_name')
            seo_plan_id = request.POST.get('seo_plan_id')
            remark = request.POST.get('remark')
            web_url = request.POST.get('web_url')
    
            clients = master_client.objects.filter(clt_id=clt_id).first()
            company_name = clients.comp_name if clients else "Unknown Company"
    
            seo_start = request.POST.get('seo_start')
            seo_expire = request.POST.get('seo_expire')
    
            try:
                new_plan_id = int(seo_plan_id)
            except (ValueError, TypeError):
                new_plan_id = None
    
            old_plan_id = lead.seo_plan_id if lead.seo_plan_id else None
            plan_changed = new_plan_id != old_plan_id
    
            print(f"Old plan_id: {old_plan_id}, New plan_id: {new_plan_id}, Plan changed: {plan_changed}")
    
            def is_field_changed(new_val, old_val):
                if new_val is None or new_val == '':
                    return False
                # For date fields, convert to string for comparison if necessary
                if hasattr(old_val, 'strftime'):
                    old_val_str = old_val.strftime('%Y-%m-%d') if old_val else ''
                    return str(new_val) != old_val_str
                return str(new_val) != str(old_val)
    
            manual_edit = (
                is_field_changed(seo_start, lead.seo_start) or
                is_field_changed(seo_expire, lead.seo_expire)
            )
    
            if plan_changed:
                plan = tbl_seo_plan.objects.filter(id=new_plan_id).first()
                if plan:
                    # Check if start_date was manually given (POST field)
                    if seo_start and seo_start.strip() != '':
                        seo_start_obj = parse_date(seo_start)
                    else:
                        # Keep old start date if not manually updated
                        seo_start_obj = lead.seo_start
            
                    plan_type = plan.plan_name
            
                    # Calculate end_date based on plan_duration relative to start_date_obj
                    seo_expire_obj = None
                    duration_str = plan.plan_duration.strip().lower() if plan.plan_duration else ''
                    try:
                        if "day" in duration_str:
                            days = int(''.join(filter(str.isdigit, duration_str)))
                            seo_expire_obj = seo_start_obj + timedelta(days=days)
                        elif "month" in duration_str:
                            months = int(''.join(filter(str.isdigit, duration_str)))
                            seo_expire_obj = seo_start_obj + timedelta(days=months * 30)
                        elif "year" in duration_str:
                            years = int(''.join(filter(str.isdigit, duration_str)))
                            seo_expire_obj = seo_start_obj + timedelta(days=years * 365)
                        else:
                            days = int(duration_str) if duration_str.isdigit() else 0
                            seo_expire_obj = seo_start_obj + timedelta(days=days)
                    except Exception as e:
                        print(f"Error parsing duration: {e}")
                        seo_expire_obj = None
                else:
                    # Plan not found fallback
                    seo_start_obj = lead.seo_start
                    seo_expire_obj = lead.seo_expire
                    plan_type = lead.plan_type

    
            elif manual_edit:
                # Update fields based on manual input
                seo_start_obj = parse_date(seo_start) if seo_start else lead.seo_start
                seo_expire_obj = parse_date(seo_expire) if seo_expire else lead.seo_expire
    
                plan_type = lead.plan_type
    
            else:
                # No change, keep old values
                seo_start_obj = lead.seo_start
                seo_expire_obj = lead.seo_expire
                plan_type = lead.plan_type
    
            # Update lead fields
            lead.clt_id = clt_id
            lead.comp_name = company_name
            lead.c_name = c_name
            lead.remark = remark
            lead.web_url = web_url
    
            lead.plan_type = plan_type
            lead.seo_start = seo_start_obj
            lead.seo_expire = seo_expire_obj
            lead.seo_plan_id = new_plan_id
    
            try:
                lead.save()
                
                history_qs = tbl_seo_plan_hsty.objects.filter(seo_id=lead.smoId).order_by('-created_time')

                if history_qs.exists():
                    history_entry = history_qs.first()  # Latest or only one
                
                    history_entry.clt_id = clt_id
                    history_entry.plan_id = new_plan_id
                    history_entry.plan_name = plan_type
                    history_entry.plan_duration = plan.plan_duration if plan_changed and plan else history_entry.plan_duration
                    history_entry.seo_start = seo_start_obj
                    history_entry.seo_expire = seo_expire_obj
                    # history_entry.company_id = lead.company_id
                    # history_entry.add_by_id = userid
                    # history_entry.add_by_name = Username
                    # history_entry.created_time = now() + timedelta(hours=5, minutes=30)
                
                    history_entry.save()
                
                return JsonResponse({'status': 'success', 'message': f'SEO {company_name} updated successfully!'})
            except ValidationError as e:
                return render(request, "seo-leasting.html", {
                    'lead': lead,
                    'client_list': master_client.objects.all(),
                    'seo_plan': tbl_seo_plan.objects.all(),
                    'error': e.messages,
                    'session_roleid': session_roleid,
                    'is_edit': True,
                })
    
        else:
            return render(request, "seo-leasting.html", {
                'lead': lead,
                'client_list': master_client.objects.all(),
                'seo_plan': tbl_seo_plan.objects.all(),
                'session_roleid': session_roleid,
                'is_edit': True,
            })
    else:
        return redirect(login)
        
def view_seo(request, smoId):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        seo = get_object_or_404(tbl_smo, smoId=smoId)
        
        seo_plan = tbl_seo_plan_hsty.objects.filter(seo_id=smoId)
        
        return render(request, 'view-seo.html', {'seo_plan':seo_plan,'seo':seo,'session_roleid':session_roleid})
    else:
        return redirect(login)

def add_project(request):
    if 'session_id' in request.session:
        user_compeny = request.session['user_compney']
        session_id = request.session.get('session_id')
        products = master_product.objects.all()
        company_data = master_company.objects.all()
        client_data = master_client.objects.all()
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']  # Retrieve session_id from session
        if session_id and session_roleid:
            if session_roleid == "1" or session_roleid == "10" :

            # Filter tbl_lead records based on session_id
                data = master_project.objects.all().order_by('-create_time') 
                return render(request, "project-leasting.html", {'client_data':client_data,'company_data':company_data,'data': data,'products':products, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) # Assuming user_id field in tbl_lead corresponds to user's ID
            else:
                data = master_project.objects.filter(add_by_id=session_id ).order_by('-create_time')
                return render(request, "project-leasting.html", {'client_data':client_data,'company_data':company_data,'data': data,'products':products, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) # Assuming user_id field in tbl_lead corresponds to user's ID

        else:
            # Handle case where session_id is not found in session (e.g., user not logged in)
            return redirect(login)
    else:
        return redirect(login)
        
def addproject(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        company_id = request.session['company_id']

        if request.method == 'POST':
            userid = request.session['session_id']  
            # com_id = request.POST['com_id']  
            project_name = request.POST['pj_name']    
            product = request.POST['product']
            # des = request.POST['des']
            client_date = request.POST['client_date']
            technicle_date = request.POST['technicle_date']    

            log_user_activity(
                ope='Add project',
                comment='Added a Project.',
                lanti=None,
                longti=None,
                by_user_id=userid,
                by_user_name=Username,
                status='online'
            )

            new_project = master_project.objects.create(
                # com_id=com_id,
                pro_name=project_name,
                service=product,
                # des=des,
                client_date=client_date,
                tech_date=technicle_date,
                add_by_id=userid,
                add_by_name=Username,
                create_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add project - {project_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            return JsonResponse({'status': 'success', 'message': f'Project {project_name} added successfully!'})
        
        return render(request, "project-leasting.html", {'session_roleid':session_roleid,'is_edit': False})
    else:
        return redirect(login)    

def edit_project(request, pj_id):
    if 'session_id' in request.session:
        project = get_object_or_404(master_project, pj_id=pj_id)
        user_compeny = request.session['user_compney']
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        company_data = master_company.objects.all()
        # user_idd = int(data.assign_to)

        if request.method == 'POST':
            # project.com_id = request.POST['com_id']
            project.pro_name = request.POST['pj_name']
            project.service = request.POST['product']
            # project.des = request.POST['des']
            project.client_date = request.POST['client_date']
            project.tech_date = request.POST['technicle_date']
            project.save()

            log_user_activity(
                ope='Edit project',
                comment=f'Edited project {project.pro_name}.',
                lanti=None,
                longti=None,
                by_user_id=request.session['session_id'],
                by_user_name=request.session['session_user'],
                status='online'
            )
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit project - {project.pro_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

            return JsonResponse({
                    'status': 'success',
                    'message': f'Project {project.pro_name} has been successfully updated!'
                })

        # Prepare data for the template
        # u_details = master_product.objects.filter(pro_id=project.service).first()
        # Product_name = u_details.pro_name if u_details else ''
        
        data = master_project.objects.all()
        return render(request, "project-leasting.html", {
            'company_data':company_data,
            'data': data,
            'lead': project,
            # 'Product_name': Product_name,
            'companey_list': master_company.objects.all(),
            'clients': master_client.objects.all(),
            'products': master_product.objects.all(),
            'comp_name': user_compeny,
            'session_roleid': session_roleid,
            'company_id': company_id,
            'is_edit': True,  # Set this to indicate editing
        })
    else:
        return redirect(login)

        
        
def delete_project(request, pj_id):
    if 'session_id' in request.session:
        project = get_object_or_404(master_project, pj_id=pj_id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete project - {project.pro_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        project.delete()

        return JsonResponse({'success': True, 'name': project.pro_name})
    else:
        return redirect(login)
        
def view_project(request, pj_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        project = get_object_or_404(master_project, pj_id=pj_id)
        
        tasks = tbl_task.objects.filter(task_name=project.pro_name)
        
        user_dict = {status.userId: status.name for status in tbl_users2.objects.all()}
        
        for job_obj in tasks:
            job_obj.assign_name = user_dict.get(job_obj.assign_to, "Unknown Name")

        return render(request, "view_project.html", {'project':project,'tasks':tasks,'session_roleid':session_roleid})
    else:
        return redirect(login)

def complete_project(request, pj_id):
    if 'session_id' not in request.session:
        return redirect('login')

    project = get_object_or_404(master_project, pj_id=pj_id)

    project.status = 'Complete'
    project.complete_date = timezone.now() + timedelta(hours=5, minutes=30)

    project.save()
    
    ip_address = get_client_ip(request)
    tbl_messages.objects.create(
        message_name = request.session['session_user'],
        change_status=f"Complete project - {project.pro_name}",
        added_date = timezone.now() + timedelta(hours=5, minutes=30),
        company_id = request.session['company_id'],
        user_id = request.session['session_id'],
        ip_address = ip_address,
    )

    if request.is_ajax():
        return JsonResponse({'success': True, 'message': 'project completed successfully.'})
        
    return redirect(f"{reverse('project_list')}?success=1")

def project_list(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = master_project.objects.filter(com_id=selected_company_id)
                else:
                    data = master_project.objects.all()
            else:
                data = master_project.objects.all()
                
        products = master_product.objects.all()
           
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
            
        pro_name = request.GET.get('pro_name')
        service = request.GET.get('service')
        des = request.GET.get('des') 
        tech_date = request.GET.get('tech_date') 
        client_date = request.GET.get('client_date')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(create_time__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if pro_name:
            query |= Q(pro_name__icontains=pro_name)
        if service:
            query |= Q(service__icontains=service)
        if des:
            query |= Q(des__icontains=des)
        if tech_date:
            query |= Q(tech_date__icontains=tech_date)
        if client_date:
            query |= Q(client_date__icontains=client_date)
        
        data = data.filter(query)
        data = data.order_by('-pj_id')  
        
        today = datetime.now().date()
        for project in data:
            if project.client_date and project.client_date < today:
                project.delay = True  # Mark as delayed
            else:
                project.delay = False
        
        return render(request, "view-project-leasting.html", {'products':products,'data':data,'session_roleid':session_roleid}) 
    else:
        return redirect(login)

def project_excel(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        if request.method == 'POST':
            from_date = request.POST.get('from_date')
            to_date = request.POST.get('to_date')
    
            if from_date or to_date:
                try:
                    if from_date:
                        from_date = datetime.strptime(from_date, '%Y-%m-%d')
                    else:
                        from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
                    if to_date:
                        to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                    else:
                        to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
                        
                except ValueError:
                    pass

            else:
                return HttpResponse("Please select a date.", status=404)


            project_entries = master_project.objects.filter(
                create_time__range=[from_date, to_date]
            )
    
            if project_entries.count() == 0:
                return HttpResponse("No records found for the given date range.", status=404) 
    
            wb = Workbook()
            ws = wb.active
            ws.title = "Project Entries"
    
            headers = ["ID", "Project Name", "Product", "Description", "Project Deadline Date", "Client Deadline Date","Added By", "Create Time"]
            ws.append(headers)
    
            for entry in project_entries:
                tech_date = entry.tech_date.strftime('%d/%m/%Y') if entry.tech_date else 'N/A'
                client_date = entry.client_date.strftime('%d/%m/%Y') if entry.client_date else 'N/A'
                create_time = entry.create_time.strftime('%d/%m/%Y') if entry.create_time else 'N/A' 
                
                ws.append([
                    entry.pj_id,
                    entry.pro_name,
                    entry.service,
                    entry.des,
                    tech_date,
                    client_date,
                    entry.add_by_name,
                    create_time,
                ])
    
            response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            response['Content-Disposition'] = 'attachment; filename="Project-Report.xlsx"'
            wb.save(response)
    
            return response
        return render(request, "view-project-leasting.html", {'session_roleid': session_roleid})
    else:
        return redirect('login')

def add_task(request): 
    if 'session_id' in request.session:
        session_id = request.session['session_id']
        session_roleid = request.session['session_roleid']
        
        projects = master_project.objects.all().exclude(status='Complete')
        roles = tbl_roles.objects.exclude(roleId=1) 

        # Render the page as usual
        return render(request, "task-leasting.html", {
            'session_roleid': session_roleid,
            'projects': projects,
            'roles': roles,
        })
        
    return redirect(login)
    
def fetch_users_for_assign_to(request):
    department = request.GET.get('department')
    
    if department: 
        users = tbl_users2.objects.filter(role_name__contains=department)
    else:
        users = tbl_users2.objects.all()
        
    user_data = [{'userId': user.userId, 'name': user.name} for user in users]
    
    return JsonResponse(user_data, safe=False)

@csrf_exempt
def update_task_remark(request, taskId):
    if request.method == 'POST':
        try:
            task = tbl_task.objects.get(taskId=taskId)
            remark = request.POST.get('remark')
            task.remark = remark
            task.save()

            return JsonResponse({'status': 'success'}, status=200)
        except Task.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': 'Task not found.'}, status=404)
        except Exception as e:
            return JsonResponse({'status': 'error', 'message': str(e)}, status=500)
    
def add_new_task(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        user_compeny = request.session['user_compney']
        if request.method == 'POST':

            userid = request.session['session_id']
            company_id = request.session['company_id']
            Username = request.session['session_user']
            session_head_id = request.session.get('head_id')
            session_dp_id = request.session.get('department_id')
            
            task_type = request.POST['task_type']
            task_name = request.POST['task_name']
            assign_to = request.POST['assign_to']
            department = request.POST['department']
            dead_date = request.POST['dead_date']
            description = request.POST['description']

            # optradio = request.POST['optradio']
            # city = request.POST['city']
            # project = request.POST['project']
            # department = request.POST['department']
            # description = request.POST['description']
            # dl_date = request.POST['dl_date']
            # project_name = project.strip()

            # product_details = master_project.objects.filter(pro_name=project_name).first()
            # p_id = product_details.pj_id 
            # clientdate = product_details.client_date
            # techdate = product_details.tech_date

            # u_name = city.strip()
            # u_details = tbl_users2.objects.filter(name=u_name).first()
            # u_id = u_details.userId 
            # clientdate = product_details.client_date
            # techdate = product_details.tech_date
            

            # now = datetime.now()
            # inv_number = f"{now.year}{now.month:02}{now.day:02}{now.hour:02}{now.minute:02}{now.second:02}"
            
            new_lead = tbl_task.objects.create(
                task_type=task_type,
                task_name=task_name,
                assign_to=assign_to,
                department=department,
                dead_date=dead_date,
                description=description,
                add_by_id = userid,
                # uniqueId = inv_number,
                company_id = company_id,
                assign_by = userid,
                createdDtm = timezone.now() + timedelta(hours=5, minutes=30),
                assign_date = timezone.now() + timedelta(hours=5, minutes=30),
                # dp_id =session_dp_id,
                # head_id =session_head_id,
                
                # add_by_id = userid,
                # uniqueId = inv_number,
                # task_type=optradio,
                # assign_to=u_name,
                # service=p_id,
                # add_by_name = Username,
                # description=description,
                # dead_date=dl_date,
                # company_id = company_id,
                # assign_by = userid,
                # task_name = project,
                # department = department,
                # client_date =clientdate,
                # tech_date =techdate,
                # dp_id =session_dp_id,
                # head_id =session_head_id,

            )
            new_lead.save()
            
            matching_projects = master_project.objects.filter(pro_name=task_name)
        
            for project in matching_projects:
                project.status = "Running"
                project.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add task - {task_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            # log_user_activity(
            #     ope='Add new-task',
            #     comment='Added a new-task.',
            #     lanti=None,  
            #     longti=None,  
            #     by_user_id=userid,
            #     by_user_name=Username,
            #     status='online'
            # )

            # fieldIndex = 0
            # while f'additional_optradio_{fieldIndex}' in request.POST:
            #     # task_priority = request.POST.get(f'additional_radio1_{fieldIndex}')
            #     task_priority = request.POST.get(f'additional_optradio_{fieldIndex}')
            #     asign = request.POST.get(f'additional_assign_to_{fieldIndex}')
            #     project = request.POST.get(f'additional_project_{fieldIndex}')
            #     department = request.POST.get(f'additional_department_{fieldIndex}')
            #     module = request.POST.get(f'additional_module_name_{fieldIndex}')
            #     description = request.POST.get(f'additional_description_{fieldIndex}')
                
            #     deadline = request.POST.get(f'additional_inputDeadline_{fieldIndex}')  # This should match the name in HTML
                
            #     project_name = project.strip()
            #     product_details = master_project.objects.filter(pro_name=project_name).first()
            #     p_id = product_details.pj_id 
                
            #     u_name = asign.strip()
            #     u_details = tbl_users2.objects.filter(name=u_name).first()
            #     u_id = u_details.userId 
                
                
            #     tbl_task.objects.create(
            #         add_by_id = userid,
            #         uniqueId = inv_number,
            #         task_type=task_priority,
            #         assign_to=u_id,
            #         service=p_id,
            #         add_by_name = Username,
            #         department = department,
            #         description=description,
            #         dead_date=deadline,
            #         company_id = company_id,
            #         assign_by = userid,
            #         task_name = project,
            #         client_date =clientdate,
            #         tech_date =techdate,
            #         dp_id =session_dp_id,
            #         head_id =session_head_id,
            #     )
            #     fieldIndex += 1
            return JsonResponse({'status': 'success', 'message': f'Task {task_name} added successfully!'})
        return render(request, "task-leasting.html", {'session_roleid':session_roleid,'is_edit': False}) 
    else:
        return redirect(login)

def edit_task(request, taskId):
    if 'session_id' not in request.session:
        return redirect(login)

    task = get_object_or_404(tbl_task, taskId=taskId)
    projects = master_project.objects.all()
    roles = tbl_roles.objects.exclude(roleId=1) 

    if request.method == 'POST':
        # task.task_type = request.POST.get('optradio')
        # assigned_user = tbl_users2.objects.filter(name=request.POST.get('name')).first()
        # if assigned_user:
        #     task.assign_to = assigned_user.userId
        # task.assign_to = request.POST.get('city')
        # task.task_name = request.POST.get('project')
        # task.description = request.POST.get('description')
        # task.dead_date = request.POST.get('dl_date')
        # task.department = request.POST.get('department')
        
        task.task_type = request.POST.get('task_type')
        task.task_name = request.POST.get('task_name')
        task.assign_to = request.POST.get('assign_to')
        task.department = request.POST.get('department')
        task.dead_date = request.POST.get('dead_date')
        task.description = request.POST.get('description')

        task.save()
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Edit task - {task.task_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )

        log_user_activity(
            ope='Edit task',
            comment=f'Updated task with ID {taskId}',
            by_user_id=request.session['session_id'],
            by_user_name=request.session['session_user'],
            lanti=None,  
            longti=None, 
            status='online'
        )

        return JsonResponse({
            'status': 'success',
            'message': f'Task {task.task_name} has been successfully updated!'
        })

    # Render the form with existing task data
    data = tbl_task.objects.all()
    return render(request, "task-leasting.html", {
        'projects': projects,
        'roles': roles,
        'data': data,
        'lead': task,
        # 'name': tbl_users2.objects.get(userId=task.assign_to).name,
        'users': tbl_users2.objects.all(),
        'dl_date': task.dead_date,
        'comp_name': request.session['user_compney'],
        'session_roleid': request.session.get('session_roleid'),
        'company_id': request.session['company_id'],
        'is_edit': True,
    })

def delete_task(request, taskId):
    if 'session_id' in request.session:
        task = get_object_or_404(tbl_task, taskId=taskId)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete task - {task.assign_to}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        task.delete() 

        return JsonResponse({'success': True, 'name': task.assign_to})
    else:
        return redirect(login)

# def task_list(request):
#     if 'session_id' not in request.session:
#         return redirect(login)

#     session_id = request.session['session_id']
#     session_roleid = request.session['session_roleid']
#     company_id = request.session['company_id']
#     user_company = request.session['user_compney']
#     username = request.session['session_user']

#     # Set the task types to fetch
#     statuses = ["Urgent", "Normal"] 

#     # Fetch tasks based on user role
#     if session_roleid == "1":
#         data = tbl_task.objects.filter(
#             # company_id=0 if company_id == 0 else company_id,
#             task_type__in=statuses
#         ).order_by('-createdDtm')
#     elif session_roleid in ["2", "6", "9", "10"]:
#         data = tbl_task.objects.filter(
#             Q(assign_to=session_id) | Q(assign_by=session_id),
#             task_type__in=statuses,
#             status="Pending"
#         ).order_by('-createdDtm')
#     else:
#         data = tbl_task.objects.filter(
#             assign_to=session_id,
#             status="Pending",
#             task_type__in=statuses
#         ).order_by('-createdDtm')

#     # Execute raw SQL to get user names along with task IDs
#     with connection.cursor() as cursor:
#         cursor.execute("""
#             SELECT tbl_users2.name AS user_name, tbl_task.taskId AS taskId
#             FROM tbl_users2
#             INNER JOIN tbl_task ON tbl_task.assign_to = tbl_users2.userId
#         """)
#         user_tasks = cursor.fetchall()

#     # Create a dictionary to map task IDs to user names
#     user_task_dict = {taskId: user_name for user_name, taskId in user_tasks}

#     # Prepare data for rendering
#     for task in data:
#         task.user_name = user_task_dict.get(task.taskId, "Unknown User")
        
#     from_date = request.GET.get('fromDate')
#     to_date = request.GET.get('toDate')
    
#     task_type = request.GET.get('task_type')
#     task_name = request.GET.get('task_name')
#     assign_to = request.GET.get('assign_to')
#     department = request.GET.get('department')
#     dead_date = request.GET.get('dead_date')
#     description = request.GET.get('description')

#     query = Q()
            
#     if from_date or to_date:
#         try:
#             if from_date:
#                 from_date = datetime.strptime(from_date, '%Y-%m-%d')
#             else:
#                 from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                
#             if to_date:
#                 to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
#             else:
#                 to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
            
#             if from_date > to_date:
#                 from_date, to_date = to_date, from_date
                
#             query &= Q(createdDtm__range=[from_date, to_date])
            
#         except ValueError:
#             pass
        
#     if task_type:
#         query |= Q(task_type__icontains=task_type)
#     if task_name:
#         query |= Q(task_name__icontains=task_name)
#     if assign_to:
#         query |= Q(assign_to__icontains=assign_to)
#     if department:
#         query |= Q(department__icontains=department)
#     if dead_date:
#         query |= Q(dead_date__icontains=dead_date)
#     if description:
#         query |= Q(description__icontains=description)
    
#     data = data.filter(query)
#     data = data.order_by('-taskId')

#     return render(request, "view-task-leasting.html", {
#         'data': data,
#         'Username': username,
#         'session_roleid': session_roleid,
#         'comp_name': user_company,
#         'companey_list': master_company.objects.all(),
#         'projects': master_project.objects.all(),
#         'users': tbl_users2.objects.all(),
#         'company_id': company_id
#     })
    
def task_list(request):
    if 'session_id' not in request.session:
        return redirect(login)

    session_id = request.session['session_id']
    session_roleid = request.session['session_roleid']
    company_id = request.session['company_id']
    user_company = request.session['user_compney']
    username = request.session['session_user']

    selected_company_id = request.session.get('selected_company_id', None)
    role_ids = set(session_roleid)
    
    if "1" in role_ids:
        if selected_company_id:
            data = tbl_task.objects.filter(company_id=selected_company_id ).order_by('-taskId')
    
            user_data = tbl_users2.objects.filter(is_active="1", company_id=selected_company_id) 
        else:
            data = tbl_task.objects.all().order_by('-taskId')
    
            user_data = tbl_users2.objects.filter(is_active="1")
    
    elif "10" in role_ids:
        data = tbl_task.objects.all().order_by('-taskId')
    
        user_data = tbl_users2.objects.filter(is_active="1")
    
    elif role_ids.intersection({"2", "6"}):
        data = tbl_task.objects.filter(Q(assign_to=session_id) | Q(assign_by=session_id)).order_by('-taskId')
    
        user_data = tbl_users2.objects.filter(is_active="1").filter(Q(userId=session_id) | Q(head_id=session_id))
    
    else:
        data = tbl_task.objects.filter(Q(assign_to=session_id) | Q(assign_by=session_id)).order_by('-taskId')
    
        user_data = tbl_users2.objects.filter(is_active="1").filter(Q(userId=session_id) | Q(head_id=session_id))
        
    today = datetime.today().date()
    user_task_assigned_today = {}

    for user in user_data:
        user_task_assigned_today[user.userId] = "Not Assigned" 
        
        tasks_assigned_today = tbl_task.objects.filter(assign_to=user.userId, createdDtm__date=today)
        
        if tasks_assigned_today.exists():
            user_task_assigned_today[user.userId] = "Assigned" 

    for user in user_data:
        user.has_assigned_task_today = user_task_assigned_today.get(user.userId, "Not Assigned")
    
    user_dict = {status.userId: status.name for status in tbl_users2.objects.all()}
    
    from_date = request.GET.get('fromDate')
    to_date = request.GET.get('toDate')
    
    task_type = request.GET.get('task_type')
    task_name = request.GET.get('task_name')
    assign_to = request.GET.get('assign_to')
    department = request.GET.get('department')
    dead_date = request.GET.get('dead_date')
    description = request.GET.get('description')

    query = Q()
            
    if from_date or to_date:
        try:
            if from_date:
                from_date = datetime.strptime(from_date, '%Y-%m-%d')
            else:
                from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                
            if to_date:
                to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            else:
                to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
            
            if from_date > to_date:
                from_date, to_date = to_date, from_date
                
            query &= Q(createdDtm__range=[from_date, to_date])
            
        except ValueError:
            pass
        
    if task_type:
        query |= Q(task_type__icontains=task_type)
    if task_name:
        query |= Q(task_name__icontains=task_name)
    if assign_to:
        query |= Q(assign_to__icontains=assign_to)
    if department:
        query |= Q(department__icontains=department)
    if dead_date:
        query |= Q(dead_date__icontains=dead_date)
    if description:
        query |= Q(description__icontains=description)
    
    data = data.filter(query)
    data = data.order_by('-taskId')
    
    not_started_task_count = data.filter(status="Pending", remark__isnull=True).count()
    in_progress_task_count = data.filter(status="Pending", remark__isnull=False).count()
    complete_task_count = data.filter(status="Complete").count()
    pending_task_count = data.filter(status="Pending").count()
    revise_task_count = data.filter(status="Rewaise").count()
    urgent_task_count = data.filter(task_type="Urgent").count()
    
    for job_obj in data:
        job_obj.assign_name = user_dict.get(job_obj.assign_to, "Unknown Name") 

    return render(request, "view-task-leasting.html", {
        'not_started_task_count':not_started_task_count,
        'in_progress_task_count':in_progress_task_count,
        'complete_task_count':complete_task_count,
        'pending_task_count':pending_task_count,
        'revise_task_count':revise_task_count,
        'urgent_task_count':urgent_task_count,
        'user_data':user_data,
        'data': data,
        'Username': username,
        'session_roleid': session_roleid,
        'comp_name': user_company,
        'companey_list': master_company.objects.all(),
        'projects': master_project.objects.all(),
        'users': tbl_users2.objects.all(),
        'roles' : tbl_roles.objects.exclude(roleId=1),
        'company_id': company_id
    })   
    
# def task_view(request,userId):
#     if 'session_id' in request.session:
#         session_roleid = request.session.get('session_roleid') 
#         session_id = request.session.get('session_id')
        
#         data = tbl_users2.objects.get(userId=userId)
        
#         complete_task = tbl_task.objects.filter(assign_to=userId,status="Complete").order_by('-taskId')
#         pending_task = tbl_task.objects.filter(assign_to=userId,task_type="Normal",status="Pending").order_by('-taskId')
#         revise_task = tbl_task.objects.filter(assign_to=userId,status="Rewaise").order_by('-taskId')
#         urgent_task = tbl_task.objects.filter(assign_to=userId,task_type="Urgent",status="Pending").order_by('-taskId')
        
#         not_started_task_count = tbl_task.objects.filter(assign_to=userId, status="Pending", remark__isnull=True).count()
#         in_progress_task_count = tbl_task.objects.filter(assign_to=userId, status="Pending", remark__isnull=False).count()
#         complete_task_count = tbl_task.objects.filter(assign_to=userId,status="Complete").count()
#         pending_task_count = tbl_task.objects.filter(assign_to=userId,status="Pending").count()
#         revise_task_count = tbl_task.objects.filter(assign_to=userId,status="Rewaise").count()
#         urgent_task_count = tbl_task.objects.filter(assign_to=userId,task_type="Urgent").count()
        
#         return render(request,"task_view.html",{
#             'data':data,
#             'complete_task':complete_task,
#             'pending_task':pending_task,
#             'revise_task':revise_task,
#             'urgent_task':urgent_task,
#             'not_started_task_count':not_started_task_count,
#             'in_progress_task_count':in_progress_task_count,
#             'complete_task_count':complete_task_count,
#             'pending_task_count':pending_task_count,
#             'revise_task_count':revise_task_count,
#             'urgent_task_count':urgent_task_count,
#             'session_roleid':session_roleid,
#         })
#     else:
#         return redirect(login)
    
def task_view(request, userId):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid') 
        session_id = request.session.get('session_id')
        project_list = master_project.objects.all()

        # Fetch user data
        data = tbl_users2.objects.get(userId=userId)

        # Get filter values from the GET request
        status_filter = request.GET.get('status')
        project_name_filter = request.GET.get('project_name')
        date_range_filter = request.GET.get('date_range')

        # Start with the default task queries
        tasks = tbl_task.objects.filter(assign_to=userId)

        # Apply status filter
        if status_filter:
            tasks = tasks.filter(status=status_filter)

        # Apply project name filter
        if project_name_filter:
            tasks = tasks.filter(task_name__icontains=project_name_filter)

        if date_range_filter:
            try:
                date_range_filter = date_range_filter.replace('+', ' ').replace('-', ' to ')
                start_str, end_str = date_range_filter.split(' to ')
                start_date = parser.parse(start_str.strip())
                end_date = parser.parse(end_str.strip()) + timedelta(days=1)  # include full end day
                tasks = tasks.filter(createdDtm__gte=start_date, createdDtm__lt=end_date)
            except Exception as e:
                print(f"Date parsing error: {e}")

        # Categorize tasks
        complete_task = tasks.filter(status="Complete").order_by('-taskId')
        pending_task = tasks.filter(task_type="Normal", status="Pending").order_by('-taskId')
        revise_task = tasks.filter(status="Revise").order_by('-taskId')
        urgent_task = tasks.filter(task_type="Urgent", status="Pending").order_by('-taskId')

        # Task counts
        not_started_task_count = tasks.filter(status="Pending", remark__isnull=True).count()
        in_progress_task_count = tasks.filter(status="Pending", remark__isnull=False).count()
        complete_task_count = complete_task.count()
        pending_task_count = pending_task.count()
        revise_task_count = revise_task.count()
        urgent_task_count = urgent_task.count()

        return render(request, "task_view.html", {
            'data': data,
            'project_list': project_list,
            'complete_task': complete_task,
            'pending_task': pending_task,
            'revise_task': revise_task,
            'urgent_task': urgent_task,
            'not_started_task_count': not_started_task_count,
            'in_progress_task_count': in_progress_task_count,
            'complete_task_count': complete_task_count,
            'pending_task_count': pending_task_count,
            'revise_task_count': revise_task_count,
            'urgent_task_count': urgent_task_count,
            'session_roleid': session_roleid,
        })
    else:
        return redirect('login')
    
def my_task(request):
    if 'session_id' not in request.session:
        return redirect(login)

    session_id = request.session['session_id']
    session_roleid = request.session['session_roleid']
    company_id = request.session['company_id']
    user_company = request.session['user_compney']
    username = request.session['session_user']
    
    # session_roleid_list = session_roleid.split(',') if session_roleid else []

    statuses = ["Normal"] 

    data = tbl_task.objects.filter(assign_to=session_id,status="Pending",task_type__in=statuses).order_by('-taskId')
    
    user_dict = {status.userId: status.name for status in tbl_users2.objects.all()}
    
    from_date = request.GET.get('fromDate')
    to_date = request.GET.get('toDate')
    
    task_type = request.GET.get('task_type')
    task_name = request.GET.get('task_name')
    assign_to = request.GET.get('assign_to')
    department = request.GET.get('department')
    dead_date = request.GET.get('dead_date')
    description = request.GET.get('description')

    query = Q()
            
    if from_date or to_date:
        try:
            if from_date:
                from_date = datetime.strptime(from_date, '%Y-%m-%d')
            else:
                from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                
            if to_date:
                to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            else:
                to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
            
            if from_date > to_date:
                from_date, to_date = to_date, from_date
                
            query &= Q(createdDtm__range=[from_date, to_date])
            
        except ValueError:
            pass
        
    if task_type:
        query |= Q(task_type__icontains=task_type)
    if task_name:
        query |= Q(task_name__icontains=task_name)
    if assign_to:
        query |= Q(assign_to__icontains=assign_to)
    if department:
        query |= Q(department__icontains=department)
    if dead_date:
        query |= Q(dead_date__icontains=dead_date)
    if description:
        query |= Q(description__icontains=description)
    
    data = data.filter(query)
    data = data.order_by('-taskId')
    
    for job_obj in data:
        job_obj.assign_name = user_dict.get(job_obj.assign_to, "Unknown Name") 

    return render(request, "my-task.html", {
        'data': data,
        'Username': username,
        'session_roleid': session_roleid,
        # 'session_roleid_list': session_roleid_list,
        'comp_name': user_company,
        'companey_list': master_company.objects.all(),
        'projects': master_project.objects.all(),
        'users': tbl_users2.objects.all(),
        'roles' : tbl_roles.objects.exclude(roleId=1), 
        'company_id': company_id
    })   
    
def Urgent_task(request):
    if 'session_id' not in request.session:
        return redirect(login)

    session_id = request.session['session_id']
    session_roleid = request.session['session_roleid']
    company_id = request.session['company_id']
    user_company = request.session['user_compney']
    username = request.session['session_user']

    statuses = ["Urgent"] 

    if set(session_roleid).intersection({"1"}):
        selected_company_id = request.session.get('selected_company_id', None)
        if selected_company_id:
            data = tbl_task.objects.filter(task_type__in=statuses,status="Pending",company_id=selected_company_id).order_by('-taskId')
        else:
            data = tbl_task.objects.filter(task_type__in=statuses,status="Pending").order_by('-taskId')
            
    elif set(session_roleid).intersection({"10"}):
        data = tbl_task.objects.filter(
            task_type__in=statuses,status="Pending"
        ).order_by('-taskId')
        
    elif set(session_roleid).intersection({"2", "6"}):
        data = tbl_task.objects.filter(
            Q(assign_to=session_id) | Q(assign_by=session_id),
            task_type__in=statuses,
            status="Pending"
        ).order_by('-taskId')
        
    else:
        data = tbl_task.objects.filter(
            assign_to=session_id,
            status="Pending",
            task_type__in=statuses
        ).order_by('-taskId')
    
    user_dict = {status.userId: status.name for status in tbl_users2.objects.all()}
    
    from_date = request.GET.get('fromDate')
    to_date = request.GET.get('toDate')
    
    task_type = request.GET.get('task_type')
    task_name = request.GET.get('task_name')
    assign_to = request.GET.get('assign_to')
    department = request.GET.get('department')
    dead_date = request.GET.get('dead_date')
    description = request.GET.get('description')

    query = Q()
            
    if from_date or to_date:
        try:
            if from_date:
                from_date = datetime.strptime(from_date, '%Y-%m-%d')
            else:
                from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                
            if to_date:
                to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            else:
                to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
            
            if from_date > to_date:
                from_date, to_date = to_date, from_date
                
            query &= Q(createdDtm__range=[from_date, to_date])
            
        except ValueError:
            pass
        
    if task_type:
        query |= Q(task_type__icontains=task_type)
    if task_name:
        query |= Q(task_name__icontains=task_name)
    if assign_to:
        query |= Q(assign_to__icontains=assign_to)
    if department:
        query |= Q(department__icontains=department)
    if dead_date:
        query |= Q(dead_date__icontains=dead_date)
    if description:
        query |= Q(description__icontains=description)
    
    data = data.filter(query)
    data = data.order_by('-taskId')
    
    for job_obj in data:
        job_obj.assign_name = user_dict.get(job_obj.assign_to, "Unknown Name") 

    return render(request, "Urgent_task.html", {
        'data': data,
        'Username': username,
        'session_roleid': session_roleid,
        'comp_name': user_company,
        'companey_list': master_company.objects.all(),
        'projects': master_project.objects.all(),
        'users': tbl_users2.objects.all(),
        'roles' : tbl_roles.objects.exclude(roleId=1),
        'company_id': company_id
    })  
    
def my_urgent_task(request):
    if 'session_id' not in request.session:
        return redirect(login)

    session_id = request.session['session_id']
    session_roleid = request.session['session_roleid']
    company_id = request.session['company_id']
    user_company = request.session['user_compney']
    username = request.session['session_user']

    statuses = ["Urgent"] 
    
    data = tbl_task.objects.filter(assign_to=session_id,status="Pending",task_type__in=statuses).order_by('-taskId')
    
    user_dict = {status.userId: status.name for status in tbl_users2.objects.all()}
    
    from_date = request.GET.get('fromDate')
    to_date = request.GET.get('toDate')
    
    task_type = request.GET.get('task_type')
    task_name = request.GET.get('task_name')
    assign_to = request.GET.get('assign_to')
    department = request.GET.get('department')
    dead_date = request.GET.get('dead_date')
    description = request.GET.get('description')

    query = Q()
            
    if from_date or to_date:
        try:
            if from_date:
                from_date = datetime.strptime(from_date, '%Y-%m-%d')
            else:
                from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                
            if to_date:
                to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            else:
                to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
            
            if from_date > to_date:
                from_date, to_date = to_date, from_date
                
            query &= Q(createdDtm__range=[from_date, to_date])
            
        except ValueError:
            pass
        
    if task_type:
        query |= Q(task_type__icontains=task_type)
    if task_name:
        query |= Q(task_name__icontains=task_name)
    if assign_to:
        query |= Q(assign_to__icontains=assign_to)
    if department:
        query |= Q(department__icontains=department)
    if dead_date:
        query |= Q(dead_date__icontains=dead_date)
    if description:
        query |= Q(description__icontains=description)
    
    data = data.filter(query)
    data = data.order_by('-taskId')
    
    for job_obj in data:
        job_obj.assign_name = user_dict.get(job_obj.assign_to, "Unknown Name") 

    return render(request, "my_urgent_task.html", {
        'data': data,
        'Username': username,
        'session_roleid': session_roleid,
        'comp_name': user_company,
        'companey_list': master_company.objects.all(),
        'projects': master_project.objects.all(),
        'users': tbl_users2.objects.all(),
        'roles' : tbl_roles.objects.exclude(roleId=1),
        'company_id': company_id
    })  

def completed_task(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        company_id = request.session['company_id'] 
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_task.objects.filter(status="Complete",company_id=selected_company_id).order_by('-taskId')
                else:
                    data = tbl_task.objects.filter(status="Complete").order_by('-taskId')

                # if company_id == 0:
                    # data = tbl_task.objects.filter(status="Complete").order_by('-taskId')
                # else:
                #     data = tbl_task.objects.filter(status="Complete",company_id=company_id).order_by('-createdDtm')
                
                # return render(request,"task-complated-leasting.html",{'data':data, 'Username':Username, 'session_id':session_id, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'comp_name':user_compeny,'company_id': company_id})
            
            elif set(session_roleid).intersection({"10"}):
                data = tbl_task.objects.filter(status="Complete").order_by('-taskId')
            
            elif set(session_roleid).intersection({"2", "6"}):
                data = tbl_task.objects.filter(Q(assign_to=session_id) | Q(assign_by=session_id), status="Complete").order_by('-taskId')
                # return render(request,"task-complated-leasting.html",{'data':data, 'Username':Username, 'session_id':session_id, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'comp_name':user_compeny,'company_id': company_id})
            else:
                # sql_query = 'SELECT * FROM tbl_lead WHERE status = %s AND user_id = %s'
                # cursor.execute(sql_query, ('Fresh',session_id))
                # data = cursor.fetchone()

                data = tbl_task.objects.filter(assign_to=session_id, status="Complete" ).order_by('-taskId')
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT tbl_users2.name AS user_name, tbl_task.taskId AS taskId
                FROM tbl_users2
                INNER JOIN tbl_task ON tbl_task.assign_to = tbl_users2.userId
            """)
            user_tasks = cursor.fetchall()

        # Create a dictionary to map task IDs to user names
        user_task_dict = {taskId: user_name for user_name, taskId in user_tasks}
    
        # Prepare data for rendering
        for task in data:
            task.user_name = user_task_dict.get(task.taskId, "Unknown User")
            
        user_dict = {status.userId: status.name for status in tbl_users2.objects.all()}
            
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        
        task_type = request.GET.get('task_type')
        task_name = request.GET.get('task_name')
        assign_to = request.GET.get('assign_to')
        department = request.GET.get('department')
        dead_date = request.GET.get('dead_date')
        description = request.GET.get('description')
    
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(createdDtm__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if task_type:
            query |= Q(task_type__icontains=task_type)
        if task_name:
            query |= Q(task_name__icontains=task_name)
        if assign_to:
            query |= Q(assign_to__icontains=assign_to)
        if department:
            query |= Q(department__icontains=department)
        if dead_date:
            query |= Q(dead_date__icontains=dead_date)
        if description:
            query |= Q(description__icontains=description)
        
        data = data.filter(query)
        data = data.order_by('-taskId')
        
        for job_obj in data:
            job_obj.assign_name = user_dict.get(job_obj.assign_to, "Unknown Name")
        
        return render(request, "complete-task-leasting.html", {
            'data':data,
            'Username': Username,
            'session_roleid': session_roleid,
            'companey_list': master_company.objects.all(),
            'projects': master_project.objects.all(),
            'users': tbl_users2.objects.all(),
            'roles' : tbl_roles.objects.exclude(roleId=1),
            'company_id': company_id
        }) 
    else:
        return redirect(login)
        
def my_completed_task(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        company_id = request.session['company_id'] 

        data = tbl_task.objects.filter(assign_to=session_id, status="Complete" ).order_by('-taskId')
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT tbl_users2.name AS user_name, tbl_task.taskId AS taskId
                FROM tbl_users2
                INNER JOIN tbl_task ON tbl_task.assign_to = tbl_users2.userId
            """)
            user_tasks = cursor.fetchall()

        # Create a dictionary to map task IDs to user names
        user_task_dict = {taskId: user_name for user_name, taskId in user_tasks}
    
        # Prepare data for rendering
        for task in data:
            task.user_name = user_task_dict.get(task.taskId, "Unknown User")
            
        user_dict = {status.userId: status.name for status in tbl_users2.objects.all()}
            
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        
        task_type = request.GET.get('task_type')
        task_name = request.GET.get('task_name')
        assign_to = request.GET.get('assign_to')
        department = request.GET.get('department')
        dead_date = request.GET.get('dead_date')
        description = request.GET.get('description')
    
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(createdDtm__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if task_type:
            query |= Q(task_type__icontains=task_type)
        if task_name:
            query |= Q(task_name__icontains=task_name)
        if assign_to:
            query |= Q(assign_to__icontains=assign_to)
        if department:
            query |= Q(department__icontains=department)
        if dead_date:
            query |= Q(dead_date__icontains=dead_date)
        if description:
            query |= Q(description__icontains=description)
        
        data = data.filter(query)
        data = data.order_by('-taskId')
        
        for job_obj in data:
            job_obj.assign_name = user_dict.get(job_obj.assign_to, "Unknown Name")
        
        return render(request, "my_completed_task.html", {
            'data':data,
            'Username': Username,
            'session_roleid': session_roleid,
            'companey_list': master_company.objects.all(),
            'projects': master_project.objects.all(),
            'users': tbl_users2.objects.all(),
            'roles' : tbl_roles.objects.exclude(roleId=1),
            'company_id': company_id
        }) 
    else:
        return redirect(login)
    
def revise_task(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        company_id = request.session['company_id'] 
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1","10"}):
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_task.objects.filter(status="Rewaise",company_id=selected_company_id).order_by('-taskId')
                else:
                    data = tbl_task.objects.filter(status="Rewaise").order_by('-taskId')

                # if company_id == 0:
                    # data = tbl_task.objects.filter(status="Rewaise").order_by('-taskId')
                # else:
                #     data = tbl_task.objects.filter(status="Rewaise",company_id=company_id).order_by('-createdDtm')
                
                # return render(request,"task-complated-leasting.html",{'data':data, 'Username':Username, 'session_id':session_id, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'comp_name':user_compeny,'company_id': company_id})
            
            elif set(session_roleid).intersection({"10"}):
                data = tbl_task.objects.filter(status="Rewaise").order_by('-taskId') 
            
            elif set(session_roleid).intersection({"2", "6"}):
                data = tbl_task.objects.filter(Q(assign_to=session_id) | Q(assign_by=session_id), status="Rewaise").order_by('-taskId')
                # return render(request,"task-complated-leasting.html",{'data':data, 'Username':Username, 'session_id':session_id, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'comp_name':user_compeny,'company_id': company_id})
            else:
                # sql_query = 'SELECT * FROM tbl_lead WHERE status = %s AND user_id = %s'
                # cursor.execute(sql_query, ('Fresh',session_id))
                # data = cursor.fetchone()

                data = tbl_task.objects.filter(assign_to=session_id, status="Rewaise" ).order_by('-taskId')
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT tbl_users2.name AS user_name, tbl_task.taskId AS taskId
                FROM tbl_users2
                INNER JOIN tbl_task ON tbl_task.assign_to = tbl_users2.userId
            """)
            user_tasks = cursor.fetchall()

        # Create a dictionary to map task IDs to user names
        user_task_dict = {taskId: user_name for user_name, taskId in user_tasks}
    
        # Prepare data for rendering
        for task in data:
            task.user_name = user_task_dict.get(task.taskId, "Unknown User")
          
        user_dict = {status.userId: status.name for status in tbl_users2.objects.all()}
          
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        
        task_type = request.GET.get('task_type')
        task_name = request.GET.get('task_name')
        assign_to = request.GET.get('assign_to')
        department = request.GET.get('department')
        dead_date = request.GET.get('dead_date')
        description = request.GET.get('description')
    
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(createdDtm__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if task_type:
            query |= Q(task_type__icontains=task_type)
        if task_name:
            query |= Q(task_name__icontains=task_name)
        if assign_to:
            query |= Q(assign_to__icontains=assign_to)
        if department:
            query |= Q(department__icontains=department)
        if dead_date:
            query |= Q(dead_date__icontains=dead_date)
        if description:
            query |= Q(description__icontains=description)
        
        data = data.filter(query)
        data = data.order_by('-taskId')
        
        for job_obj in data:
            job_obj.assign_name = user_dict.get(job_obj.assign_to, "Unknown Name")
        
        return render(request, "rewaise-task-leasting.html", {
            'data':data,
            'Username': Username,
            'session_roleid': session_roleid,
            'companey_list': master_company.objects.all(),
            'projects': master_project.objects.all(),
            'users': tbl_users2.objects.all(),
            'roles' : tbl_roles.objects.exclude(roleId=1),
            'company_id': company_id
        }) 
    else:
        return redirect(login)
        
def my_revise_task(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        company_id = request.session['company_id'] 
        
        data = tbl_task.objects.filter(assign_to=session_id, status="Rewaise" ).order_by('-taskId')
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT tbl_users2.name AS user_name, tbl_task.taskId AS taskId
                FROM tbl_users2
                INNER JOIN tbl_task ON tbl_task.assign_to = tbl_users2.userId
            """)
            user_tasks = cursor.fetchall()

        # Create a dictionary to map task IDs to user names
        user_task_dict = {taskId: user_name for user_name, taskId in user_tasks}
    
        # Prepare data for rendering
        for task in data:
            task.user_name = user_task_dict.get(task.taskId, "Unknown User")
          
        user_dict = {status.userId: status.name for status in tbl_users2.objects.all()}
          
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        
        task_type = request.GET.get('task_type')
        task_name = request.GET.get('task_name')
        assign_to = request.GET.get('assign_to')
        department = request.GET.get('department')
        dead_date = request.GET.get('dead_date')
        description = request.GET.get('description')
    
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(createdDtm__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if task_type:
            query |= Q(task_type__icontains=task_type)
        if task_name:
            query |= Q(task_name__icontains=task_name)
        if assign_to:
            query |= Q(assign_to__icontains=assign_to)
        if department:
            query |= Q(department__icontains=department)
        if dead_date:
            query |= Q(dead_date__icontains=dead_date)
        if description:
            query |= Q(description__icontains=description)
        
        data = data.filter(query)
        data = data.order_by('-taskId')
        
        for job_obj in data:
            job_obj.assign_name = user_dict.get(job_obj.assign_to, "Unknown Name")
        
        return render(request, "my_revise_task.html", {
            'data':data,
            'Username': Username,
            'session_roleid': session_roleid,
            'companey_list': master_company.objects.all(),
            'projects': master_project.objects.all(),
            'users': tbl_users2.objects.all(),
            'roles' : tbl_roles.objects.exclude(roleId=1),
            'company_id': company_id
        }) 
    else:
        return redirect(login)
        
def rewaise_task(request, task_id):
    if 'session_id' not in request.session:
        return redirect('login')

    task = get_object_or_404(tbl_task, taskId=task_id)

    task.status = 'Rewaise'
    task.updatedDtm = timezone.now() + timedelta(hours=5, minutes=30)
    task.save()
    
    ip_address = get_client_ip(request)
    tbl_messages.objects.create(
        message_name = request.session['session_user'],
        change_status=f"Rewaise task - {task.assign_to}",
        added_date = timezone.now() + timedelta(hours=5, minutes=30),
        company_id = request.session['company_id'],
        user_id = request.session['session_id'],
        ip_address = ip_address,
    )

    if request.is_ajax():
        return JsonResponse({'success': True, 'message': 'Task rewaised successfully.'})

    return redirect(f"{reverse('revise_task')}?success=1")
    
def complete_task(request, task_id):
    if 'session_id' not in request.session:
        return redirect('login')

    task = get_object_or_404(tbl_task, taskId=task_id)

    task.status = 'Complete'
    task.complete_date = timezone.now() + timedelta(hours=5, minutes=30)
    
    if task.assign_date and task.complete_date:
        delay = (task.complete_date - task.assign_date).days
        if delay > 0:
            task.delay_count = f"{delay} days"
        else:
            task.delay_count = "0"

    task.save()

    task.updatedDtm = datetime.now() + timedelta(hours=5, minutes=30)
    task.save()
    
    ip_address = get_client_ip(request)
    tbl_messages.objects.create(
        message_name = request.session['session_user'],
        change_status=f"Complete task - {task.assign_to}",
        added_date = timezone.now() + timedelta(hours=5, minutes=30),
        company_id = request.session['company_id'],
        user_id = request.session['session_id'],
        ip_address = ip_address,
    )

    if request.is_ajax():
        return JsonResponse({'success': True, 'message': 'Task completed successfully.'})
        
    return redirect(f"{reverse('completed_task')}?success=1")
    
def view_task(request, taskId):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        task = get_object_or_404(tbl_task, taskId=taskId)
        
        assign_to_user = tbl_users2.objects.filter(userId=task.assign_to).first()
        assign_by_user = tbl_users2.objects.filter(userId=task.assign_by).first()
        
        assign_to_name = assign_to_user.name if assign_to_user else None
        assign_by_name = assign_by_user.name if assign_by_user else None
        
        return render(request, 'view-task.html', {'task': task,'session_roleid':session_roleid,'assign_to_name': assign_to_name,
            'assign_by_name': assign_by_name})
    else:
        return redirect(login)    
    
def task_report(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        
        return render(request, "task_report.html",{'session_roleid':session_roleid}) 
    else:
        return redirect(login)
    
def task_excel(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')

        if request.method == 'POST':
            from_date = request.POST.get('from_date')
            to_date = request.POST.get('to_date')
            status = request.POST.get('status')
            
            if from_date or to_date:
                try:
                    if from_date:
                        from_date = datetime.strptime(from_date, '%Y-%m-%d')
                    else:
                        from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
                    if to_date:
                        to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                    else:
                        to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
                        
                except ValueError:
                    pass
                
            else:
                return HttpResponse("Please select a date.", status=404)
                

            if status == 'All':
                tasks = tbl_task.objects.filter(
                    createdDtm__range=[from_date, to_date]
                )
            else:
                tasks = tbl_task.objects.filter(
                    createdDtm__range=[from_date, to_date],
                    status=status
                )
            
            if tasks.count() == 0:
                return HttpResponse("No tasks found for the given criteria.", status=404)
                
            wb = Workbook()
            ws = wb.active
            ws.title = "Tasks"
            
            headers = ["Task ID", "Task Type", "Task Name", "Assigned To", "Department", "Dead Date", "Description", "Status", "Remark","Complete date","Delay Days",
                       "Assigned By", "Assign Date"]
            ws.append(headers)
            
            for task in tasks:
                assign_date = task.assign_date.replace(tzinfo=None) if task.assign_date else None
                dead_date = task.dead_date.replace(tzinfo=None) if task.dead_date else None
                complete_date = task.complete_date.replace(tzinfo=None) if task.complete_date else None 

                # Format dates as MM/DD/YYYY
                if assign_date:
                    assign_date = assign_date.strftime('%m/%d/%Y')
                else:
                    assign_date = 'N/A'

                if dead_date:
                    dead_date = dead_date.strftime('%m/%d/%Y')
                else:
                    dead_date = 'N/A'
                    
                if complete_date:
                    complete_date = complete_date.strftime('%m/%d/%Y')
                else:
                    complete_date = 'N/A'

                assign_to_name = ''
                assign_by_name = ''
                
                if task.assign_to:
                    try:
                        assign_to_user = tbl_users2.objects.get(userId=task.assign_to)
                        assign_to_name = assign_to_user.name
                    except tbl_users2.DoesNotExist:
                        assign_to_name = 'N/A'
                
                if task.assign_by:
                    try:
                        assign_by_user = tbl_users2.objects.get(userId=task.assign_by)
                        assign_by_name = assign_by_user.name
                    except tbl_users2.DoesNotExist:
                        assign_by_name = 'N/A'
                
                ws.append([
                    task.taskId,
                    task.task_type,
                    task.task_name,
                    assign_to_name,
                    task.department,
                    dead_date,
                    task.description,
                    task.status,
                    task.remark,
                    complete_date,
                    task.delay_count,
                    assign_by_name,
                    assign_date,
                ])
                
            response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            response['Content-Disposition'] = 'attachment; filename="tasks_report.xlsx"'
            
            wb.save(response)

            return response

        return render(request, "task_report.html", {'session_roleid': session_roleid})

    else:
        return redirect('login')


def add_meeting(request):
    if 'session_id' in request.session:

        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        user_compeny = request.session['user_compney']
        Username = request.session['session_user']  
        company_data = master_company.objects.all()
        if session_id and session_roleid:
            if session_roleid == "1":
                data = tbl_meeting.objects.filter(~Q(status="Cancel")).order_by('-meet_id')
            else:
                data = tbl_meeting.objects.filter(add_by_id=session_id).filter(~Q(status="Cancel")).order_by('-meet_id')
            
            return render(request, "meeting-leasting.html", {
                'data': data,
                'company_data':company_data,
                'Username': Username,
                'comp_name': user_compeny,
                'session_roleid': session_roleid,
                'companey_list': master_company.objects.all(),
                'company_id': company_id
            })
        else:
            return redirect(login)
    else:
        return redirect(login)

def delete_meeting(request, meet_id):
    if 'session_id' in request.session:
        meeting = get_object_or_404(tbl_meeting, meet_id=meet_id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete meeting - {meeting.name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        meeting.delete()
        return JsonResponse({'success': True, 'name': meeting.name})
    
    else:
        return redirect(login)


def addmeeting(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':

            userid = request.session['session_id']
            name = request.POST['name']
            company_id = request.POST['company_id']
            meeting_time = request.POST['meeting_time']
            remark = request.POST['remark']
            
            new_lead = tbl_meeting.objects.create(
                name=name,
                meeting_time=meeting_time,
                remark=remark,
                company_id=company_id,
                add_by_name=Username,
                add_by_id=userid,
                created_time = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_lead.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add meeting - {name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            log_user_activity(
                ope='Add meeting',
                comment='Added a meeting.',
                lanti=None,  
                longti=None,  
                by_user_id=userid,
                by_user_name=Username,
                status='online'
            )
            return JsonResponse({'status': 'success', 'message': f'Meeting {name} added successfully!'})
        return render(request, "meeting-leasting.html",{'session_roleid':session_roleid})
    else:
        return redirect(login)

def edit_meeting(request, meet_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        company_data = master_company.objects.all()
        meeting = get_object_or_404(tbl_meeting, meet_id=meet_id)
        if request.method == 'POST':
            meeting.name = request.POST['name']
            meeting.meeting_time = request.POST['meeting_time']
            meeting.company_id = request.POST['company_id']
            meeting.remark = request.POST['remark']
            meeting.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit meeting - {meeting.name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            return JsonResponse({
                'status': 'success',
                'message': f'Meeting {meeting.name} has been successfully updated!'
            })
    
        data = tbl_meeting.objects.all()
        return render(request, "meeting-leasting.html", {'company_data':company_data,'meeting': meeting, 'data': data,'session_roleid':session_roleid, 'is_edit':True})
    else:
        return redirect(login)
        
def meeting_list(request):
    if 'session_id' in request.session:

        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        user_compeny = request.session['user_compney']
        Username = request.session['session_user']
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
            
        meeting_time = request.GET.get('meeting_time')
        name = request.GET.get('name')
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1"}):
                selected_company_id = request.session.get('selected_company_id', None)
                if selected_company_id:
                    data = tbl_meeting.objects.filter(~Q(status="Cancel"),company_id=selected_company_id).order_by('-meet_id') 
                else:
                    data = tbl_meeting.objects.filter(~Q(status="Cancel")).order_by('-meet_id')
                    
                # data = tbl_meeting.objects.filter(~Q(status="Cancel")).order_by('-meet_id')
            else:
                data = tbl_meeting.objects.filter(add_by_id=session_id).filter(~Q(status="Cancel")).order_by('-meet_id')
                
            query = Q()
            
            if from_date or to_date:
                try:
                    if from_date:
                        from_date = datetime.strptime(from_date, '%Y-%m-%d')
                    else:
                        from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
                    if to_date:
                        to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                    else:
                        to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
                        
                    query &= Q(created_time__range=[from_date, to_date])
                    
                except ValueError:
                    pass
                
            if meeting_time:
                query |= Q(meeting_time__icontains=meeting_time)
            if name:
                query |= Q(name__icontains=name)
            
            data = data.filter(query)
            data = data.order_by('-meet_id')
            
            return render(request, "view-meeting-leasting.html", {
                'data': data,
                'Username': Username,
                'comp_name': user_compeny,
                'session_roleid': session_roleid,
                'companey_list': master_company.objects.all(),
                'company_id': company_id
            })
        else:
            # Handle case where session_id is not found in session (e.g., user not logged in)
            return redirect(login)
    else:
        return redirect(login)
        
def meeting_excel(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        if request.method == 'POST':
            from_date = request.POST.get('from_date')
            to_date = request.POST.get('to_date')
    
            if from_date or to_date:
                try:
                    if from_date:
                        from_date = datetime.strptime(from_date, '%Y-%m-%d')
                    else:
                        from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
                    if to_date:
                        to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                    else:
                        to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
                        
                except ValueError:
                    pass
                
                
            else:
                return HttpResponse("Please select a date.", status=404)

                
            meeting_entries = tbl_meeting.objects.filter(
                created_time__range=[from_date, to_date]
            )
    
            if meeting_entries.count() == 0:
                return HttpResponse("No records found for the given date range.", status=404) 
    
            wb = Workbook()
            ws = wb.active
            ws.title = "Project Entries"
    
            headers = ["ID", "Meeting Time", "Client Name", "Remark", "Added By", "Create Time"]
            ws.append(headers)
    
            for entry in meeting_entries:
                created_time = entry.created_time.strftime('%d/%m/%Y') if entry.created_time else 'N/A' 
                
                ws.append([
                    entry.meet_id,
                    entry.meeting_time,
                    entry.name,
                    entry.remark,
                    entry.add_by_name,
                    created_time,
                ])
    
            response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            response['Content-Disposition'] = 'attachment; filename="Meeting-Report.xlsx"'
            wb.save(response)
    
            return response
        return render(request, "view-meeting-leasting.html", {'session_roleid': session_roleid})
    else:
        return redirect('login')
        
def add_report(request): 
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        session_id = request.session.get('session_id')
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        cnx = mysql.connector.connect(user='root', password='', host='localhost', database='shubhamsingh_sit_crm')
        # cnx = mysql.connector.connect(user='shubhamsingh_sit_crm', password='kish@1102', host='localhost', database='shubhamsingh_sit_crm')
        cursor = cnx.cursor(dictionary=True)  # Use dictionary cursor for easier data access
        today_date = datetime.now().date()
        # data = tbl_daily_report.objects.filter(userId=session_id, status="pending", leave_date =today_date)
        query_today = """
                            SELECT * FROM tbl_daily_report
                            WHERE  DATE(reportDate) = %s AND userId = %s
                            """
                            
        cursor.execute(query_today, (today_date,session_id))
        data = cursor.fetchall()
        data_length = len(data)
       
        if data_length == 0:
            
            report_id = 0
            return render(request, "add-daily-report.html", {'report_id':report_id, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) 
        else:
            query_today = """
                SELECT * FROM tbl_daily_report
                WHERE  DATE(reportDate) = %s AND userId = %s AND status = %s
                """
                            
            cursor.execute(query_today, (today_date,session_id,"pending"))
            data = cursor.fetchall()
            data_length = len(data)
            if data_length == 0: 
                report_id = 0
                return render(request, "add-daily-report.html", {'report_id':report_id, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) 
     
            else:
        
                report_id = data[0]['repoId']
                return render(request, "add-daily-report.html", {'data':data, 'report_id':report_id, 'Username':Username,'comp_name':user_compeny, 'session_roleid':session_roleid, 'companey_list':master_company.objects.all(),'company_id': company_id}) 
    else:
    
        return redirect(login)

# def add_daily_report(request):
#     if 'session_id' in request.session:
#         session_roleid = request.session.get('session_roleid')
#         if request.method == 'POST':
#             userid = request.session['session_id']
#             company_id = request.session['company_id']
#             username = request.session['session_user']
#             session_head_id = request.session.get('head_id')
                
#             lep1 = request.POST.get('daily1', '')
#             lep2 = request.POST.get('daily2', '')
#             lep3 = request.POST.get('daily3', '')

#             today = timezone.now().date()
            
#             leave_application_exists = tbl_leave_appli.objects.filter(
#                 emp_id=userid,
#                 app_start_date__lte=today,
#                 app_end_date__gte=today,
#                 status='Approved'
#             ).exists()
    
#             # If the user has a leave application for today, redirect them
#             if leave_application_exists:
#                 return JsonResponse({
#                     'status': 'error',
#                     'message': 'You cannot submit a daily report today as you have applied for leave.',
#                     'redirect_url': reverse('daily_report')
#                 })

#             existing_report = tbl_daily_report.objects.filter(userId=userid, reportDate=today).first()

#             # Check if any of the fields are already filled
#             if existing_report:
#                 if existing_report.lep1 and lep1:
#                     return JsonResponse({
#                         'status': 'error',
#                         'message': 'You have already submitted a report for this time slot (9:00 AM to 11:00 AM).',
#                         'redirect_url': reverse('daily_report')
#                     })
#                 if existing_report.lep2 and lep2:
#                     return JsonResponse({
#                         'status': 'error',
#                         'message': 'You have already submitted a report for this time slot (11:00 AM to 02:00 PM).',
#                         'redirect_url': reverse('daily_report')
#                     })
#                 if existing_report.lep3 and lep3:
#                     return JsonResponse({
#                         'status': 'error',
#                         'message': 'You have already submitted a report for this time slot (03:00 PM to 06:00 PM).',
#                         'redirect_url': reverse('daily_report')
#                     })

#                 # Update existing report
#                 if not existing_report.lep1 and lep1:
#                     existing_report.lep1 = lep1
#                 if not existing_report.lep2 and lep2:
#                     existing_report.lep2 = lep2
#                 if not existing_report.lep3 and lep3:
#                     existing_report.lep3 = lep3

#                 existing_report.status = "completed" if existing_report.lep3 else "pending"
#                 existing_report.update_by_id = userid
#                 existing_report.update_by_name = username
#                 existing_report.save()

#             else:
#                 # Create a new daily report
#                 daily_report1 = tbl_daily_report(
#                     add_by_id=userid,
#                     lep1=lep1,
#                     lep2=lep2,
#                     lep3=lep3,
#                     company_id=company_id,
#                     status="pending",
#                     userId=userid,
#                     add_by_name=username,
#                     head_id=session_head_id,
#                     reportDate=today,
#                     leave_date=today
#                 )
#                 daily_report1.save()
                
#                 tbl_messages.objects.create(
#                     message_name = request.session['session_user'],
#                     change_status=f"Add Daily Report - {username}",
#                     added_date = timezone.now() + timedelta(hours=5, minutes=30),
#                     company_id = request.session['company_id']
#                 )

#             log_user_activity(
#                 ope='Add/Edit daily report',
#                 comment=f'Added a daily report for user {userid}.' if not existing_report else f'Edited daily report for user {userid}.',
#                 by_user_id=userid,
#                 by_user_name=username,
#                 status='online',
#                 lanti=None,
#                 longti=None,
#             )

#             return JsonResponse({
#                 'status': 'success',
#                 'message': 'Daily Report added successfully!',
#                 'redirect_url': reverse('daily_report')
#             })
#         return render(request, "add-daily-report.html",{'session_roleid':session_roleid}) 
#     return redirect('login')

def add_daily_report(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        if request.method == 'POST':
            # Extract the necessary data from the session
            userid = request.session['session_id']
            company_id = request.session['company_id']
            username = request.session['session_user']
            session_head_id = request.session.get('head_id')

            # Get the form data
            lep1 = request.POST.get('daily1', '')
            lep2 = request.POST.get('daily2', '')
            lep3 = request.POST.get('daily3', '')

            today = timezone.now().date()

            # Check if the user has applied for leave
            leave_application_exists = tbl_leave_appli.objects.filter(
                emp_id=userid,
                app_start_date__lte=today,
                app_end_date__gte=today,
                status='Approved'
            ).exists()

            if leave_application_exists:
                return JsonResponse({'success': False, 'message': "You cannot submit a daily report today as you have applied for leave."})

            # Check if a report already exists for today
            existing_report = tbl_daily_report.objects.filter(userId=userid, reportDate=today).first()

            if existing_report:
                # Check for already existing entries in the time slots
                if existing_report.lep1 and lep1:
                    return JsonResponse({'success': False, 'message': "You have already submitted a report for this time slot (9:00 AM to 11:00 AM)."})
                if existing_report.lep2 and lep2:
                    return JsonResponse({'success': False, 'message': "You have already submitted a report for this time slot (11:00 AM to 02:00 PM)."})
                if existing_report.lep3 and lep3:
                    return JsonResponse({'success': False, 'message': "You have already submitted a report for this time slot (03:00 PM to 06:00 PM)."})

                # Update the existing report if necessary
                if not existing_report.lep1 and lep1:
                    existing_report.lep1 = lep1
                if not existing_report.lep2 and lep2:
                    existing_report.lep2 = lep2
                if not existing_report.lep3 and lep3:
                    existing_report.lep3 = lep3

                existing_report.status = "completed" if existing_report.lep3 else "pending"
                existing_report.update_by_id = userid
                existing_report.update_by_name = username
                existing_report.save()
            else:
                # Create a new report if one doesn't exist for today
                daily_report1 = tbl_daily_report(
                    add_by_id=userid,
                    lep1=lep1,
                    lep2=lep2,
                    lep3=lep3,
                    company_id=company_id,
                    status="pending",
                    userId=userid,
                    add_by_name=username,
                    head_id=session_head_id,
                    reportDate=today,
                    leave_date=today
                )
                daily_report1.save()
                
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name=username,
                change_status=f"Add Daily Report - {username}",
                added_date=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=company_id,
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

            # Log user activity
            # log_user_activity(
            #     ope='Add/Edit daily report',
            #     comment=f'Added a daily report for user {userid}.' if not existing_report else f'Edited daily report for user {userid}.',
            #     by_user_id=userid,
            #     by_user_name=username,
            #     status='online',
            #     lanti=None,
            #     longti=None,
            # )

            # Return success response
            return JsonResponse({'success': True, 'message': "Daily report submitted successfully."})

        return render(request, "add-daily-report.html", {'session_roleid': session_roleid})

    return redirect('login')

def daily_report(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        # session_roleid_list = session_roleid.split(',') if session_roleid else []
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        add_by_name = request.GET.get('add_by_name')
        
        # if "1" in session_roleid or "9" in session_roleid or "10" in session_roleid:
        # if set(session_roleid).intersection({"1"}): 
        #     selected_company_id = request.session.get('selected_company_id', None)
        #     if selected_company_id:
        #         data = tbl_daily_report.objects.filter(company_id=selected_company_id).order_by("-repoId")
        #         user_data = tbl_users2.objects.filter(is_active="1", company_id=selected_company_id)
        #     else:
        #         data = tbl_daily_report.objects.all().order_by("-repoId")
        #         user_data = tbl_users2.objects.filter(is_active="1")
                
        # elif set(session_roleid).intersection({"10"}): 
        #     data = tbl_daily_report.objects.all().order_by("-repoId")
        #     user_data = tbl_users2.objects.filter(is_active="1")
        # else:
        #     data = tbl_daily_report.objects.filter(add_by_id=session_id).order_by("-repoId")
        #     user_data = tbl_users2.objects.filter(is_active="1", userId=session_id)
            
        selected_company_id = request.session.get('selected_company_id', None)
        role_ids = set(session_roleid)
    
        if "1" in role_ids:
            if selected_company_id:
                data = tbl_daily_report.objects.filter(company_id=selected_company_id).order_by("-repoId")
        
                user_data = tbl_users2.objects.filter(is_active="1", company_id=selected_company_id) 
            else:
                data = tbl_daily_report.objects.all().order_by("-repoId")
        
                user_data = tbl_users2.objects.filter(is_active="1")
        
        elif "10" in role_ids:
            data = tbl_daily_report.objects.all().order_by("-repoId")
        
            user_data = tbl_users2.objects.filter(is_active="1")
        
        elif role_ids.intersection({"2", "6"}):
            data = tbl_daily_report.objects.filter(Q(add_by_id=session_id) | Q(head_id=session_id)).order_by('-repoId')
        
            user_data = tbl_users2.objects.filter(is_active="1").filter(Q(userId=session_id) | Q(head_id=session_id))
        
        else:
            data = tbl_daily_report.objects.filter(Q(add_by_id=session_id) | Q(head_id=session_id)).order_by('-repoId')
        
            user_data = tbl_users2.objects.filter(is_active="1").filter(Q(userId=session_id) | Q(head_id=session_id))
            
            
        today = date.today()

        today_reports = tbl_daily_report.objects.filter(reportDate=today)
        
        today_report_map = {r.userId: r for r in today_reports}
        
        for user in user_data:
            report = today_report_map.get(str(user.userId))
            if report:
                user.lep1 = report.lep1.strip() if report.lep1 and report.lep1.strip() else ''
                user.lep2 = report.lep2.strip() if report.lep2 and report.lep2.strip() else ''
                user.lep3 = report.lep3.strip() if report.lep3 and report.lep3.strip() else ''
            else:
                user.lep1 = ''
                user.lep2 = ''
                user.lep3 = ''
            
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                    
                query &= Q(reportDate__range=[from_date, to_date])
                
            except ValueError:
                pass
            
        if add_by_name:
            query |= Q(add_by_name__icontains=add_by_name)
        
        data = data.filter(query)
        data = data.order_by('-reportDate')

        return render(request, "daily-report-leasting.html", {
            'data': data,
            'user_data':user_data, 
            'Username': request.session['session_user'],
            'session_id': session_id,
            'session_roleid': session_roleid,
            # 'session_roleid_list': session_roleid_list,
            'comp_name': request.session['user_compney'],
            'companey_list': master_company.objects.all(),
            'company_id': company_id
        })
    else:
        return redirect(login)
        
def user_report(request, userId):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        data = tbl_users2.objects.get(userId=userId)
        report_data = tbl_daily_report.objects.filter(add_by_id=userId).order_by('-reportDate')
        
        date_range_filter = request.GET.get('date_range')
        
        if date_range_filter:
            try:
                start_str, end_str = date_range_filter.split(' - ')
                start_date = parser.parse(start_str.strip())
                end_date = parser.parse(end_str.strip()) + timedelta(days=1)  # to include the full end day
                report_data = report_data.filter(reportDate__gte=start_date, reportDate__lt=end_date)
            except Exception as e:
                print(f"Date parsing error: {e}")
                
        for r in report_data:
            r.lep1 = r.lep1.strip() if r.lep1 and r.lep1.strip() else ''
            r.lep2 = r.lep2.strip() if r.lep2 and r.lep2.strip() else ''
            r.lep3 = r.lep3.strip() if r.lep3 and r.lep3.strip() else ''
        
        return render(request, "user_report.html", {
            'data': data,
            'report_data': report_data,
            'session_roleid': session_roleid
        })
    else:
        return redirect(login)
        
def report_download(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        user_list= tbl_users2.objects.all()
        
        return render(request,"report_download.html",{'user_list':user_list, 'session_roleid':session_roleid})
    else :
        return redirect(login)
        
def daily_excel(request):
    if request.method == 'POST':
        from_date = request.POST.get('from_date')
        to_date = request.POST.get('to_date')
        user_id = request.POST.get('userId')
        
        try:
            if from_date:
                from_date = datetime.strptime(from_date, '%Y-%m-%d')
            else:
                from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                
            if to_date:
                to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            else:
                
                to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
            if from_date > to_date:
                from_date, to_date = to_date, from_date

        except ValueError:
            pass
        
        if user_id == "ALL" or not user_id:
            reports = tbl_daily_report.objects.filter(
                reportDate__date__gte=from_date.date(),
                reportDate__date__lte=to_date.date()
            )
        else:
            reports = tbl_daily_report.objects.filter(
                reportDate__date__gte=from_date.date(),
                reportDate__date__lte=to_date.date(),
                userId=user_id
            )
            
        output = io.BytesIO()
        wb = Workbook()
        ws = wb.active
        ws.title = "Daily Report"
        
        headers = ['Report ID', 'Report Date', 'User ID', 'Add By Name', '9 to 11', '11 to 2',
                   '3 to 6','Status']
        ws.append(headers)
        
        for report in reports:
            ws.append([
                report.repoId,
                report.reportDate.strftime('%d-%m-%Y'),
                report.userId,
                report.add_by_name,
                report.lep1,
                report.lep2,
                report.lep3,
                report.status,
            ])
            
        wb.save(output)
        output.seek(0)
        
        response = HttpResponse(output.read(), content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        response['Content-Disposition'] = 'attachment; filename="daily_report.xlsx"'
        
        return response

    return render(request, 'report_download.html')
     
def edit_report(request, repoId):
    if 'session_id' in request.session:
        user_compeny = request.session['user_compney']
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        data =  get_object_or_404(tbl_daily_report, repoId=repoId)

        return render(request,"edit-daily-report.html",{
                # user_id = userid,
                'lead': data, 
                'daily1':data.lep1,
                'daily2':data.lep2,
                'daily3':data.lep3,
                'comp_name':user_compeny, 
                'session_roleid':session_roleid,
                'companey_list':master_company.objects.all(),
                'company_id': company_id,
               
            })
    else:
        return redirect(login)

    
def edit_daily_report_record(request, repoId):
    if 'session_id' in request.session:
        if request.method == 'POST':
            userid = request.session['session_id']
            username = request.session['session_user']
            
            lep1 = request.POST.get('daily1', '')
            lep2 = request.POST.get('daily2', '')
            lep3 = request.POST.get('daily3', '')
            
            data = get_object_or_404(tbl_daily_report, repoId=repoId)
            
            # Update logic as needed based on leave_type
            if data.leave_type == "":
                data.lep1 = lep1 or data.lep1
                data.lep2 = lep2 or data.lep2
                data.lep3 = lep3 or data.lep3
                data.status = "completed" if lep3 else "pending"
            elif data.leave_type in ["first_half", "sec_half"]:
                if lep1:
                    data.lep1 = lep1
                if lep2:
                    data.lep2 = lep2
                if lep3:
                    data.lep3 = lep3
                data.status = "completed"
            data.update_by_id = userid
                
            data.update_by_name = username
            data.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit Daily Report - {data.add_by_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            # log_user_activity(
            #     ope='Edit Daily Report',
            #     comment=f'Edited daily report with ID {repoId}.',
            #     by_user_id=userid,
            #     by_user_name=username,
            #     status='online',
            #     lanti=None,
            #     longti=None,
            # )
            
            return JsonResponse({
                'status': 'success',
                'message': 'Daily Report updated successfully!'
            })
    return redirect(login)
            
    
def view_report(request, repoId):
    if 'session_id' in request.session:
        Username = request.session['session_user']  # Retrieve session_id from session
        user_compeny = request.session['user_compney']
        company_id = request.session['company_id']
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        cnx = mysql.connector.connect(user='root', password='', host='localhost', database='shubhamsingh_sit_crm')
        # cnx = mysql.connector.connect(user='shubhamsingh_sit_crm', password='kish@1102', host='localhost', database='shubhamsingh_sit_crm')
        cursor = cnx.cursor(dictionary=True)  # Use dictionary cursor for easier data access

        if session_id and session_roleid:
            if session_roleid == "1":
                data =  get_object_or_404(tbl_daily_report, repoId=repoId)
            else:
                data =  get_object_or_404(tbl_daily_report, repoId=repoId)

            return render(request,"view-daily-report.html",{
                'lead': data, 
                'user_name':Username,
                'comp_name':user_compeny, 
                'session_roleid':session_roleid,
                'companey_list':master_company.objects.all(),
                'company_id': company_id,
            })
    else:
        return redirect(login)
        
def delete_daily_report(request, repoId):
    if 'session_id' in request.session:
        daily_report = get_object_or_404(tbl_daily_report, repoId=repoId)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete Daily Report - {daily_report.add_by_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        daily_report.delete()
        
        return JsonResponse({'success': True, 'name': daily_report.add_by_name})
    else:
        return redirect(login)
        
def add_employee(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()  
        state = master_state.objects.all()  
        products = master_product.objects.all()
        # shift = master_shift.objects.all()
        allleadtype = master_leadtype.objects.all() 
        user_compeny = request.session['user_compney']  
        roles = tbl_roles.objects.all()[1:]  # Skipping the first role
        users = tbl_users2.objects.all()
        compney_list = master_company.objects.all()
        
        shifts_raw = master_shift.objects.all()
        shifts = []
    
        for shift in shifts_raw:
            start = shift.start_time.strftime('%H:%M')
            end = shift.end_time.strftime('%H:%M')
            time_range = f"{start} - {end}"
            shifts.append({
                'time_range': time_range,
                'shift_name': shift.shift  # optional: add shift name if needed
            })

        # selected_company_id = request.session.get('selected_company_id', None)
        # selected_company_name = master_company.objects.get(com_id=selected_company_id)

        return render(request, "employee-onboarding-leasting.html", {'compney_list':compney_list,'state':state,'roles':roles,'users':users,'shifts':shifts,'cites': cites, 'products': products, 'Username':Username, 'allleadtype':allleadtype, 'companey_list':master_company.objects.all(),'comp_name':user_compeny, 'session_roleid':session_roleid,'company_id': company_id}) 
        # return render(request, "employee-onboarding-leasting.html", {'selected_company_id':selected_company_id,'selected_company_name':selected_company_name, 'compney_list':compney_list,'state':state,'roles':roles,'users':users,'shift':shift,'cites': cites, 'products': products, 'Username':Username, 'allleadtype':allleadtype, 'companey_list':master_company.objects.all(),'comp_name':user_compeny, 'session_roleid':session_roleid,'company_id': company_id}) 
   
    else:
        return redirect(login)

def add_employee_onboarding(request):
    if 'session_id' not in request.session:
        return redirect('login')

    session_id = request.session.get('session_id')
    session_roleid = request.session.get('session_roleid')
    company_id = request.session.get('company_id')
    session_user = request.session.get('session_user')
    selected_company_id = request.session.get('selected_company_id', 1000)

    def parse_date(date_str):
        return datetime.strptime(date_str, '%Y-%m-%d') if date_str else None

    def get_uploaded_file(field_name, request, default=None):
        file = ""
        try:
            file = request.FILES[field_name]
        except:
            file = ""
        finally:
            return file

    if request.method == 'POST':
        # File Uploads (safely handled)
        aadhar_pdf = get_uploaded_file('aadhar_data', request)
        pan_pdf = get_uploaded_file('pan_data', request)
        photo = get_uploaded_file('photo_data', request)
        joining_letter = get_uploaded_file('joining_letter', request)
        bank_statement = get_uploaded_file('bank_statement', request)

        # Personal Info
        name = request.POST.get('name', '')
        middle_name = request.POST.get('middle_name', '')
        last_name = request.POST.get('last_name', '')
        date_of_birth = parse_date(request.POST.get('date_of_birth'))
        gender = request.POST.get('gender', '')
        marital_status = request.POST.get('marital_status', '')
        machine_id = request.POST.get('machine_id') or None
        ph_no = request.POST.get('ph_no', '')
        email = request.POST.get('email', '')
        emer_cont_pers = request.POST.get('emer_cont_pers', '')
        emer_cont_ph_no = request.POST.get('emer_cont_ph_no', '')
        address = request.POST.get('address', '')
        city = request.POST.get('city', '')
        state = request.POST.get('state', '')
        country = request.POST.get('country', '')
        zip_code = request.POST.get('zip_code', '')

        # Other Info
        attendence_time = request.POST.get('attendence_time', '')
        gross_sal = request.POST.get('gross_sal', '')
        emp_type = request.POST.get('emp_type', '')
        employee_id_custom = generate_employee_id()
        password = request.POST.get('password', '')
        head_id = request.POST.get('head') or None
        join_date = parse_date(request.POST.get('join_date'))
        termi_date = parse_date(request.POST.get('termi_date'))
        company_name = request.POST.get('company_name', '')

        # IDs
        role_ids = request.POST.getlist('roles')
        depart_ids = request.POST.getlist('departments')

        # Role name fetch
        role_names = [r.role for r in tbl_roles.objects.filter(roleId__in=role_ids)]
        role_name = ', '.join(role_names)

        # Bank Info
        acc_num = request.POST.get('acc_num', '')
        acc_holder_name = request.POST.get('acc_holder_name', '')
        bank_name = request.POST.get('bank_name', '')
        ifsc_code = request.POST.get('ifsc_code', '')
        branch_add = request.POST.get('branch_add', '')

        # Benefits
        med_benifit = request.POST.get('med_benifit', '')
        family_benifit = request.POST.get('family_benifit', '')
        transport_benifit = request.POST.get('transport_benifit', '')
        other_benifit = request.POST.get('other_benifit', '')

        # Create employee record dictionary
        employee_data = {
            'name': name,
            'middle_name': middle_name,
            'last_name': last_name,
            'date_of_birth': date_of_birth,
            'gender': gender,
            'marital_status': marital_status,
            'machine_id': machine_id,
            'ph_no': ph_no,
            'email': email,
            'emer_cont_pers': emer_cont_pers,
            'emer_cont_ph_no': emer_cont_ph_no,
            'address': address,
            'city': city,
            'state': state,
            'country': country,
            'zip_code': zip_code,
            'attendence_time': attendence_time,
            'gross_sal': gross_sal,
            'emp_type': emp_type,
            'employee_id_custom': employee_id_custom,
            'password': password,
            'head_id': head_id,
            'join_date': join_date,
            'termi_date': termi_date,
            # 'company_id': company_id,
            'company_id': selected_company_id,
            'company_name': company_name,
            'dp_id': ','.join(depart_ids),
            'role_id': ','.join(role_ids),
            'role_name': role_name,
            'acc_num': acc_num,
            'acc_holder_name': acc_holder_name,
            'bank_name': bank_name,
            'ifsc_code': ifsc_code,
            'branch_add': branch_add,
            'med_benifit': med_benifit,
            'family_benifit': family_benifit,
            'transport_benifit': transport_benifit,
            'other_benifit': other_benifit,
            'add_by_id': session_id,
            'add_by_name': session_user,
            'update_by_id': session_id,
            'update_by_name': session_user,
            'create_time': timezone.now() + timedelta(hours=5, minutes=30),
        }

        # Attach files if uploaded
        if aadhar_pdf:
            employee_data['aadhar_pdf'] = aadhar_pdf
        if pan_pdf:
            employee_data['pan_pdf'] = pan_pdf
        if photo:
            employee_data['photo'] = photo
        if joining_letter:
            employee_data['joining_letter'] = joining_letter
        if bank_statement:
            employee_data['bank_statement'] = bank_statement

        # Save employee
        new_lead = tbl_employee.objects.create(**employee_data)

        # Save user account
        new_user = tbl_users2.objects.create(
            emp_id=new_lead.emp_id,
            name=name,
            middle_name=middle_name,
            last_name=last_name,
            mobile=ph_no,
            email=email,
            created_dtm=timezone.now() + timedelta(hours=5, minutes=30),
            password=password,
            company_name=company_name,
            company_id=company_id,
            role_name=role_name,
            head_id=head_id,
            add_by_name=session_user,
            add_by_id=session_id,
            status='Active',
            role_id=','.join(role_ids),
            dp_id=','.join(depart_ids),
            updated_by_id=session_id,
        )
        
        if gross_sal:
            new_record = tbl_salary_history.objects.create(
                salary = gross_sal,
                emp_id = new_lead.emp_id,
                name = f"{name} {middle_name} {last_name}",
                increment_date = timezone.now() + timedelta(hours=5, minutes=30),
                add_by_name=session_user,
                add_by_id=session_id,
                created_date = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_record.save()



        if photo:
            new_user.photo = photo

        new_user.save()
        new_lead.user_id = new_user.userId
        new_lead.save()

        # Log entry
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name=session_user,
            change_status=f"Add Employee On Boarding - {name}",
            added_date=timezone.now() + timedelta(hours=5, minutes=30),
            company_id=company_id,
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )

        return JsonResponse({'status': 'success', 'message': f'Employee {name} added successfully!'})

    return render(request, "employee-onboarding-leasting.html", {'session_roleid': session_roleid})

def edit_employee(request, emp_id):
    if 'session_id' not in request.session:
        return redirect('login')

    employee = get_object_or_404(tbl_employee, emp_id=emp_id)

    def parse_date(date_str):
        return datetime.strptime(date_str, '%Y-%m-%d') if date_str else None

    def get_uploaded_file(field_name, request, default=None):
        file = ""
        try:
            file = request.FILES[field_name]
        except:
            file = ""
        finally:
            return file

    if request.method == 'POST':
        try:
            # File uploads
            aadhar_pdf = get_uploaded_file('aadhar_data', request)
            pan_pdf = get_uploaded_file('pan_data', request)
            photo = get_uploaded_file('photo_data', request)
            joining_letter = get_uploaded_file('joining_letter', request)
            bank_statement = get_uploaded_file('bank_statement', request)

            # Personal Info
            employee.name = request.POST.get('name', '')
            employee.middle_name = request.POST.get('middle_name', '')
            employee.last_name = request.POST.get('last_name', '')
            employee.date_of_birth = parse_date(request.POST.get('date_of_birth'))
            employee.gender = request.POST.get('gender', '')
            employee.marital_status = request.POST.get('marital_status', '')
            employee.machine_id = request.POST.get('machine_id') or None
            employee.ph_no = request.POST.get('ph_no', '')
            employee.email = request.POST.get('email', '')
            employee.emer_cont_pers = request.POST.get('emer_cont_pers', '')
            employee.emer_cont_ph_no = request.POST.get('emer_cont_ph_no', '')
            employee.address = request.POST.get('address', '')
            employee.city = request.POST.get('city', '')
            employee.state = request.POST.get('state', '')
            employee.country = request.POST.get('country', '')
            employee.zip_code = request.POST.get('zip_code', '')

            # Other Info
            employee.attendence_time = request.POST.get('attendence_time', '')
            employee.gross_sal = request.POST.get('gross_sal', '')
            employee.emp_type = request.POST.get('emp_type', '')
            employee.password = request.POST.get('password', '')
            employee.head_id = request.POST.get('head') or None
            employee.join_date = parse_date(request.POST.get('join_date'))
            employee.termi_date = parse_date(request.POST.get('termi_date'))
            employee.company_name = request.POST.get('company_name', '')

            # IDs
            role_ids = request.POST.getlist('roles')
            depart_ids = request.POST.getlist('departments')
            employee.role_id = ','.join(role_ids)
            employee.dp_id = ','.join(depart_ids)

            role_names = [r.role for r in tbl_roles.objects.filter(roleId__in=role_ids)]
            employee.role_name = ', '.join(role_names)

            # Bank Info
            employee.acc_num = request.POST.get('acc_num', '')
            employee.acc_holder_name = request.POST.get('acc_holder_name', '')
            employee.bank_name = request.POST.get('bank_name', '')
            employee.ifsc_code = request.POST.get('ifsc_code', '')
            employee.branch_add = request.POST.get('branch_add', '')

            # Benefits
            employee.med_benifit = request.POST.get('med_benifit', '')
            employee.family_benifit = request.POST.get('family_benifit', '')
            employee.transport_benifit = request.POST.get('transport_benifit', '')
            employee.other_benifit = request.POST.get('other_benifit', '')

            # File updates
            if aadhar_pdf:
                employee.aadhar_pdf = aadhar_pdf
            if pan_pdf:
                employee.pan_pdf = pan_pdf
            if photo:
                employee.photo = photo
            if joining_letter:
                employee.joining_letter = joining_letter
            if bank_statement:
                employee.bank_statement = bank_statement

            employee.update_by_id = request.session['session_id']
            employee.update_by_name = request.session['session_user']
            employee.save()

            # Update tbl_users2
            user = tbl_users2.objects.get(emp_id=employee.emp_id)
            user.name = employee.name
            user.middle_name = employee.middle_name
            user.last_name = employee.last_name
            user.email = employee.email
            user.password = employee.password
            user.mobile = employee.ph_no
            user.company_name = employee.company_name
            user.company_id = employee.company_id
            user.role_name = employee.role_name
            user.head_id = employee.head_id
            user.role_id = employee.role_id
            user.dp_id = employee.dp_id
            user.updated_by_id = request.session['session_id']
            
            if photo:
                user.photo = photo

            user.save()
            # Log the update
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name=request.session['session_user'],
                change_status=f"Edit Employee On Boarding - {employee.name}",
                added_date=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

            return JsonResponse({
                'status': 'success',
                'message': f'Employee {employee.name} has been successfully updated!'
            })

        except Exception as e:
            return JsonResponse({'status': 'error', 'message': str(e)})
    shifts_raw = master_shift.objects.all()
    shifts = []

    for shift in shifts_raw:
        start = shift.start_time.strftime('%H:%M')
        end = shift.end_time.strftime('%H:%M')
        time_range = f"{start} - {end}"
        shifts.append({
            'time_range': time_range,
            'shift_name': shift.shift  # optional: add shift name if needed
        })

    # On GET
    roles = tbl_roles.objects.all()[1:]
    compney_list = master_company.objects.all()
    user_roles = employee.role_id.split(',') if employee.role_id else []
    user_departments = employee.dp_id.split(',') if employee.dp_id else []

    return render(request, "employee-onboarding-leasting.html", {
        'lead': employee,
        'compney_list': compney_list,
        'clients': master_client.objects.all(),
        'products': master_product.objects.all(),
        'comp_name': request.session['user_compney'],
        'session_roleid': request.session.get('session_roleid'),
        'company_id': request.session['company_id'],
        'is_edit': True,
        'users': tbl_users2.objects.all(),
        'roles': roles,
        'user_roles': user_roles,
        'user_departments': user_departments,
        'shifts': shifts,
        'state': master_state.objects.all(),
        'cites': master_city.objects.all(),
    })
           
def delete_employee_onboarding(request, emp_id):
    if 'session_id' in request.session:
        employee = get_object_or_404(tbl_employee, emp_id=emp_id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete Employee On Boarding - {employee.name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        users = tbl_users2.objects.filter(emp_id=emp_id).first() 
        if users:
            users.delete()
        
        employee.delete()
        return JsonResponse({'success': True, 'name': employee.name})
    
    else:
        return redirect(login)

# def emp_excel(request):
#     if 'session_id' in request.session:
#         session_id = request.session.get('session_id')
#         session_roleid = request.session.get('session_roleid')
#         if request.method == 'POST':
#             date_range = request.POST.get('fromDate')
       
#             if date_range:
#                 try:
#                     date_range = date_range.replace('+', ' ')  # handle URL-encoded spaces
#                     start_str, end_str = date_range.split(' - ')
#                     from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0, microsecond=0)
#                     to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
    
#                     if from_date > to_date:
#                         from_date, to_date = to_date, from_date
                        
#                 except ValueError:
#                     pass
                
#             emp_entries = tbl_employee.objects.filter(
#                 create_time__range=[from_date, to_date]
#             )
    
#             if emp_entries.count() == 0:
#                 return HttpResponse("No records found for the given date range.", status=404) 
    
#             wb = Workbook()
#             ws = wb.active
#             ws.title = "Project Entries"
    
#             headers = ["Emp ID", "First Name", "Middle Name", "Last Name", "Maiden Name", "Email Address", "Phone Number", "Alternative Phone Number", "City",
#             "Country", "Zip Code", "Attendance Time", "Employee Type", "Account Number", "Bank Name", "IFSC Code", "Branch Address", "Basic Salary",
#             "Transport Allowance", "Gross Salary", "TIN NO", "Sub Department", "Position", "Duty Type", "Joining Date", "Hire Date", "Rate Type", "Monthly Work Hours",
#             "Pay Frequency", "Hourly Rate", "Department Text", "Termination Date", "Voluntry Termination", "Re Hire Date", "Rate", "Pay Frequency","Re-Hourly Rate", 
#             "Home Department", "Medical", "Family", "Transportation", "Others", "Class Code", "Class Description", "Class Accrual Date", "Class Status", "Supervisor Name",
#             "1st Supervisor Name", "Class Description", "Reporting To", "Date of Bi rth", "Gender", "Marital Status", "Ethnic Group", "SOS", "Work in City","City of Residence",
#             "Work Permit", "Home Email", "Bussiness Email", "Home Phone", "Bussiness Phone", "Cell Phone", "Emergency Contact Person", "Emergency Contact", "Emergency Home Phone", 
#             "Emergency Work Phone", "Emergency Contact Relationship", "Bussiness Email", "Alter Emergency Contact", "Alter Emergency Home Phone", "Alter Emergency Work Phone","Added By", "Create Time"]
#             ws.append(headers)
    
#             for entry in emp_entries:
#                 join_date = entry.join_date.strftime('%d/%m/%Y') if entry.join_date else 'N/A'
#                 termi_date = entry.termi_date.strftime('%d/%m/%Y') if entry.termi_date else 'N/A'
#                 date_of_birth = entry.date_of_birth.strftime('%d/%m/%Y') if entry.date_of_birth else 'N/A'
#                 create_time = entry.create_time.strftime('%d/%m/%Y') if entry.create_time else 'N/A'
                
#                 ws.append([
#                     entry.emp_id,
#                     entry.name,
#                     entry.last_name,
#                     entry.email,
#                     entry.ph_no,
#                     entry.country,
#                     entry.city,
#                     entry.zip_code,
#                     entry.attendence_time,
#                     entry.emp_type,
#                     entry.acc_num,
#                     entry.bank_name,
#                     entry.ifsc_code,
#                     entry.branch_add,
#                     entry.gross_sal,
#                     join_date,
#                     entry.monthly_work_hrs,
#                     entry.pay_freq,
#                     entry.hourly_rate,
#                     entry.dept_tax,
#                     termi_date,
#                     entry.med_benifit,
#                     entry.family_benifit,
#                     entry.transport_benifit,
#                     entry.other_benifit,
#                     date_of_birth,
#                     entry.gender,
#                     entry.marital_status,
#                     create_time,
#                 ])
    
#             response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
#             response['Content-Disposition'] = 'attachment; filename="Employee-Report.xlsx"'
#             wb.save(response)
    
#             return response
#         return render(request, "employee-leasting.html", {'session_roleid': session_roleid})
#     else:
#         return redirect('login')

def emp_excel(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        if request.method == 'POST':
            date_range = request.POST.get('fromDate')

            if date_range:
                try:
                    date_range = date_range.replace('+', ' ')  # Handle URL-encoded spaces
                    start_str, end_str = date_range.split(' - ')
                    from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0)
                    to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59)
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
                except ValueError:
                    return HttpResponse("Invalid date range.", status=400)

            emp_entries = tbl_employee.objects.filter(create_time__range=[from_date, to_date])

            if emp_entries.count() == 0:
                return HttpResponse("No records found for the given date range.", status=404)

            wb = Workbook()
            ws = wb.active
            ws.title = "Employee Report"

            headers = [
                "Emp ID", "User ID", "Name", "Middle Name", "Last Name", "Date of Birth", "Gender", "Marital Status",
                "Machine ID", "Phone Number", "Email", "Emergency Contact Person", "Emergency Contact Number", 
                "Address", "City", "State", "Country", "Zip Code", "Attendance Time", "Gross Salary", "Employee Type",
                "Custom Employee ID", "Password", "Head ID", "Joining Date", "Termination Date", "Company ID",
                "Company Name", "Department ID", "Role ID", "Role Name", "Account Number", "Account Holder Name",
                "Bank Name", "IFSC Code", "Branch Address", "Medical Benefit", "Family Benefit", 
                "Transport Benefit", "Other Benefit", "Added By ID", "Added By Name", "Updated By ID",
                "Updated By Name", "Created Time", "Is Active"
            ]

            ws.append(headers)

            for entry in emp_entries:
                ws.append([
                    entry.emp_id,
                    entry.user_id,
                    entry.name,
                    entry.middle_name,
                    entry.last_name,
                    entry.date_of_birth.strftime('%d/%m/%Y') if entry.date_of_birth else '',
                    entry.gender,
                    entry.marital_status,
                    entry.machine_id,
                    entry.ph_no,
                    entry.email,
                    entry.emer_cont_pers,
                    entry.emer_cont_ph_no,
                    entry.address,
                    entry.city,
                    entry.state,
                    entry.country,
                    entry.zip_code,
                    entry.attendence_time,
                    entry.gross_sal,
                    entry.emp_type,
                    entry.employee_id_custom,
                    entry.password,
                    entry.head_id,
                    entry.join_date.strftime('%d/%m/%Y') if entry.join_date else '',
                    entry.termi_date.strftime('%d/%m/%Y') if entry.termi_date else '',
                    entry.company_id,
                    entry.company_name,
                    entry.dp_id,
                    entry.role_id,
                    entry.role_name,
                    entry.acc_num,
                    entry.acc_holder_name,
                    entry.bank_name,
                    entry.ifsc_code,
                    entry.branch_add,
                    entry.med_benifit,
                    entry.family_benifit,
                    entry.transport_benifit,
                    entry.other_benifit,
                    entry.add_by_id,
                    entry.add_by_name,
                    entry.update_by_id,
                    entry.update_by_name,
                    entry.create_time.strftime('%d/%m/%Y %H:%M') if entry.create_time else '',
                    "Yes" if entry.is_active else "No"
                ])

            response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            response['Content-Disposition'] = 'attachment; filename="Employee-Report.xlsx"'
            wb.save(response)
            return response

        return render(request, "employee-leasting.html", {'session_roleid': session_roleid})
    else:
        return redirect('login')

def employee_list(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        selected_company_id = request.session.get('selected_company_id', None)

        # Get current month's first and last date
        now = datetime.now()
        first_day_of_month = make_aware(datetime(now.year, now.month, 1))
        last_day_of_month = make_aware(datetime(now.year, now.month, 1) + relativedelta(months=1) - relativedelta(seconds=1))

        # Filter salary payments for this month
        salary_qs = tbl_payment_v.objects.filter(
            transaction_type="Salary Account",
            payment_date__gte=first_day_of_month,
            payment_date__lte=last_day_of_month
        )

        if selected_company_id:
            salary_qs = salary_qs.filter(company_id=selected_company_id)

        this_month_salary = salary_qs.aggregate(total=Sum('total_amount'))['total'] or 0

        if set(session_roleid).intersection({"1"}):
            if selected_company_id:
                employee = tbl_employee.objects.filter(company_id=selected_company_id) 
            else:
                employee = tbl_employee.objects.all()
        else:
            employee = tbl_employee.objects.all()

        shifts = master_shift.objects.all()

        # Filtering logic
        emp_id = request.GET.get('emp_id')
        name = request.GET.get('name')
        email = request.GET.get('email')
        ph_no = request.GET.get('ph_no')
        alt_ph_no = request.GET.get('alt_ph_no')
        address = request.GET.get('address')
        shift = request.GET.get('shift')
        emp_type = request.GET.get('emp_type')
        join_date = request.GET.get('join_date')
        date_of_birth = request.GET.get('date_of_birth')
        bank_name = request.GET.get('bank_name')
        acc_num = request.GET.get('acc_num')
        ifsc_code = request.GET.get('ifsc_code')
        date_range_filter = request.GET.get('fromDate')

        if date_range_filter:
            try:
                start_str, end_str = date_range_filter.split(' - ')
                start_date = parser.parse(start_str.strip())
                end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                employee = employee.filter(create_time__gte=start_date, create_time__lte=end_date)
            except Exception as e:
                print(f"Date parsing error: {e}")

        if emp_id:
            employee = employee.filter(employee_id_custom__icontains=emp_id)
        if name:
            employee = employee.filter(Q(name__icontains=name) | Q(middle_name__icontains=name) | Q(last_name__icontains=name))
        if email:
            employee = employee.filter(email__icontains=email)
        if ph_no:
            employee = employee.filter(ph_no__icontains=ph_no)
        if alt_ph_no:
            employee = employee.filter(alt_ph_no__icontains=alt_ph_no)
        if address:
            employee = employee.filter(address__icontains=address)
        if shift:
            employee = employee.filter(attendence_time__icontains=shift)
        if emp_type:
            employee = employee.filter(emp_type__icontains=emp_type)
        if join_date:
            employee = employee.filter(join_date__icontains=join_date)
        if date_of_birth:
            employee = employee.filter(date_of_birth__icontains=date_of_birth)
        if bank_name:
            employee = employee.filter(bank_name__icontains=bank_name)
        if acc_num:
            employee = employee.filter(acc_num__icontains=acc_num)
        if ifsc_code:
            employee = employee.filter(ifsc_code__icontains=ifsc_code)

        employee = employee.order_by('-emp_id')

        active_user = 0
        inactive_user = 0
        all_user = employee.count()
        for i in employee:
            if i.is_active:
                active_user += 1
            else:
                inactive_user += 1

        all_salary = 0
        for i in employee:
            try:
                all_salary += float(i.gross_sal) if i.gross_sal not in [None, ''] else 0.0
            except ValueError:
                all_salary += 0.0

        return render(request, "employee-leasting.html", {
            'all_salary': all_salary,
            'this_month_salary': this_month_salary,
            'shifts': shifts,
            'employee': employee,
            'session_roleid': session_roleid,
            'all_user': all_user,
            'inactive_user': inactive_user,
            'active_user': active_user,
        })

    else:
        return redirect(login)

def employee_details(request,emp_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        data = get_object_or_404(tbl_employee, emp_id=emp_id)
        salary_records = tbl_salary_history.objects.filter(
                emp_id=emp_id
            ).order_by('-increment_date')
        Head_name_obj = get_object_or_404(tbl_users2, userId=data.head_id) 
        Head_name = f"{Head_name_obj.name} {Head_name_obj.middle_name} {Head_name_obj.last_name}"
        details_context = request.session.get('details_context')

        if details_context:
            context = {**details_context, 'data': data, 'session_roleid': session_roleid, "salary_records":salary_records, "Head_name":Head_name}
            del request.session['details_context']
            return render(request, "employee_details.html", context)
        else:
            context = {'data': data, 'session_roleid': session_roleid, "salary_records": salary_records, "Head_name":Head_name}
            return render(request, "employee_details.html", context)
    else:
        return redirect('login')

# def details_count(request):
#     if 'session_id' in request.session:
#         session_roleid = request.session.get('session_roleid')

#         emp_id = request.POST.get('emp_id')
#         from_date = request.POST.get('from_date')
#         to_date = request.POST.get('to_date')
#         action = request.POST.get('action')

#         if from_date and to_date:
#             employee = get_object_or_404(tbl_employee, emp_id=emp_id)
#             machine_id = employee.machine_id
#             emp_shift = employee.attendence_time
#             user_id = employee.user_id
#             full_name = f"{employee.name} {employee.middle_name} {employee.last_name}"
#             company_name = employee.company_name

#             tasks = tbl_task.objects.filter(
#                 assign_to=user_id,
#                 assign_date__date__range=[from_date, to_date]
#             )

#             total_task = tasks.count()
#             complete_task = pending_task = revised_task = task_delay = 0

#             for task in tasks:
#                 if task.status == "Complete":
#                     complete_task += 1
#                 if task.status == "Pending":
#                     pending_task += 1
#                 if task.status == "Revise":
#                     revised_task += 1
#                 if task.delay_count and isinstance(task.delay_count, str):
#                     match = re.search(r'\d+', task.delay_count)
#                     if match:
#                         task_delay += int(match.group())

#             attendances = tbl_attendances.objects.filter(
#                 date__range=[from_date, to_date],
#                 machine_id=machine_id
#             ).order_by('date')

#             full_days = half_days = late_punches = early_punches = 0.0
#             sunday_attendances = leave_days = rejected_double_leave_days = rejected_double_half_days = overtime_minutes = 0.0
#             unique_dates = set()
#             attendance_data = []
#             prev_attendance = next_attendance = None

#             leave_map = {}
#             leave_type_map = {}
#             leave_apps = tbl_leave_appli.objects.filter(
#                 emp_id=user_id,
#                 app_start_date__lte=to_date,
#                 app_end_date__gte=from_date
#             )
            
#             for leave in leave_apps:
#                 current = leave.app_start_date
#                 while current <= leave.app_end_date:
#                     date_str = current.strftime("%Y-%m-%d")
#                     leave_map[date_str] = leave.status
#                     leave_type_map[date_str] = leave.leave_type
#                     current += timedelta(days=1)

#             for i, attendance in enumerate(attendances):
#                 attendance_date_str = attendance.date.strftime("%Y-%m-%d")
#                 attendance_data.append({
#                     'date': datetime.strptime(attendance_date_str, "%Y-%m-%d").strftime("%d-%m-%Y"),
#                     'punch_in': attendance.punch_in,
#                     'punch_out': attendance.punch_out
#                 })

#                 next_attendance = attendances[i + 1] if i + 1 < len(attendances) else None

#                 if attendance.date.weekday() == 6:  # Sunday
#                     sunday_attendances += 1.0
#                     if prev_attendance and next_attendance:
#                         if all([
#                             not prev_attendance.punch_in or prev_attendance.punch_in == '0',
#                             not prev_attendance.punch_out or prev_attendance.punch_out == '0',
#                             not next_attendance.punch_in or next_attendance.punch_in == '0',
#                             not next_attendance.punch_out or next_attendance.punch_out == '0'
#                         ]):
#                             leave_days += 1.0
#                             sunday_attendances -= 1.0
#                     continue

#                 leave_status = leave_map.get(attendance_date_str)
#                 leave_type = leave_type_map.get(attendance_date_str)
                
#                 if leave_status == 'Approved':
#                     if leave_type in ['Emergency Leave', 'Sick Leave']:
#                         leave_days += 1.0
#                     else:
#                         leave_days += 1.0
#                     prev_attendance = attendance
#                     continue
                
#                 # if leave_status == 'Rejected' and leave_type in ['Full Leave', 'Half Leave'] and (
#                 #     not attendance.punch_in or attendance.punch_in == '0'
#                 # ) and (
#                 #     not attendance.punch_out or attendance.punch_out == '0'
#                 # ):
#                 #     leave_days += 2.0
#                 #     rejected_double_leave_days += 2.0
#                 #     prev_attendance = attendance
#                 #     continue

#                 if leave_status == 'Rejected' and leave_type in ['Full Leave', 'Half Leave']:
#                     # Case 1: No punch in and out at all (count as double leave)
#                     if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
#                         leave_days += 1.0
#                         rejected_double_leave_days += 1.0
#                         prev_attendance = attendance
#                         continue
                
#                     # Case 2: Partial attendance on rejected half-day leave (count as 1 day penalty)
#                     if (not attendance.punch_in or attendance.punch_in == '0') or (not attendance.punch_out or attendance.punch_out == '0'):
#                         rejected_double_half_days += 1
#                         prev_attendance = attendance
#                         continue

#                 if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
#                     leave_days += 1.0
#                     prev_attendance = attendance
#                     continue

#                 if not attendance.punch_in or attendance.punch_in == '0':
#                     half_days += 1.0
#                     prev_attendance = attendance
#                     continue

#                 try:
#                     punch_in_time = datetime.strptime(attendance.punch_in, "%H:%M")
#                     punch_out_time = None

#                     if attendance.punch_out and attendance.punch_out != '0':
#                         punch_out_time = datetime.strptime(attendance.punch_out, "%H:%M")

#                     unique_dates.add(attendance_date_str)

#                     if not punch_out_time or punch_out_time == "" or punch_out_time == "0" :
#                         half_days += 1.0
#                         prev_attendance = attendance
#                         continue

#                     if emp_shift == "09:00 - 18:00":
#                         shift_start_time = datetime.strptime("09:00", "%H:%M")
#                         shift_end_time = datetime.strptime("18:00", "%H:%M")
#                     else:
#                         shift_start_time = datetime.strptime("10:00", "%H:%M")
#                         shift_end_time = datetime.strptime("19:00", "%H:%M")

#                     if punch_in_time < shift_start_time:
#                         overtime_minutes += (shift_start_time - punch_in_time).total_seconds() / 60

#                     if punch_out_time > shift_end_time:
#                         overtime_minutes += (punch_out_time - shift_end_time).total_seconds() / 60

#                     if punch_in_time > (shift_start_time + timedelta(minutes=15)):
#                         late_punches += 1.0
#                         half_days += 1.0
#                     elif punch_out_time < shift_end_time:
#                         early_punches += 1.0
#                         half_days += 1.0
#                     else:
#                         full_days += 1.0

#                 except ValueError:
#                     continue

#                 prev_attendance = attendance

#             total_days_worked = float(len(unique_dates))
#             total_month_days = float((datetime.strptime(to_date, "%Y-%m-%d") - datetime.strptime(from_date, "%Y-%m-%d")).days + 1)

#             overtime_hours = float(overtime_minutes // 60)
#             overtime_remaining_minutes = float(overtime_minutes % 60)

#             reports = tbl_daily_report.objects.filter(
#                 userId=user_id,
#                 reportDate__range=[from_date, to_date]
#             )

#             half_missing_reports = full_missing_reports = days_half_report = days_full_report = sunday_count = 0

#             for report in reports:
#                 lep_entries = [report.lep1, report.lep2, report.lep3]
#                 missing_count = lep_entries.count("") + lep_entries.count("0")

#                 if missing_count == 0:
#                     days_full_report += 1
#                 if missing_count >= 1:
#                     days_half_report += 1
#                 if missing_count == 1:
#                     half_missing_reports += 1
#                 elif missing_count == 2:
#                     half_missing_reports += 2
#                 elif missing_count == 3:
#                     full_missing_reports += 3

#             reported_dates = set(report.reportDate.strftime('%Y-%m-%d') for report in reports)
#             current = datetime.strptime(from_date, "%Y-%m-%d")
#             end = datetime.strptime(to_date, "%Y-%m-%d")

#             while current <= end:
#                 if current.weekday() == 6:
#                     sunday_count += 1
#                 elif current.strftime('%Y-%m-%d') not in reported_dates:
#                     full_missing_reports += 1
#                 current += timedelta(days=1)

#             penalty_leaves = float(rejected_double_leave_days)
#             penalty_halfs = 0.5 * float(rejected_double_half_days)
            
#             final_leaves = float(leave_days) + float(penalty_leaves) + 0.5 * float(half_days) + float(penalty_halfs)
            
#             paid_days = float(full_days)
#             paid_days += float(sunday_attendances)
#             paid_days += 0.5 * float(half_days)
#             leave_days_ = float(leave_days)
#             leave_days_ += 0.5 * float(half_days)

#             if leave_days_:
#                 if leave_days_ == 0.5:
#                     paid_days += 0.5
#                 elif leave_days_ == 1:
#                     paid_days += 1
#                 elif leave_days_ >= 1.5:
#                     paid_days += 1.5

#             emp_salary = float(employee.gross_sal or 0.0)
#             per_day_salary = emp_salary / total_month_days if total_month_days else 0.0
#             amount = round(per_day_salary * paid_days, 2)

#             advance_salary = tbl_adv_salary.objects.filter(emp_id=emp_id, salary_date__range=(from_date, to_date))
#             adv_amount = sum(adv.adv_salary for adv in advance_salary)

#             leaves_list = []
#             for leave in leave_apps.values('leave_type', 'app_start_date', 'app_end_date', 'reason', 'status'):
#                 leave['app_start_date'] = leave['app_start_date'].strftime('%d-%m-%Y')
#                 leave['app_end_date'] = leave['app_end_date'].strftime('%d-%m-%Y')
#                 leaves_list.append(leave)

#             context = {
#                 'emp_id': employee.emp_id,
#                 'full_name': full_name,
#                 'company_name': company_name,
                
#                 'final_leaves': final_leaves,
                
#                 'paid_days': paid_days,
#                 'amount': amount,
#                 'adv_amount': adv_amount,
#                 'tax': 200,
#                 'emp_salary': emp_salary,
#                 'after_deductions': amount - adv_amount - 200,
#                 'leaves_data': leaves_list,
#                 'attendances': attendance_data,
#                 'total_days_worked': total_days_worked,
#                 'total_month_days': total_month_days,
#                 'full_days': full_days,
#                 'half_days': half_days,
#                 'late_punches': late_punches,
#                 'early_punches': early_punches,
#                 'sunday_attendances': sunday_attendances,
#                 'leave_days': leave_days,
#                 'rejected_double_leave_days': rejected_double_leave_days,
#                 'rejected_double_half_days': rejected_double_half_days,
#                 'overtime_hours': overtime_hours,
#                 'overtime_remaining_minutes': overtime_remaining_minutes,
#                 'from_date': datetime.strptime(from_date, "%Y-%m-%d").strftime("%d-%m-%Y"),
#                 'to_date': datetime.strptime(to_date, "%Y-%m-%d").strftime("%d-%m-%Y"),
#                 'tasks': list(tasks.values('task_type', 'task_name', 'status', 'description', 'delay_count')),
#                 'total_task': total_task,
#                 'complete_task': complete_task,
#                 'pending_task': pending_task,
#                 'revised_task': revised_task,
#                 'task_delay': task_delay,
#                 'half_missing_reports': half_missing_reports,
#                 'full_missing_reports': full_missing_reports,
#                 'days_half_report': days_half_report,
#                 'days_full_report': days_full_report,
#                 'sunday_count': sunday_count,
#                 'session_roleid': session_roleid
#             }

#             if action == "download":
#                 response = HttpResponse(content_type='application/pdf')
#                 response['Content-Disposition'] = f'attachment; filename="Employee_Report_{emp_id}.pdf"'
            
#                 p = canvas.Canvas(response, pagesize=letter)
#                 width, height = letter
            
#                 # Title & Header Info
#                 p.setFont("Helvetica-Bold", 16)
#                 p.drawString(200, height - 40, "Employee Report")
            
#                 p.setFont("Helvetica", 11)
#                 p.drawString(50, height - 80, f"Employee ID: {emp_id}")
#                 p.drawString(250, height - 80, f"From: {context['from_date']} To: {context['to_date']}")
#                 p.drawString(50, height - 95, f"Employee Name: {context['full_name']}")
#                 p.drawString(50, height - 110, f"Employee Company: {context['company_name']}")
            
#                 y = height - 140  # Added more spacing
            
#                 # Attendance Details
#                 p.setFont("Helvetica-Bold", 16)
#                 p.drawString(50, y, "Attendance Details")
#                 y -= 20  # Space after section title
            
#                 p.setFont("Helvetica-Bold", 13)
#                 p.drawString(60, y, "Description")
#                 p.drawString(180, y, "Details")
#                 p.drawString(320, y, "Description")
#                 p.drawString(440, y, "Details")
#                 y -= 12
#                 p.line(55, y, 500, y)
#                 y -= 16
            
#                 p.setFont("Helvetica", 11)
#                 salary_details = [
#                     ("From Date", datetime.strptime(from_date, "%Y-%m-%d").strftime("%d-%m-%Y")),
#                     ("To Date", datetime.strptime(to_date, "%Y-%m-%d").strftime("%d-%m-%Y")),
#                     ("Total Days", context['total_month_days']),
#                     ("Total Days Worked", context['total_days_worked']),
#                     ("Sundays", context['sunday_attendances']),
#                     ("Leaves", context['leave_days']),
#                     ("Full Days", context['full_days']),
#                     ("Half Days", context['half_days']),
#                     ("Late Punches", context['late_punches']),
#                     ("Early Punches", context['early_punches']),
#                     ("Total Overtime", f"{context['overtime_hours']} hours {context['overtime_remaining_minutes']} minutes"),
#                 ]
            
#                 for i in range(0, len(salary_details), 2):
#                     label1, value1 = salary_details[i]
#                     p.drawString(60, y, str(label1)[:25])
#                     p.drawString(180, y, str(value1))
            
#                     if i + 1 < len(salary_details):
#                         label2, value2 = salary_details[i + 1]
#                         p.drawString(320, y, str(label2)[:25])
#                         p.drawString(440, y, str(value2))
            
#                     y -= 16  # Increased spacing between rows
            
#                 y -= 25  # Extra space before next section
            
#                 # Salary Details
#                 p.setFont("Helvetica-Bold", 16)
#                 p.drawString(50, y, "Salary Details")
#                 y -= 20
            
#                 p.setFont("Helvetica-Bold", 13)
#                 p.drawString(60, y, "Description")
#                 p.drawString(300, y, "Details")
#                 y -= 12
#                 p.line(55, y, 500, y)
#                 y -= 16
            
#                 p.setFont("Helvetica", 11)
#                 salary_details = [
#                     ("Employee Salary", context['emp_salary']),
#                     ("Paid Days", context['paid_days']),
#                     ("Paid days Amount", context['amount']),
#                     ("Advance Amount", context['adv_amount']),
#                     ("Tax", context['tax']),
#                     ("After Deductions", context['after_deductions']),
#                 ]
            
#                 for label, value in salary_details:
#                     p.drawString(60, y, str(label)[:40])
#                     p.drawString(300, y, str(value))
#                     y -= 16
            
#                 y -= 25
            
#                 # Task Summary
#                 p.setFont("Helvetica-Bold", 16)
#                 p.drawString(50, y, "Task Summary (Counts)")
#                 y -= 20
            
#                 p.setFont("Helvetica-Bold", 13)
#                 p.drawString(60, y, "Description")
#                 p.drawString(300, y, "Details")
#                 y -= 12
#                 p.line(55, y, 500, y)
#                 y -= 16
            
#                 p.setFont("Helvetica", 11)
#                 summary_data = [
#                     ("Total Tasks", context['total_task']),
#                     ("Completed Tasks", context['complete_task']),
#                     ("Pending Tasks", context['pending_task']),
#                     ("Revised Tasks", context['revised_task']),
#                     ("Total Delay", f"{context['task_delay']} days"),
#                 ]
            
#                 for label, value in summary_data:
#                     if label == "Total Delay":
#                         p.setFont("Helvetica-Bold", 11)
#                         p.line(55, y, 500, y)
#                         y -= 14
            
#                     p.setFont("Helvetica", 11)
#                     p.drawString(60, y, str(label)[:40])
#                     p.drawString(300, y, str(value))
#                     y -= 16
            
#                 y -= 25
            
#                 # Daily Report Summary
#                 p.setFont("Helvetica-Bold", 16)
#                 p.drawString(50, y, "Daily Report Summary")
#                 y -= 18
            
#                 lep_summary = [
#                     ("Half Missing Reports", context['half_missing_reports']),
#                     ("No. of days (Half Missing Reports)", context['days_half_report']),
#                     ("No. of days (Complete Reports)", context['days_full_report']),
#                     ("No. of days (No report at all excluding Sunday)", context['full_missing_reports']),
#                     ("No. of Sundays (No Reports)", context['sunday_count']),
#                 ]
            
#                 p.setFont("Helvetica-Bold", 13)
#                 p.drawString(60, y, "Description")
#                 p.drawString(400, y, "Details")
#                 y -= 12
#                 p.line(55, y, 500, y)
#                 y -= 16
            
#                 p.setFont("Helvetica", 11)
#                 for label, value in lep_summary:
#                     p.drawString(60, y, label[:40])
#                     p.drawString(400, y, str(value))
#                     y -= 16
            
#                 # Finalize the PDF
#                 p.save()
#                 return response
    
#             else:
#                 request.session['details_context'] = context
#                 request.session['ss_context'] = context
#                 return redirect('employee_details', emp_id=emp_id)

#         else:
#             return render(request, "employee_details.html", {
#                 'error_message': "Please select a valid date range.",
#                 'session_roleid': session_roleid
#             })
#     else:
#         return redirect('login')

def get_second_and_fourth_saturdays(start_date, end_date):
    from django.db.models import Q
    saturdays = []
    current = start_date
    while current <= end_date:
        if current.weekday() == 5:  # Saturday
            saturdays.append(current)
        current += timedelta(days=1)

    # Get the actual 2nd and 4th Saturdays
    second_fourth_saturdays = [d for i, d in enumerate(saturdays) if i in (1, 3)]
    result_dates = set()

    for sat_date in second_fourth_saturdays:
        att_on_day = tbl_attendances.objects.filter(date=sat_date)

        full_day_count = 0
        half_day_count = 0

        for att in att_on_day:
            try:
                if att.punch_in and att.punch_in != '0' and att.punch_out and att.punch_out != '0':
                    punch_in = datetime.strptime(att.punch_in, "%H:%M")
                    punch_out = datetime.strptime(att.punch_out, "%H:%M")
                    work_minutes = (punch_out - punch_in).seconds // 60

                    if work_minutes >= 450:  # Full day ~7.5 hrs
                        full_day_count += 1
                    else:
                        half_day_count += 1
                elif (att.punch_in and att.punch_in != '0') or (att.punch_out and att.punch_out != '0'):
                    half_day_count += 1
            except:
                continue

        if half_day_count > full_day_count:
            result_dates.add(sat_date.strftime("%Y-%m-%d"))

    return result_dates


# def get_second_and_fourth_saturdays(start_date, end_date):
#     saturdays = []
#     current = start_date
#     while current <= end_date:
#         if current.weekday() == 5:  # Saturday
#             saturdays.append(current)
#         current += timedelta(days=1)
#     # Return second and fourth Saturdays
#     return set([d.strftime("%Y-%m-%d") for i, d in enumerate(saturdays) if i in (1, 3)])

def details_count(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        emp_id = request.POST.get('emp_id')
        employee = get_object_or_404(tbl_employee, emp_id=emp_id)
        total_salary_till_today =  float(0)
            
        try:
            # Get the client linked to the employee
            client_emp = master_client.objects.get(user_id=employee.user_id, transaction_type="Salary Account")
            
            # Get all salary-related payments made to this client
            payment_vouchers = tbl_payment_v.objects.filter(clt_id=client_emp.clt_id, transaction_type="Salary Account")
            
            # Sum up the total_amount from each payment voucher
            total_salary_till_today = payment_vouchers.aggregate(total=Sum('total_amount'))['total'] or 0
        
        except master_client.DoesNotExist:
            total_salary_till_today = 0

        
        # from_date = request.POST.get('from_date')
        # to_date = request.POST.get('to_date')
        date_range = request.POST.get('fromDate')  # New field name from updated form
        action = request.POST.get('action')
        from_date = to_date = None

        if date_range:
            try:
                # Force to string in case it's a datetime object already
                date_range_str = str(date_range)
                date_parts = date_range_str.split(" - ")
                from_date_str = str(date_parts[0].strip())
                to_date_str = str(date_parts[1].strip())

                from_date = datetime.strptime(from_date_str, "%m/%d/%Y %I:%M %p")
                to_date = datetime.strptime(to_date_str, "%m/%d/%Y %I:%M %p")

            except Exception as e:
                return JsonResponse({'error': f'Date parse error: {str(e)}'}, status=400)

        if from_date and to_date:
            machine_id = employee.machine_id
            emp_shift = employee.attendence_time
            user_id = employee.user_id
            full_name = f"{employee.name} {employee.middle_name} {employee.last_name}"
            company_id = employee.company_id
            cmp_obj = master_company.objects.get(com_id = company_id)
            company_name = cmp_obj.com_name
            company_address = f"{cmp_obj.address}, {cmp_obj.area}, {cmp_obj.city}, {cmp_obj.state}, {cmp_obj.pincode}"
            
            
            tasks = tbl_task.objects.filter(
                assign_to=user_id,
                assign_date__date__range=[from_date, to_date]
            )

            total_task = tasks.count()
            complete_task = pending_task = revised_task = task_delay = 0

            for task in tasks:
                if task.status == "Complete":
                    complete_task += 1
                if task.status == "Pending":
                    pending_task += 1
                if task.status == "Revise":
                    revised_task += 1
                if task.delay_count and isinstance(task.delay_count, str):
                    match = re.search(r'\d+', task.delay_count)
                    if match:
                        task_delay += int(match.group())

            attendances = tbl_attendances.objects.filter(
                date__range=[from_date, to_date],
                machine_id=machine_id
            ).order_by('date')

            breaks = tbl_break.objects.filter(
                date__range=[from_date, to_date],
                machine_id=machine_id
            ).order_by('date')

            breaks_data = []
            
            # Define lunch break window
            lunch_start_window = datetime.strptime("12:58", "%H:%M").time()
            lunch_end_window = datetime.strptime("13:58", "%H:%M").time()
            total_month_breaks = 0
            
            for br in breaks:
                raw_punches = br.punches.split("\n")
                punch_times = [p.strip() for p in raw_punches if p.strip() and p.strip() != "0"]
                punch_count = len(punch_times)
                break_pairs = []
                total_break_minutes = 0
                lunch_break = None
                used_indices = set()
            
                if punch_count >= 1:
                    i = 0
                    while i < punch_count:
                        if i in used_indices:
                            i += 1
                            continue
            
                        start_str = punch_times[i]
                        try:
                            fmt = "%H:%M"
                            start_time = datetime.strptime(start_str, fmt)
                        except:
                            break_pairs.append({
                                "pair": f"{start_str} - (invalid start)",
                                "duration": "Invalid time"
                            })
                            used_indices.add(i)
                            i += 1
                            continue
            
                        matched = False
                        for j in range(i + 1, punch_count):
                            if j in used_indices:
                                continue
                            end_str = punch_times[j]
                            try:
                                end_time = datetime.strptime(end_str, fmt)
                                if start_time < end_time <= start_time + timedelta(hours=1):
                                    duration = (end_time - start_time).seconds // 60
                                    start_t = start_time.time()
                                    end_t = end_time.time()
            
                                    is_lunch = (
                                        lunch_start_window <= start_t <= lunch_end_window or
                                        lunch_start_window <= end_t <= lunch_end_window
                                    )
            
                                    if is_lunch and not lunch_break:
                                        lunch_break = {
                                            "pair": f"{start_str} - {end_str}",
                                            "duration": f"{duration} mins"
                                        }
                                    else:
                                        total_break_minutes += duration
                                        break_pairs.append({
                                            "pair": f"{start_str} - {end_str}",
                                            "duration": f"{duration} mins"
                                        })
                                    used_indices.update([i, j])
                                    matched = True
                                    break
                            except:
                                continue
            
                        if not matched:
                            start_t = start_time.time()
                            is_lunch = lunch_start_window <= start_t <= lunch_end_window
            
                            if is_lunch and not lunch_break:
                                lunch_break = {
                                    "pair": f"{start_str} - (no end)",
                                    "duration": "Incomplete"
                                }
                            else:
                                break_pairs.append({
                                    "pair": f"{start_str} - (no end)",
                                    "duration": "Incomplete"
                                })
            
                            used_indices.add(i)
            
                        i += 1
            
                    total_month_breaks += total_break_minutes
            
                    # Format total break duration
                    hours = total_break_minutes // 60
                    minutes = total_break_minutes % 60
                    total_break_str = f"{hours}h {minutes}m" if hours else f"{minutes}m"
            
                else:
                    break_pairs.append({
                        "pair": "No Breaks",
                        "duration": ""
                    })
                    punch_count = 0
                    total_break_str = "0m"
            
                formatted_date = br.date.strftime("%d-%m-%Y") if br.date else "N/A"
            
                breaks_data.append({
                    'date': formatted_date,
                    'punch_count': punch_count,
                    'breaks': break_pairs,
                    'lunch_break': lunch_break,
                    'total_break_duration': total_break_str
                })
            
            # Final total_month_breaks formatting (outside the loop)
            month_hours = total_month_breaks // 60
            month_minutes = total_month_breaks % 60
            total_month_breaks_str = f"{month_hours}hr {month_minutes}m" if month_hours else f"{month_minutes}minutes"

            full_days = half_days = late_punches = early_punches = 0.0
            sunday_attendances = leave_days = rejected_double_leave_days = rejected_double_half_days = overtime_minutes = 0.0
            unique_dates = set()
            attendance_data = []
            prev_attendance = next_attendance = None

            leave_map = {}
            leave_type_map = {}
            exception_leave_dates = set()
            
            leave_apps = tbl_leave_appli.objects.filter(
                emp_id=user_id,
                app_start_date__lte=to_date,
                app_end_date__gte=from_date
            )
            
            # Get holidays between the date range
            holiday_qs = tbl_holiday.objects.filter(
                start_date__lte=to_date,
                to_date__gte=from_date
            )
            
            holiday_dates = set()
            for holiday in holiday_qs:
                current = holiday.start_date
                while current <= holiday.to_date:
                    holiday_dates.add(current.strftime("%Y-%m-%d"))
                    current += timedelta(days=1)
            
            holiday_count = len(holiday_dates)
            
            # for leave in leave_apps:
            #     current = leave.app_start_date
            #     while current <= leave.app_end_date:
            #         date_str = current.strftime("%Y-%m-%d")
            #         leave_map[date_str] = leave.status
            #         leave_type_map[date_str] = leave.leave_type
            #         current += timedelta(days=1)
            
            for leave in leave_apps:
                current = leave.app_start_date.date()
                while current <= leave.app_end_date.date():
                    date_str = current.strftime("%Y-%m-%d")
                    
                    # Exclude "Exception" leave type with "Approved" status
                    if leave.leave_type == "Exception" and leave.status == "Approved":
                        exception_leave_dates.add(date_str)
                    else:
                        leave_map[date_str] = leave.status
                        leave_type_map[date_str] = leave.leave_type
                    current += timedelta(days=1)
                    
            total_month_work_minutes = 0
            
            # from_date_dt = datetime.strptime(from_date, "%Y-%m-%d")
            # to_date_dt = datetime.strptime(to_date, "%Y-%m-%d")
            
            if isinstance(from_date, str):
                from_date_dt = datetime.strptime(from_date, "%Y-%m-%d")
            else:
                from_date_dt = from_date
            
            if isinstance(to_date, str):
                to_date_dt = datetime.strptime(to_date, "%Y-%m-%d")
            else:
                to_date_dt = to_date

            second_fourth_saturdays = get_second_and_fourth_saturdays(from_date_dt, to_date_dt)

            for i, attendance in enumerate(attendances):
                attendance_date_str = attendance.date.strftime("%Y-%m-%d")
                
                if attendance_date_str in holiday_dates:
                    attendance_data.append({
                        'date': datetime.strptime(attendance_date_str, "%Y-%m-%d").strftime("%d-%m-%Y"),
                        'punch_in': attendance.punch_in,
                        'punch_out': attendance.punch_out,
                        'worked_hours': "Holiday"
                    })
                    continue  # Skip holidays for any full/half/leave counts
                
                if attendance_date_str in exception_leave_dates:
                    prev_attendance = attendance
                    continue
                
                punch_in_time = None
                punch_out_time = None
                worked_duration = ""
                
                if attendance.punch_in and attendance.punch_out and attendance.punch_in != '0' and attendance.punch_out != '0':
                    try:
                        punch_in_time = datetime.strptime(attendance.punch_in, "%H:%M")
                        punch_out_time = datetime.strptime(attendance.punch_out, "%H:%M")
                        worked_minutes = (punch_out_time - punch_in_time).seconds // 60
                        worked_hours = worked_minutes // 60
                        worked_remaining_minutes = worked_minutes % 60
                        worked_duration = f"{worked_hours}h {worked_remaining_minutes}m"
                
                        total_month_work_minutes += worked_minutes  # ðŸ‘ˆ Add this line
                
                    except ValueError:
                        worked_duration = "Invalid time"
                elif (attendance.punch_in and attendance.punch_in != '0') or (attendance.punch_out and attendance.punch_out != '0'):
                    worked_duration = "Incomplete"
                else:
                    worked_duration = "Absent"
            
                attendance_data.append({
                    'date': datetime.strptime(attendance_date_str, "%Y-%m-%d").strftime("%d-%m-%Y"),
                    'punch_in': attendance.punch_in,
                    'punch_out': attendance.punch_out,
                    'worked_hours': worked_duration
                })

                next_attendance = attendances[i + 1] if i + 1 < len(attendances) else None

                if attendance.date.weekday() == 6:  # Sunday
                    sunday_attendances += 1.0
                    if prev_attendance and next_attendance:
                        if all([
                            not prev_attendance.punch_in or prev_attendance.punch_in == '0',
                            not prev_attendance.punch_out or prev_attendance.punch_out == '0',
                            not next_attendance.punch_in or next_attendance.punch_in == '0',
                            not next_attendance.punch_out or next_attendance.punch_out == '0'
                        ]):
                            leave_days += 1.0
                            sunday_attendances -= 1.0
                    continue

                leave_status = leave_map.get(attendance_date_str)
                leave_type = leave_type_map.get(attendance_date_str)

                # âœ… Add any punch-in or punch-out day to total_days_worked
                if (attendance.punch_in and attendance.punch_in != '0') or (attendance.punch_out and attendance.punch_out != '0'):
                    unique_dates.add(attendance_date_str)

                if leave_status == 'Approved':
                    leave_days += 1.0
                    prev_attendance = attendance
                    continue

                if leave_status == 'Rejected' and leave_type in ['Full Leave', 'Half Leave']:
                    if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
                        leave_days += 1.0
                        rejected_double_leave_days += 1.0
                        prev_attendance = attendance
                        continue
                    if (not attendance.punch_in or attendance.punch_in == '0') or (not attendance.punch_out or attendance.punch_out == '0'):
                        rejected_double_half_days += 1
                        prev_attendance = attendance
                        continue

                # if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
                #     leave_days += 1.0
                #     prev_attendance = attendance
                #     continue

                if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
                    if attendance_date_str in second_fourth_saturdays:
                        half_days += 1.0  # Only half-day if absent on 2nd/4th Saturday
                    else:
                        leave_days += 1.0
                    prev_attendance = attendance
                    continue

                if not attendance.punch_in or attendance.punch_in == '0':
                    half_days += 1.0
                    prev_attendance = attendance
                    continue

                try:
                    punch_in_time = datetime.strptime(attendance.punch_in, "%H:%M")
                    punch_out_time = None

                    if attendance.punch_out and attendance.punch_out != '0':
                        punch_out_time = datetime.strptime(attendance.punch_out, "%H:%M")

                    if not punch_out_time or punch_out_time == 0:
                        half_days += 1.0
                        prev_attendance = attendance
                        continue

                    if emp_shift == "09:00 - 18:00":
                        shift_start_time = datetime.strptime("09:00", "%H:%M")
                        shift_end_time = datetime.strptime("18:00", "%H:%M")
                    else:
                        shift_start_time = datetime.strptime("10:00", "%H:%M")
                        shift_end_time = datetime.strptime("19:00", "%H:%M")

                    if punch_in_time < shift_start_time:
                        overtime_minutes += (shift_start_time - punch_in_time).total_seconds() / 60

                    if punch_out_time > shift_end_time:
                        overtime_minutes += (punch_out_time - shift_end_time).total_seconds() / 60

                    if attendance_date_str not in second_fourth_saturdays:
                        if punch_in_time > (shift_start_time + timedelta(minutes=15)):
                            late_punches += 1.0
                            half_days += 1.0
                        elif punch_out_time < shift_end_time:
                            early_punches += 1.0
                            half_days += 1.0
                        else:
                            full_days += 1.0
                    else:
                        full_days += 1.0  # Consider full day even if it's not

                except ValueError:
                    continue

                prev_attendance = attendance
            
        
            month_work_hours = total_month_work_minutes // 60
            month_work_remaining_minutes = total_month_work_minutes % 60
            total_month_work_str = f"{month_work_hours}hr {month_work_remaining_minutes}m" if month_work_hours else f"{month_work_remaining_minutes}minutes"
            
            pure_worked_minutes = total_month_work_minutes - total_month_breaks
            pure_work_hours = pure_worked_minutes // 60
            pure_work_remaining_minutes = pure_worked_minutes % 60
            pure_month_work_str = f"{pure_work_hours}hr {pure_work_remaining_minutes}m" if pure_work_hours else f"{pure_work_remaining_minutes}minutes"
            
            # âœ… Corrected total_days_worked logic
            total_days_worked = float(len(unique_dates))
            
            # Ensure from_date and to_date are datetime objects
            if isinstance(from_date, str):
                from_date_dt = datetime.strptime(from_date, "%Y-%m-%d")
            else:
                from_date_dt = from_date
            
            if isinstance(to_date, str):
                to_date_dt = datetime.strptime(to_date, "%Y-%m-%d")
            else:
                to_date_dt = to_date
            
            # Then calculate total_month_days
            total_month_days = float((to_date_dt - from_date_dt).days + 1)

            overtime_hours = float(overtime_minutes // 60)
            overtime_remaining_minutes = float(overtime_minutes % 60)

            reports = tbl_daily_report.objects.filter(
                userId=user_id,
                reportDate__range=[from_date, to_date]
            )

            half_missing_reports = full_missing_reports = days_half_report = days_full_report = sunday_count = 0

            for report in reports:
                lep_entries = [report.lep1, report.lep2, report.lep3]
                missing_count = lep_entries.count("") + lep_entries.count("0")

                if missing_count == 0:
                    days_full_report += 1
                if missing_count >= 1:
                    days_half_report += 1
                if missing_count == 1:
                    half_missing_reports += 1
                elif missing_count == 2:
                    half_missing_reports += 2
                elif missing_count == 3:
                    full_missing_reports += 3

            reported_dates = set(report.reportDate.strftime('%Y-%m-%d') for report in reports)
            
            if isinstance(from_date, str):
                current = datetime.strptime(from_date, "%Y-%m-%d")
            else:
                current = from_date

            if isinstance(to_date, str):
                end = datetime.strptime(to_date, "%Y-%m-%d")
            else:
                end = to_date

            while current <= end:
                if current.weekday() == 6:
                    sunday_count += 1
                elif current.strftime('%Y-%m-%d') not in reported_dates:
                    full_missing_reports += 1
                current += timedelta(days=1)

            penalty_leaves = float(rejected_double_leave_days)
            penalty_halfs = 0.5 * float(rejected_double_half_days)

            final_leaves = float(leave_days) + float(penalty_leaves) + 0.5 * float(half_days) + float(penalty_halfs)

            # paid_days = float(full_days)
            # paid_days += float(sunday_attendances)
            # paid_days += 0.5 * float(half_days)
            # # leave_days_ = float(leave_days)
            # # leave_days_ += 0.5 * float(half_days)
            # leave_days_ = float(final_leaves)

            paid_days = float(full_days) - (float(penalty_halfs) + float(penalty_leaves)) + len(exception_leave_dates) + holiday_count
            paid_days += float(sunday_attendances)
            paid_days += 0.5 * float(half_days)
            # leave_days_ = float(leave_days)
            # leave_days_ += 0.5 * float(half_days)
            leave_days_ = float(final_leaves) + len(exception_leave_dates) + holiday_count

            if leave_days_:
                if leave_days_ == 0.5:
                    paid_days += 0.5
                elif leave_days_ == 1:
                    paid_days += 1
                elif leave_days_ >= 1.5:
                    paid_days += 1.5

            # emp_salary = float(employee.gross_sal or 0.0)
            # per_day_salary = emp_salary / total_month_days if total_month_days else 0.0
            # amount = round(per_day_salary * paid_days, 2)

            if isinstance(from_date, str):
                from_date = datetime.strptime(from_date, "%d-%m-%Y").date()
            
            # Get the latest increment before or equal to the from_date
            # latest_salary = tbl_salary_history.objects.filter(
            #     emp_id=emp_id,
            #     increment_date__lte=from_date  # <= from_date
            # ).order_by('-increment_date').first()
            
            # if latest_salary:
            #     emp_salary = float(latest_salary.salary or 0.0)
            # else:
            #     emp_salary = float(employee.gross_sal or 0.0)
            
            previous_month_date = from_date + relativedelta(months=1)
        
            # Get the latest increment before or equal to the reduced date
            latest_salary = tbl_salary_history.objects.filter(
                emp_id=emp_id,
                increment_date__lte=previous_month_date
            ).order_by('-increment_date').first()
            
            # Safely assign salary if found
            emp_salary = float(latest_salary.salary or 0.0) if latest_salary else 0.0

            # Use that salary, else fallback to gross_sal
            
            # Calculate salary
            per_day_salary = emp_salary / total_month_days if total_month_days else 0.0
            amount = round(per_day_salary * paid_days, 2)


            advance_salary = tbl_adv_salary.objects.filter(emp_id=emp_id, salary_date__range=(from_date, to_date))
            adv_amount = sum(adv.adv_salary for adv in advance_salary)

            leaves_list = []
            for leave in leave_apps.values('leave_type', 'app_start_date', 'app_end_date', 'reason', 'status'):
                leave['app_start_date'] = leave['app_start_date'].strftime('%d-%m-%Y')
                leave['app_end_date'] = leave['app_end_date'].strftime('%d-%m-%Y')
                leaves_list.append(leave)
            
            task_list = [
                {
                    **task,
                    'assign_date': task['assign_date'].strftime('%d-%m-%Y') if task['assign_date'] else None,
                    'complete_date': task['complete_date'].strftime('%d-%m-%Y') if task['complete_date'] else None
                }
                for task in tasks.values(
                    'task_type',
                    'assign_date',
                    'complete_date',
                    'task_name',
                    'status',
                    'description',
                    'delay_count'
                )
            ]
            exception_leaves_count = len(exception_leave_dates)
            if isinstance(from_date, str):
                from_date_obj = datetime.strptime(from_date, "%Y-%m-%d")
            else:
                from_date_obj = from_date
            
            if isinstance(to_date, str):
                to_date_obj = datetime.strptime(to_date, "%Y-%m-%d")
            else:
                to_date_obj = to_date
            after_deductions =  amount - adv_amount - 200

            if after_deductions < 0:
                after_deductions = 0

            context = {
                'total_salary_till_today': float(total_salary_till_today),
                'emp_salary': emp_salary,
                'emp_id': employee.emp_id,
                'full_name': full_name,
                'company_name': company_name,
                'company_address': company_address, 
                'exception_leaves': exception_leaves_count,
                'breaks': breaks_data,
                'm_total_break_str': total_month_breaks_str,
                'total_month_worked_hours': total_month_work_str,
                'pure_month_work_str': pure_month_work_str,
                'holiday_count': holiday_count,
                'final_leaves': final_leaves,
                'paid_days': paid_days,
                'amount': amount,
                'adv_amount': adv_amount,
                'tax': 200,
                'emp_salary': emp_salary,
                'after_deductions': after_deductions, 
                'leaves_data': leaves_list,
                'attendances': attendance_data,
                'total_days_worked': total_days_worked,
                'total_month_days': total_month_days,
                'full_days': full_days,
                'half_days': half_days,
                'late_punches': late_punches,
                'early_punches': early_punches,
                'sunday_attendances': sunday_attendances,
                'leave_days': leave_days,
                'rejected_double_leave_days': rejected_double_leave_days,
                'rejected_double_half_days': rejected_double_half_days,
                'overtime_hours': overtime_hours,
                'overtime_remaining_minutes': overtime_remaining_minutes,
                # 'from_date': datetime.strptime(from_date, "%Y-%m-%d").strftime("%d-%m-%Y"),
                # 'to_date': datetime.strptime(to_date, "%Y-%m-%d").strftime("%d-%m-%Y"),
                'from_date': from_date_obj.strftime("%d-%m-%Y"),
                'to_date': to_date_obj.strftime("%d-%m-%Y"),
                # 'tasks': list(tasks.values('task_type', 'task_name', 'status', 'description', 'delay_count')),
                'tasks': task_list,
                'total_task': total_task,
                'complete_task': complete_task,
                'pending_task': pending_task,
                'revised_task': revised_task,
                'task_delay': task_delay,
                'half_missing_reports': half_missing_reports,
                'full_missing_reports': full_missing_reports,
                'days_half_report': days_half_report,
                'days_full_report': days_full_report,
                'sunday_count': sunday_count,
                'session_roleid': session_roleid
            }
            
            if action == "download":
                response = HttpResponse(content_type='application/pdf')
                response['Content-Disposition'] = f'attachment; filename="Employee_Report_{emp_id}.pdf"'
            
                p = canvas.Canvas(response, pagesize=letter)
                width, height = letter
            
                # Title & Header Info
                p.setFont("Helvetica-Bold", 16)
                p.drawString(200, height - 40, "Employee Report")
            
                p.setFont("Helvetica", 11)
                p.drawString(50, height - 80, f"Employee ID: {emp_id}")
                p.drawString(250, height - 80, f"From: {context['from_date']} To: {context['to_date']}")
                p.drawString(50, height - 95, f"Employee Name: {context['full_name']}")
                p.drawString(50, height - 110, f"Employee Company: {context['company_name']}")
            
                y = height - 140  # Added more spacing
            
                # Attendance Details
                p.setFont("Helvetica-Bold", 16)
                p.drawString(50, y, "Attendance Details")
                y -= 20  # Space after section title
            
                p.setFont("Helvetica-Bold", 13)
                p.drawString(60, y, "Description")
                p.drawString(180, y, "Details")
                p.drawString(320, y, "Description")
                p.drawString(440, y, "Details")
                y -= 12
                p.line(55, y, 500, y)
                y -= 16
            
                p.setFont("Helvetica", 11)
                salary_details = [
                    # ("From Date", datetime.strptime(from_date, "%Y-%m-%d").strftime("%d-%m-%Y")),
                    # ("To Date", datetime.strptime(to_date, "%Y-%m-%d").strftime("%d-%m-%Y")),
                    ("From Date", from_date.strftime("%d-%m-%Y") if isinstance(from_date, datetime) else datetime.strptime(from_date, "%Y-%m-%d").strftime("%d-%m-%Y")),
                    ("To Date", to_date.strftime("%d-%m-%Y") if isinstance(to_date, datetime) else datetime.strptime(to_date, "%Y-%m-%d").strftime("%d-%m-%Y")),
                    ("Total Days", context['total_month_days']),
                    ("Total Days Worked", context['total_days_worked']),
                    ("Sundays", context['sunday_attendances']),
                    ("Holidays", context['holiday_count']),
                    ("Leaves", context['leave_days']),
                    ("Full Days", context['full_days']),
                    ("Half Days", context['half_days']),
                    ("Late Punches", context['late_punches']),
                    ("Early Punches", context['early_punches']),
                    ("Rejected Leaves Taken", context['rejected_double_leave_days']),
                    ("Rejected Halfs Taken", context['rejected_double_half_days']),
                    ("Total Overtime", f"{context['overtime_hours']} hours {context['overtime_remaining_minutes']} minutes"),
                    ("Exception leaves", context['exception_leaves']),
                    ("leaves including penalty", context['final_leaves']),
                ]
            
                for i in range(0, len(salary_details), 2):
                    label1, value1 = salary_details[i]
                    p.drawString(60, y, str(label1)[:25])
                    p.drawString(180, y, str(value1))
            
                    if i + 1 < len(salary_details):
                        label2, value2 = salary_details[i + 1]
                        p.drawString(320, y, str(label2)[:25])
                        p.drawString(440, y, str(value2))
            
                    y -= 16  # Increased spacing between rows
            
                y -= 20  # Extra space before next section
            
                # Salary Details
                p.setFont("Helvetica-Bold", 16)
                p.drawString(50, y, "Salary Details")
                y -= 20
            
                p.setFont("Helvetica-Bold", 13)
                p.drawString(60, y, "Description")
                p.drawString(300, y, "Details")
                y -= 12
                p.line(55, y, 500, y)
                y -= 16
            
                p.setFont("Helvetica", 11)
                salary_details = [
                    ("Employee Salary", context['emp_salary']),
                    ("Paid Days", context['paid_days']),
                    ("Paid days Amount", context['amount']),
                    ("Advance Amount", context['adv_amount']),
                    ("Tax", context['tax']),
                    ("After Deductions", context['after_deductions']),
                ]
            
                for label, value in salary_details:
                    p.drawString(60, y, str(label)[:40])
                    p.drawString(300, y, str(value))
                    y -= 16
            
                y -= 20
            
                # Task Summary
                p.setFont("Helvetica-Bold", 16)
                p.drawString(50, y, "Task Summary (Counts)")
                y -= 20
            
                p.setFont("Helvetica-Bold", 13)
                p.drawString(60, y, "Description")
                p.drawString(300, y, "Details")
                y -= 12
                p.line(55, y, 500, y)
                y -= 16
            
                p.setFont("Helvetica", 11)
                summary_data = [
                    ("Total Tasks", context['total_task']),
                    ("Completed Tasks", context['complete_task']),
                    ("Pending Tasks", context['pending_task']),
                    ("Revised Tasks", context['revised_task']),
                    ("Total Delay", f"{context['task_delay']} days"),
                ]
            
                for label, value in summary_data:
                    if label == "Total Delay":
                        p.setFont("Helvetica-Bold", 11)
                        p.line(55, y, 500, y)
                        y -= 14
            
                    p.setFont("Helvetica", 11)
                    p.drawString(60, y, str(label)[:40])
                    p.drawString(300, y, str(value))
                    y -= 16
            
                y -= 20
            
                # Daily Report Summary
                p.setFont("Helvetica-Bold", 16)
                p.drawString(50, y, "Daily Report Summary")
                y -= 18
            
                lep_summary = [
                    ("Half Missing Reports", context['half_missing_reports']),
                    ("No. of days (Half Missing Reports)", context['days_half_report']),
                    ("No. of days (Complete Reports)", context['days_full_report']),
                    ("No. of days (No report at all excluding Sunday)", context['full_missing_reports']),
                    ("No. of Sundays (No Reports)", context['sunday_count']),
                ]
            
                p.setFont("Helvetica-Bold", 13)
                p.drawString(60, y, "Description")
                p.drawString(400, y, "Details")
                y -= 12
                p.line(55, y, 500, y)
                y -= 16
            
                p.setFont("Helvetica", 11)
                for label, value in lep_summary:
                    p.drawString(60, y, label[:40])
                    p.drawString(400, y, str(value))
                    y -= 16
            
                # Finalize the PDF
                p.save()
                return response
    
            else:
                request.session['details_context'] = context
                request.session['ss_context'] = context
                return redirect('employee_details', emp_id=emp_id)

        else:
            return render(request, "employee_details.html", {
                'error_message': "Please select a valid date range.",
                'session_roleid': session_roleid
            })
    else:
        return redirect('login')

def salary(request, emp_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        data = get_object_or_404(tbl_employee, emp_id=emp_id)

        salary_context = request.session.get('salary_context')

        if salary_context:
            context = {**salary_context, 'data': data, 'session_roleid': session_roleid}
            del request.session['salary_context']
            return render(request, "salary.html", context)
        else:
            context = {'data': data, 'session_roleid': session_roleid}
            return render(request, "salary.html", context)
    else:
        return redirect('login')

def attendance_count(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        emp_id = request.POST.get('emp_id')
        from_date = request.POST.get('from_date')
        to_date = request.POST.get('to_date')

        if from_date and to_date:
            employee = get_object_or_404(tbl_employee, emp_id=emp_id)
            machine_id = employee.machine_id
            emp_shift = employee.attendence_time

            attendances = tbl_attendances.objects.filter(
                date__range=[from_date, to_date],
                machine_id=machine_id
            ).order_by('date')

            full_days = 0.0
            half_days = 0.0
            late_punches = 0.0
            early_punches = 0.0
            sunday_attendances = 0.0
            leave_days = 0.0
            overtime_minutes = 0.0

            unique_dates = set()
            attendance_data = []
            prev_attendance = None
            next_attendance = None

            for i, attendance in enumerate(attendances):
                attendance_date_str = attendance.date.strftime("%Y-%m-%d")

                attendance_data.append({
                    # 'date': attendance_date_str,
                    'date': datetime.strptime(attendance_date_str, "%Y-%m-%d").strftime("%d-%m-%Y"),
                    'punch_in': attendance.punch_in,
                    'punch_out': attendance.punch_out
                })

                if i + 1 < len(attendances):
                    next_attendance = attendances[i + 1]
                else:
                    next_attendance = None

                if attendance.date.weekday() == 6:
                    sunday_attendances += 1.0
                    if prev_attendance and next_attendance:
                        if all([
                            not prev_attendance.punch_in or prev_attendance.punch_in == '0',
                            not prev_attendance.punch_out or prev_attendance.punch_out == '0',
                            not next_attendance.punch_in or next_attendance.punch_in == '0',
                            not next_attendance.punch_out or next_attendance.punch_out == '0'
                        ]):
                            leave_days += 1.0
                            sunday_attendances -= 1.0
                    continue

                if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
                    leave_days += 1.0
                    prev_attendance = attendance
                    continue

                if not attendance.punch_in or attendance.punch_in == '0':
                    half_days += 1.0
                    prev_attendance = attendance
                    continue

                try:
                    punch_in_time = datetime.strptime(attendance.punch_in, "%H:%M")
                    punch_out_time = None

                    if attendance.punch_out and attendance.punch_out != '0':
                        punch_out_time = datetime.strptime(attendance.punch_out, "%H:%M")

                    unique_dates.add(attendance_date_str)

                    if not punch_out_time:
                        half_days += 1.0
                        prev_attendance = attendance
                        continue

                    if emp_shift == "09:00 - 18:00":
                        shift_start_time = datetime.strptime("09:00", "%H:%M")
                        shift_end_time = datetime.strptime("18:00", "%H:%M")
                    else:
                        shift_start_time = datetime.strptime("10:00", "%H:%M")
                        shift_end_time = datetime.strptime("19:00", "%H:%M")

                    if punch_in_time < shift_start_time:
                        overtime_minutes += (shift_start_time - punch_in_time).total_seconds() / 60

                    if punch_out_time > shift_end_time:
                        overtime_minutes += (punch_out_time - shift_end_time).total_seconds() / 60

                    if punch_in_time > (shift_start_time + timedelta(minutes=15)):
                        late_punches += 1.0
                        half_days += 1.0
                    elif punch_out_time < shift_end_time:
                        early_punches += 1.0
                        half_days += 1.0
                    else:
                        full_days += 1.0

                except ValueError:
                    continue

                prev_attendance = attendance

            total_days_worked = float(len(unique_dates))
            total_month_days = float((datetime.strptime(to_date, "%Y-%m-%d") - datetime.strptime(from_date, "%Y-%m-%d")).days + 1)

            overtime_hours = float(overtime_minutes // 60)
            overtime_remaining_minutes = float(overtime_minutes % 60)

            context_data = {
                'emp_id': employee.emp_id,
                'attendances': attendance_data,
                'total_days_worked': total_days_worked,
                'total_month_days': total_month_days,
                'full_days': full_days,
                'half_days': half_days,
                'late_punches': late_punches,
                'early_punches': early_punches,
                'sunday_attendances': sunday_attendances,
                'leave_days': leave_days,
                'overtime_hours': overtime_hours,
                'overtime_remaining_minutes': overtime_remaining_minutes,
                # 'from_date': from_date,
                # 'to_date': to_date,
                'from_date':  datetime.strptime(from_date, "%Y-%m-%d").strftime("%d-%m-%Y"),
                'to_date':  datetime.strptime(to_date, "%Y-%m-%d").strftime("%d-%m-%Y"),
                'session_roleid': session_roleid
            }

            request.session['salary_context'] = context_data
            request.session['ss_context'] = context_data

            return redirect('salary', emp_id=emp_id)

        else:
            return render(request, "salary.html", {
                'error_message': "Please select a valid date range.",
                'session_roleid': session_roleid
            })
    else:
        return redirect('login')

# def salary_slip_(request):
#     ss_context = request.session.get('ss_context')

#     from_date = ss_context.get('from_date')
#     emp_id = ss_context.get('emp_id')
#     paid_days = float(ss_context.get('full_days', 0.0))
#     leave_days = float(ss_context.get('leave_days', 0.0))
#     paid_sundays = float(ss_context.get('sunday_attendances', 0.0))
#     total_month_days = float(ss_context.get('total_month_days', 0.0))
#     half_days = float(ss_context.get('half_days', 0.0))
#     exception_leaves = float(ss_context.get('exception_leaves', 0.0))
#     holiday_count = float(ss_context.get('holiday_count', 0.0))

#     paid_days += paid_sundays + exception_leaves + holiday_count
#     paid_days += 0.5 * half_days
#     leave_days += 0.5 * half_days
    
#     if leave_days: 
#         if leave_days == 0.5:
#             paid_days += 0.5
#         if leave_days == 1:
#             paid_days += 1
#         if leave_days >= 1.5:
#             paid_days += 1.5

#     employee = get_object_or_404(tbl_employee, emp_id=emp_id) 
#     emp_salary = float(employee.gross_sal or 0.0)

#     dp_ids = employee.dp_id.split(",") if employee.dp_id else []
#     departments = master_department.objects.filter(dp_id__in=dp_ids)
#     dep_name = ", ".join(dep.dep_name for dep in departments)

#     if isinstance(from_date, str):
#         # from_date = datetime.strptime(from_date, "%Y-%m-%d").date()
#         from_date = datetime.strptime(from_date, "%d-%m-%Y").date()

#     formatted_from_date = from_date.strftime("%B %Y")
#     per_day_salary = emp_salary / total_month_days if total_month_days else 0.0
#     amount =  round(per_day_salary * paid_days, 2)
#     amt_words = f"Rupees {num2words(amount, lang='en_IN').capitalize()} Only"

#     context = {
#         **ss_context,
#         'formatted_from_date': formatted_from_date,
#         'employee': employee,
#         'dep_name': dep_name,
#         'paid_days': paid_days,
#         'amount': amount,
#         'amt_words': amt_words,
#     }

#     return render(request, "salary-slip.html", context)

def salary_slip_(request):
    ss_context = request.session.get('ss_context')

    from_date = ss_context.get('from_date')
    emp_id = ss_context.get('emp_id')
    paid_days = float(ss_context.get('full_days', 0.0))
    leave_days = float(ss_context.get('leave_days', 0.0))
    paid_sundays = float(ss_context.get('sunday_attendances', 0.0))
    total_month_days = float(ss_context.get('total_month_days', 0.0))
    half_days = float(ss_context.get('half_days', 0.0))
    exception_leaves = float(ss_context.get('exception_leaves', 0.0))
    holiday_count = float(ss_context.get('holiday_count', 0.0))

    paid_days += paid_sundays + exception_leaves + holiday_count
    paid_days += 0.5 * half_days
    leave_days += 0.5 * half_days
    
    if leave_days: 
        if leave_days == 0.5:
            paid_days += 0.5
        if leave_days == 1:
            paid_days += 1
        if leave_days >= 1.5:
            paid_days += 1.5

    employee = get_object_or_404(tbl_employee, emp_id=emp_id)

    if isinstance(from_date, str):
        from_date = datetime.strptime(from_date, "%d-%m-%Y").date()
    
    # emp_salary = float(latest_salary.salary or 0.0)
    emp_salary = float(ss_context.get('emp_salary', 0.0))

    dp_ids = employee.dp_id.split(",") if employee.dp_id else []
    departments = master_department.objects.filter(dp_id__in=dp_ids)
    dep_name = ", ".join(dep.dep_name for dep in departments)

    formatted_from_date = from_date.strftime("%B %Y")
    per_day_salary = emp_salary / total_month_days if total_month_days else 0.0
    amount = round(per_day_salary * paid_days, 2)
    amt_words = f"Rupees {num2words(amount, lang='en_IN').capitalize()} Only"

    context = {
        **ss_context,
        'formatted_from_date': formatted_from_date,
        'emp_salary': emp_salary,
        'employee': employee,
        'dep_name': dep_name,
        'paid_days': paid_days,
        'amount': amount,
        'amt_words': amt_words,
    }

    return render(request, "salary-slip.html", context)

def salary_slip(request):
    ss_context = request.session.get('ss_context')

    from_date = ss_context.get('from_date')
    emp_id = ss_context.get('emp_id')
    paid_days = float(ss_context.get('full_days', 0.0))
    leave_days = float(ss_context.get('leave_days', 0.0))
    paid_sundays = float(ss_context.get('sunday_attendances', 0.0))
    total_month_days = float(ss_context.get('total_month_days', 0.0))
    half_days = float(ss_context.get('half_days', 0.0))

    paid_days += paid_sundays
    paid_days += 0.5 * half_days
    leave_days += 0.5 * half_days
    
    if leave_days: 
        if leave_days == 0.5:
            paid_days += 0.5
        if leave_days == 1:
            paid_days += 1
        if leave_days >= 1.5:
            paid_days += 1.5

    employee = get_object_or_404(tbl_employee, emp_id=emp_id) 
    emp_salary = float(employee.gross_sal or 0.0)

    dp_ids = employee.dp_id.split(",") if employee.dp_id else []
    departments = master_department.objects.filter(dp_id__in=dp_ids)
    dep_name = ", ".join(dep.dep_name for dep in departments)

    if isinstance(from_date, str):
        # from_date = datetime.strptime(from_date, "%Y-%m-%d").date()
        from_date = datetime.strptime(from_date, "%d-%m-%Y").date()

    formatted_from_date = from_date.strftime("%B %Y")
    per_day_salary = emp_salary / total_month_days if total_month_days else 0.0
    amount =  round(per_day_salary * paid_days, 2)
    amt_words = f"Rupees {num2words(amount, lang='en_IN').capitalize()} Only"

    context = {
        **ss_context,
        'formatted_from_date': formatted_from_date,
        'employee': employee,
        'dep_name': dep_name,
        'paid_days': paid_days,
        'amount': amount,
        'amt_words': amt_words,
    }

    return render(request, "salary-slip.html", context)


def approved_leave(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        # approved_leaves = tbl_leave_appli.objects.filter(status='Approved')
        employee_data = tbl_users2.objects.all() 
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1", "2"}):
                approved_leaves = tbl_leave_appli.objects.filter(status='Approved')
            else:
                approved_leaves = tbl_leave_appli.objects.filter(add_by_id=session_id, status='Approved')
            
            date_range_filter = request.GET.get('date_range')
            emp_name = request.GET.get('emp_name')
            leave_type = request.GET.get('leave_type')
            allocation_to = request.GET.get('allocation_to')
            reason = request.GET.get('reason')
            
            if date_range_filter:
                try:
                    # Decode the URL-encoded date range
                    date_range_filter = date_range_filter.replace('%2F', '/').replace('%3A', ':').replace('+', ' ')
                    
                    # Split the date range into start and end dates
                    date_start, date_end = date_range_filter.split(' - ')
                    
                    # Convert the string format (MM/DD/YYYY hh:mm AM/PM) to a Python datetime object
                    # Use datetime.strptime to parse the date
                    app_start_datetime = datetime.strptime(date_start, '%m/%d/%Y %I:%M %p')
                    app_end_datetime = datetime.strptime(date_end, '%m/%d/%Y %I:%M %p')
                    
                    # Apply the date range filter
                    approved_leaves = approved_leaves.filter(
                        app_start_date__gte=app_start_datetime, 
                        app_end_date__lte=app_end_datetime
                    )
                except ValueError:
                    # If the date range is invalid, print an error message or handle accordingly
                    print("Invalid date range format!")
                
            if emp_name:
                approved_leaves = approved_leaves.filter(emp_name__icontains=emp_name)
            if leave_type:
                approved_leaves = approved_leaves.filter(leave_type__icontains=leave_type)
            if allocation_to:
                approved_leaves = approved_leaves.filter(allocation_to__icontains=allocation_to)
            if reason:
                approved_leaves = approved_leaves.filter(reason__icontains=reason)
            
            # query = Q()
                
            # if from_date or to_date:
            #     try:
            #         if from_date:
            #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
            #         else:
            #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
            #         if to_date:
            #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
            #         else:
            #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
            #         if from_date > to_date:
            #             from_date, to_date = to_date, from_date
                        
            #         query &= Q(create_time__range=[from_date, to_date])
                    
            #     except ValueError:
            #         pass
                
            # if emp_id:
            #     query |= Q(emp_id__icontains=emp_id)
            # if emp_name:
            #     query |= Q(emp_name__icontains=emp_name)
            # if leave_type:
            #     query |= Q(leave_type__icontains=leave_type)
            # if app_start_date:
            #     query |= Q(app_start_date__icontains=app_start_date)
            # if app_end_date:
            #     query |= Q(app_end_date__icontains=app_end_date)
            # if reason:
            #     query |= Q(reason__icontains=reason)
            
            # approved_leaves = approved_leaves.filter(query)
            approved_leaves = approved_leaves.order_by('-leave_id')
        
        return render(request,"leave-approval-leasting.html" ,{'employee_data':employee_data,'approved_leaves': approved_leaves,'session_roleid':session_roleid })
    else:
        return redirect(login)
             
def rejected_leave(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1", "2"}):
                rejected_leaves = tbl_leave_appli.objects.filter(status='Rejected')
            else:
                rejected_leaves = tbl_leave_appli.objects.filter(add_by_id=session_id, status='Rejected') 
            
            from_date = request.GET.get('fromDate')
            to_date = request.GET.get('toDate')
            emp_id = request.GET.get('emp_id')
            emp_name = request.GET.get('emp_name')
            leave_type = request.GET.get('leave_type')
            app_start_date = request.GET.get('app_start_date')
            app_end_date = request.GET.get('app_end_date')
            reason = request.GET.get('reason')
            
            query = Q()
                
            if from_date or to_date:
                try:
                    if from_date:
                        from_date = datetime.strptime(from_date, '%Y-%m-%d')
                    else:
                        from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
                    if to_date:
                        to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                    else:
                        to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
                        
                    query &= Q(create_time__range=[from_date, to_date])
                    
                except ValueError:
                    pass
                
            if emp_id:
                query |= Q(emp_id__icontains=emp_id)
            if emp_name:
                query |= Q(emp_name__icontains=emp_name)
            if leave_type:
                query |= Q(leave_type__icontains=leave_type)
            if app_start_date:
                query |= Q(app_start_date__icontains=app_start_date)
            if app_end_date:
                query |= Q(app_end_date__icontains=app_end_date)
            if reason:
                query |= Q(reason__icontains=reason)
            
            rejected_leaves = rejected_leaves.filter(query)
            rejected_leaves = rejected_leaves.order_by('-leave_id')
        
        return render(request,"rejected_leave.html" ,{'rejected_leaves': rejected_leaves,'session_roleid':session_roleid })
    else:
        return redirect(login)

def approve_leave(request, leave_id):
    if 'session_id' in request.session:
        leave = get_object_or_404(tbl_leave_appli, leave_id=leave_id)
        leave.status = 'Approved'
        leave.save()
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Approved leave application - {leave.emp_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        return JsonResponse({'success': True, 'redirect_url': reverse('pending_leave')})
    else:
        return redirect(login)

def reject_leave(request, leave_id):
    if 'session_id' in request.session:
        leave = get_object_or_404(tbl_leave_appli, leave_id=leave_id)
        leave.status = 'Rejected'
        leave.save()
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Rejected leave application - {leave.emp_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        return JsonResponse({'success': True, 'redirect_url': reverse('pending_leave')})
    else:
        return redirect(login)

def delete_leave(request, leave_id):
    if 'session_id' in request.session:
        leave = get_object_or_404(tbl_leave_appli, leave_id=leave_id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete leave application - {leave.emp_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        leave.delete()
        return JsonResponse({'success': True,'leave_id': leave_id, 'name': leave.emp_name})
    else:
        return redirect(login)
        
def del_leave(request, leave_id):
    if 'session_id' in request.session:
        leave = get_object_or_404(tbl_leave_appli, leave_id=leave_id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete leave application - {leave.emp_name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
            
        leave.delete()
        return JsonResponse({'success': True,'leave_id': leave_id, 'name': leave.emp_name})
    else:
        return redirect(login)
        
def view_leave(request, leave_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        leave = get_object_or_404(tbl_leave_appli, leave_id=leave_id)
        try:
            allocated_to_obj = tbl_users2.objects.get(userId = leave.allocation_to)
            allocated_to = allocated_to_obj.name
        except:  
            allocated_to = "Not allocated ..."
        return render(request, 'view-leave.html', {'leave': leave,'allocated_to':allocated_to,'session_roleid':session_roleid})
    else:
        return redirect(login)

 
def pending_leave(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        # pending_leaves = tbl_leave_appli.objects.filter(status='Pending')
        
        if session_id and session_roleid:
            if set(session_roleid).intersection({"1", "2"}):
                pending_leaves = tbl_leave_appli.objects.filter(status='Pending')
            else:
                pending_leaves = tbl_leave_appli.objects.filter(add_by_id=session_id, status='Pending')
        
            from_date = request.GET.get('fromDate')
            to_date = request.GET.get('toDate')
            emp_id = request.GET.get('emp_id')
            emp_name = request.GET.get('emp_name')
            leave_type = request.GET.get('leave_type')
            app_start_date = request.GET.get('app_start_date')
            app_end_date = request.GET.get('app_end_date')
            reason = request.GET.get('reason')
            
            query = Q()
                
            if from_date or to_date:
                try:
                    if from_date:
                        from_date = datetime.strptime(from_date, '%Y-%m-%d')
                    else:
                        from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                        
                    if to_date:
                        to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                    else:
                        to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                    
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
                        
                    query &= Q(create_time__range=[from_date, to_date])
                    
                except ValueError:
                    pass
                
            if emp_id:
                query |= Q(emp_id__icontains=emp_id)
            if emp_name:
                query |= Q(emp_name__icontains=emp_name)
            if leave_type:
                query |= Q(leave_type__icontains=leave_type)
            if app_start_date:
                query |= Q(app_start_date__icontains=app_start_date)
            if app_end_date:
                query |= Q(app_end_date__icontains=app_end_date)
            if reason:
                query |= Q(reason__icontains=reason)
            
            pending_leaves = pending_leaves.filter(query)
            pending_leaves = pending_leaves.order_by('-leave_id')
        
        return render(request,"open-pending-leave.html", {'pending_leaves': pending_leaves,'session_roleid':session_roleid})
    else:
        return redirect(login)
 
def add_leave(request):
    if 'session_id' in request.session:
        user_compeny = request.session['user_compney']
        session_id = request.session.get('session_id')
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        Username = request.session['session_user']
        employee = tbl_users2.objects.all() 
        
        
        return render(request,"open-add-leave.html", {
            'Username':Username,
            'comp_name':user_compeny,
            'session_roleid':session_roleid,
            'companey_list':master_company.objects.all(),
            'company_id': company_id,
            'employee': employee,
        })
    else:
        return redirect(login)
        

def addleave(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        if request.method == 'POST':
            emp_id = request.POST.get('empid')
            emp_name = request.POST.get('ename')
            leave_type = request.POST.get('leavetype')
            app_start_date = request.POST.get('asdate')
            app_end_date = request.POST.get('aedate')
            allocation_to = request.POST.get('allocation_to')
            # app_hard_copy = request.FILES.get('app_hard_copy')
            reason = request.POST.get('reson')
            
            leave_application = tbl_leave_appli(
                emp_id=emp_id,
                emp_name=emp_name,
                leave_type=leave_type,
                app_start_date=app_start_date,
                app_end_date=app_end_date,
                allocation_to=allocation_to,
                # app_hard_copy=app_hard_copy,
                reason=reason,
                status="Pending",
                add_by_id=request.session.get('session_id'),
                add_by_name=request.session.get('session_user'),
                create_time=timezone.now() + timedelta(hours=5, minutes=30),
            )
            leave_application.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add leave application - {emp_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
    
            return JsonResponse({'status': 'success', 'message': f'Leave Application {emp_name} added successfully!'})
    
        return render(request,"open-add-leave.html", {is_edit: False,'session_roleid':session_roleid})
        
    else:
        return redirect(login)

def edit_leave(request, leave_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        leave = get_object_or_404(tbl_leave_appli, leave_id=leave_id)
        employee = tbl_users2.objects.all() 
        
        if request.method == 'POST':
            leave.emp_id = request.POST.get('empid')
            leave.emp_name = request.POST.get('ename')
            leave.leave_type = request.POST.get('leavetype')
            leave.app_start_date = request.POST.get('asdate')
            leave.app_end_date = request.POST.get('aedate')
            leave.allocation_to = request.POST.get('allocation_to')
            leave.reason = request.POST.get('reson')
            
            if 'app_hard_copy' in request.FILES:
                leave.app_hard_copy = request.FILES['app_hard_copy']
            
            leave.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit leave application - {leave.emp_name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )

            return JsonResponse({
                    'status': 'success',
                    'message': f'Leave Application {leave.emp_name} has been successfully updated!'
                })

        return render(request, "open-add-leave.html", {'employee':employee,'leave': leave, 'is_edit':True,'session_roleid':session_roleid})
    else:
        return redirect(login)
 
def open_letter_least(request):
    if 'session_id' in request.session:
        employees = tbl_employee.objects.all()
        interns = tbl_intern.objects.all()
        session_roleid = request.session.get('session_roleid')
        return render(request,"letter-leasting.html",{'session_roleid':session_roleid, "employees":employees, "interns":interns})
        
    else:
        return redirect(login)
        
def download_experience_letter(request, employee_id):
    try:
        employee = tbl_employee.objects.get(emp_id=employee_id)
    except tbl_employee.DoesNotExist:
        return HttpResponse("Employee not found.", status=404)
        
    return render(request,'experience_letter.html', {'employee': employee})

def download_appointment_letter(request, employee_id):
    try:
        employee = tbl_employee.objects.get(emp_id=employee_id)
    except tbl_employee.DoesNotExist:
        return HttpResponse("Employee not found.", status=404)

    return render(request,'appointment_letter.html', {'employee': employee})

def download_offer_letter(request, employee_id):
    try:
        employee = tbl_employee.objects.get(emp_id=employee_id)
    except tbl_employee.DoesNotExist:
        return HttpResponse("Employee not found.", status=404)

    return render(request, 'offer_letter.html', {'employee': employee})

def download_intern_experience_letter(request, intern_id):
    try:
        intern = tbl_intern.objects.get(emp_id=intern_id)
    except tbl_intern.DoesNotExist:
        return HttpResponse("Intern not found.", status=404)
        
    return render(request, 'experience_letter.html', {'employee': intern})

def download_intern_appointment_letter(request, intern_id):
    try:
        intern = tbl_intern.objects.get(emp_id=intern_id)
    except tbl_intern.DoesNotExist:
        return HttpResponse("Intern not found.", status=404)

    return render(request, 'appointment_letter.html', {'employee': intern})

def download_intern_offer_letter(request, intern_id):
    try:
        intern = tbl_intern.objects.get(emp_id=intern_id)
    except tbl_intern.DoesNotExist:
        return HttpResponse("Intern not found.", status=404)

    return render(request, 'offer_letter.html', {'employee': intern})


def download_bond_letter(request, employee_id):
    try:
        employee = tbl_employee.objects.get(emp_id=employee_id)
    except tbl_employee.DoesNotExist:
        return HttpResponse("Employee not found.", status=404)

    return render(request, 'bond_letter.html', {'employee': employee})

 
def open_payroll_least(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        return render(request,"payroll-leasting.html",{'session_roleid':session_roleid})
    else:
        return redirect(login)
        
# def add_attendance_sheet(request):
#     if 'session_id' in request.session:
#         session_roleid = request.session.get('session_roleid')

#         if request.method == "POST" and request.FILES.get("upload_sheet"):
#             uploaded_file = request.FILES["upload_sheet"]

#             if not (uploaded_file.name.endswith('.xlsx') or uploaded_file.name.endswith('.xls')):
#                 return HttpResponse("Error: The uploaded file is not a valid Excel file. Please upload a .xlsx or .xls file.") 

#             try:
#                 if uploaded_file.name.endswith('.xlsx'):
#                     wb = openpyxl.load_workbook(uploaded_file)
#                     sheet = wb.active
                    
#                     date_range_str = sheet.cell(row=2, column=3).value  # Cell C2
#                     start_date_str, end_date_str = date_range_str.split(" ~ ")
#                     start_date = datetime.strptime(start_date_str.strip(), "%d/%m/%Y")
#                     end_date = datetime.strptime(end_date_str.strip(), "%d/%m/%Y")

#                 elif uploaded_file.name.endswith('.xls'):
#                     wb = xlrd.open_workbook(file_contents=uploaded_file.read())
#                     sheet = wb.sheet_by_index(0)
                    
#                     date_range_str = sheet.cell_value(1, 2)  # C2 in 0-index
#                     start_date_str, end_date_str = date_range_str.split(" ~ ")
#                     start_date = datetime.strptime(start_date_str.strip(), "%d/%m/%Y")
#                     end_date = datetime.strptime(end_date_str.strip(), "%d/%m/%Y")

#                 # Process employee data (starting from row 5)
#                 for row_idx in range(5, sheet.max_row + 1 if uploaded_file.name.endswith('.xlsx') else sheet.nrows):
#                     if uploaded_file.name.endswith('.xlsx'):
#                         row = [sheet.cell(row=row_idx, column=col_idx).value for col_idx in range(1, sheet.max_column + 1)]
#                     else:
#                         row = sheet.row_values(row_idx)

#                     process_row(row, start_date, end_date)

#                 messages.success(request, "File uploaded and data saved successfully.")
#                 return redirect('open_payroll_least')

#             except openpyxl.utils.exceptions.InvalidFileException:
#                 return HttpResponse("Error: The uploaded file is not a valid .xlsx Excel file.")
#             except xlrd.biffh.XLRDError:
#                 return HttpResponse("Error: The uploaded file is not a valid .xls Excel file.")
#             except Exception as e:
#                 return HttpResponse(f"Error processing the file: {str(e)}")

#         return render(request, "payroll-leasting.html", {'session_roleid': session_roleid})
#     else:
#         return redirect('login')

def add_attendance_sheet(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        if request.method == "POST" and request.FILES.get("upload_sheet"):
            uploaded_file = request.FILES["upload_sheet"]

            if not (uploaded_file.name.endswith('.xlsx') or uploaded_file.name.endswith('.xls')):
                return HttpResponse("Error: The uploaded file is not a valid Excel file. Please upload a .xlsx or .xls file.")

            try:
                # Read Excel
                if uploaded_file.name.endswith('.xlsx'):
                    wb = openpyxl.load_workbook(uploaded_file)
                    sheet = wb.active
                    date_range_str = sheet.cell(row=2, column=3).value  # C2
                else:
                    wb = xlrd.open_workbook(file_contents=uploaded_file.read())
                    sheet = wb.sheet_by_index(0)
                    date_range_str = sheet.cell_value(1, 2)  # C2

                # Extract dates
                start_date_str, end_date_str = date_range_str.split(" ~ ")
                start_date = datetime.strptime(start_date_str.strip(), "%d/%m/%Y")
                end_date = datetime.strptime(end_date_str.strip(), "%d/%m/%Y")

                # Check if records already exist for the month
                first_day_of_month = start_date.replace(day=1)
                last_day_of_month = start_date.replace(day=monthrange(start_date.year, start_date.month)[1])

                existing_records = tbl_attendances.objects.filter(date__range=(first_day_of_month, last_day_of_month))
                if existing_records.exists():
                    messages.error(request, "Attendance data for this month already exists. Upload skipped.")
                    return redirect('open_payroll_least')

                # Process employee data (from row 5 onward)
                for row_idx in range(5, sheet.max_row + 1 if uploaded_file.name.endswith('.xlsx') else sheet.nrows):
                    if uploaded_file.name.endswith('.xlsx'):
                        row = [sheet.cell(row=row_idx, column=col_idx).value for col_idx in range(1, sheet.max_column + 1)]
                    else:
                        row = sheet.row_values(row_idx)

                    process_row(row, start_date, end_date)

                messages.success(request, "File uploaded and data saved successfully.")
                return redirect('open_payroll_least')

            except openpyxl.utils.exceptions.InvalidFileException:
                return HttpResponse("Error: The uploaded file is not a valid .xlsx Excel file.")
            except xlrd.biffh.XLRDError:
                return HttpResponse("Error: The uploaded file is not a valid .xls Excel file.")
            except Exception as e:
                return HttpResponse(f"Error processing the file: {str(e)}")

        return render(request, "payroll-leasting.html", {'session_roleid': session_roleid})
    else:
        return redirect('login')


def process_row(row, start_date, end_date):
    user_name = row[1]
    machine_id = row[0]

    current_date = start_date
    col_idx = 2

    while current_date <= end_date and col_idx < len(row):
        value = row[col_idx]
        punches =""
        if value:
            value = str(value)  # Ensure it's a string
            times = value.split("\n")
            # punch_in = times[0].strip() if len(times) > 0 else "0"
            # punch_out = times[1].strip() if len(times) > 1 else "0"
            length = len(times)
            punch_in = times[0].strip() if length > 0 else "0"
            punch_out = times[length-2].strip() if length > 2 else "0" 
            # if times[length-1].strip() == "" and length > 2:
            #     punch_out = times[length-2].strip() if length > 2 else "0" 
            # else:
            #     punch_out = times[length-1].strip() if length > 1 else "0"
            
            for t in times:
                if t.strip() == punch_in or t.strip() == punch_out:
                    pass
                else:
                    punches += f"{t}\n"
                
        else:
            punches = punch_in = punch_out = "0"
        
        if punches == "" or punches == "\n":
            punches = "0"

        day_of_week = current_date.strftime("%A")
        
        tbl_attendance = tbl_attendances(
            machine_id=machine_id,
            user_name=user_name,
            punch_in=punch_in,
            punch_out=punch_out,
            date=current_date.date(),
            days=day_of_week,
            created_time=datetime.now()
        )
        
        tbl_attendance.save()
        
        break_entry = tbl_break(
            machine_id=machine_id,
            user_name=user_name,
            punches=punches,
            date=current_date.date(),
            days=day_of_week,
            created_time=datetime.now()
        )
        
        break_entry.save()
        
        current_date += timedelta(days=1)
        col_idx += 1

def monthly_report_list(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        data = tbl_monthly_report.objects.all()
        # if request.method == 'POST':
        # data_length = data.count()
        return render(request, "monthly_report_list.html", {
            'data': data,
            # 'data_length': data_length,
            'session_roleid': session_roleid
        })
    else:
        return redirect(login)
        
def download_monthly_report_all_employees(request):
    if 'session_id' not in request.session:
        return JsonResponse({"success": False, "message": "Session expired. Please login again."}, status=401)

    if request.method != 'POST':
        return JsonResponse({"success": False, "message": "Invalid request method."}, status=405)

    date_range_filter = request.POST.get('fromDate')
    if not date_range_filter:
        return JsonResponse({"success": False, "message": "Please provide a valid date range."}, status=400)

    try:
        from_str, to_str = date_range_filter.split(' - ')
        from_date_str = parser.parse(from_str.strip()).strftime("%Y-%m-%d")
        to_date_str = parser.parse(to_str.strip()).strftime("%Y-%m-%d")
    except Exception:
        return JsonResponse({"success": False, "message": "Invalid date range format."}, status=400)

    try:
        from_date = datetime.strptime(from_date_str, "%Y-%m-%d").date()
        to_date = datetime.strptime(to_date_str, "%Y-%m-%d").date()
    except ValueError:
        return JsonResponse({"success": False, "message": "Invalid date format. Use YYYY-MM-DD."}, status=400)

    # ✅ INSERT THIS LOGIC HERE
    selected_month = from_date.month
    selected_year = from_date.year

    # Check if attendance exists for that month
    attendance_exists = tbl_attendances.objects.filter(
        date__year=selected_year,
        date__month=selected_month
    ).exists()

    if not attendance_exists:
        return JsonResponse({
            'success': False,
            'message': f"No attendance records found for {from_date.strftime('%B %Y')}."
        })

    report_month_name = calendar.month_name[from_date.month]
    month_identifier = f"{report_month_name} {from_date.year}"

    if tbl_monthly_report.objects.filter(month=month_identifier).exists():
        return JsonResponse({
            "success": False,
            "message": f"Monthly report for {month_identifier} already exists."
        }, status=409)

    employees = tbl_employee.objects.filter(is_active=True)

    wb = Workbook()
    ws = wb.active
    ws.title = "Monthly Report"

    merged_title = f"Monthly Reports, {month_identifier}"
    ws.merge_cells('A1:K1')
    title_cell = ws['A1']
    title_cell.value = merged_title
    title_cell.font = Font(size=14, bold=True)
    title_cell.alignment = Alignment(horizontal="center", vertical="center")

    headers = [
        "Sr.No.", 
        # "Employee ID", 
        "Full Name", 
        "Paid Days", 
        "Leaves", 
        "Gross Salary", 
        "Advance salary", 
        "Tax Deduction",
        "Salary to be Paid", 
        "Delays", 
        "Required Hours excluding breaks", 
        "Worked Hours breaks", 
    ]
    
    ws.append(headers)

    counter = 1
    for emp in employees:
        machine_id = emp.machine_id
        emp_shift = emp.attendence_time
        user_id = emp.user_id
        tasks = tbl_task.objects.filter(assign_to=user_id,assign_date__date__range=[from_date, to_date])
        total_task = tasks.count()
        complete_task = pending_task = revised_task = task_delay = 0
        tax = 200
        for task in tasks:
            if task.status == "Complete":
                complete_task += 1
            if task.status == "Pending":
                pending_task += 1
            if task.status == "Revise":
                revised_task += 1
            if task.delay_count and isinstance(task.delay_count, str):
                match = re.search(r'\d+', task.delay_count)
                if match:
                    task_delay += int(match.group())
        attendances = tbl_attendances.objects.filter(date__range=[from_date, to_date],machine_id=machine_id).order_by('date')
        breaks = tbl_break.objects.filter(date__range=[from_date, to_date],machine_id=machine_id).order_by('date')
        breaks_data = []
        lunch_start_window = datetime.strptime("12:58", "%H:%M").time()
        lunch_end_window = datetime.strptime("13:58", "%H:%M").time()
        total_month_breaks = 0
        for br in breaks:
            raw_punches = br.punches.split("\n")
            punch_times = [p.strip() for p in raw_punches if p.strip() and p.strip() != "0"]
            punch_count = len(punch_times)
            break_pairs = []
            total_break_minutes = 0
            lunch_break = None
            used_indices = set()
            if punch_count >= 1:
                i = 0
                while i < punch_count:
                    if i in used_indices:
                        i += 1
                        continue
                    start_str = punch_times[i]
                    try:
                        fmt = "%H:%M"
                        start_time = datetime.strptime(start_str, fmt)
                    except:
                        break_pairs.append({"pair": f"{start_str} - (invalid start)","duration": "Invalid time"})
                        used_indices.add(i)
                        i += 1
                        continue
                    matched = False
                    for j in range(i + 1, punch_count):
                        if j in used_indices:
                            continue
                        end_str = punch_times[j]
                        try:
                            end_time = datetime.strptime(end_str, fmt)
                            if start_time < end_time <= start_time + timedelta(hours=1):
                                duration = (end_time - start_time).seconds // 60
                                start_t = start_time.time()
                                end_t = end_time.time()
                                is_lunch = (
                                    lunch_start_window <= start_t <= lunch_end_window or
                                    lunch_start_window <= end_t <= lunch_end_window
                                )
                                if is_lunch and not lunch_break:
                                    lunch_break = {"pair": f"{start_str} - {end_str}","duration": f"{duration} mins"}
                                else:
                                    total_break_minutes += duration
                                    break_pairs.append({"pair": f"{start_str} - {end_str}","duration": f"{duration} mins"})
                                used_indices.update([i, j])
                                matched = True
                                break
                        except:
                            continue
                    if not matched:
                        start_t = start_time.time()
                        is_lunch = lunch_start_window <= start_t <= lunch_end_window
                        if is_lunch and not lunch_break:
                            lunch_break = {"pair": f"{start_str} - (no end)","duration": "Incomplete"}
                        else:
                            break_pairs.append({"pair": f"{start_str} - (no end)","duration": "Incomplete"})
                        used_indices.add(i)
                    i += 1
                total_month_breaks += total_break_minutes
                hours = total_break_minutes // 60
                minutes = total_break_minutes % 60
                total_break_str = f"{hours}h {minutes}m" if hours else f"{minutes}m"
            else:
                break_pairs.append({"pair": "No Breaks","duration": ""})
                punch_count = 0
                total_break_str = "0m"
            formatted_date = br.date.strftime("%d-%m-%Y") if br.date else "N/A"
            breaks_data.append({'date': formatted_date,'punch_count': punch_count,'breaks': break_pairs,'lunch_break': lunch_break,'total_break_duration': total_break_str})
        month_hours = total_month_breaks // 60
        month_minutes = total_month_breaks % 60
        total_month_breaks_str = f"{month_hours}hr {month_minutes}m" if month_hours else f"{month_minutes}minutes"
        full_days = half_days = late_punches = early_punches = 0.0
        sunday_attendances = leave_days = rejected_double_leave_days = rejected_double_half_days = overtime_minutes = 0.0
        unique_dates = set()
        attendance_data = []
        prev_attendance = next_attendance = None
        leave_map = {}
        leave_type_map = {}
        exception_leave_dates = set()
        leave_apps = tbl_leave_appli.objects.filter(emp_id=user_id,app_start_date__lte=to_date,app_end_date__gte=from_date)
        holiday_qs = tbl_holiday.objects.filter(start_date__lte=to_date,to_date__gte=from_date)
        holiday_dates = set()
        for holiday in holiday_qs:
            current = holiday.start_date
            while current <= holiday.to_date:
                holiday_dates.add(current.strftime("%Y-%m-%d"))
                current += timedelta(days=1)
        holiday_count = len(holiday_dates)
        for leave in leave_apps:
            current = leave.app_start_date.date()
            while current <= leave.app_end_date.date():
                date_str = current.strftime("%Y-%m-%d")
                if leave.leave_type == "Exception" and leave.status == "Approved":
                    exception_leave_dates.add(date_str)
                else:
                    leave_map[date_str] = leave.status
                    leave_type_map[date_str] = leave.leave_type
                current += timedelta(days=1)
        total_month_work_minutes = 0
        if isinstance(from_date, str):
            from_date_dt = datetime.strptime(from_date, "%Y-%m-%d")
        else:
            from_date_dt = from_date
        if isinstance(to_date, str):
            to_date_dt = datetime.strptime(to_date, "%Y-%m-%d")
        else:
            to_date_dt = to_date
        second_fourth_saturdays = get_second_and_fourth_saturdays(from_date_dt, to_date_dt)
        for i, attendance in enumerate(attendances):
            attendance_date_str = attendance.date.strftime("%Y-%m-%d")
            if attendance_date_str in holiday_dates:
                attendance_data.append({'date': datetime.strptime(attendance_date_str, "%Y-%m-%d").strftime("%d-%m-%Y"),'punch_in': attendance.punch_in,'punch_out': attendance.punch_out,'worked_hours': "Holiday"})
                continue
            if attendance_date_str in exception_leave_dates:
                prev_attendance = attendance
                continue
            punch_in_time = None
            punch_out_time = None
            worked_duration = ""
            if attendance.punch_in and attendance.punch_out and attendance.punch_in != '0' and attendance.punch_out != '0':
                try:
                    punch_in_time = datetime.strptime(attendance.punch_in, "%H:%M")
                    punch_out_time = datetime.strptime(attendance.punch_out, "%H:%M")
                    worked_minutes = (punch_out_time - punch_in_time).seconds // 60
                    worked_hours = worked_minutes // 60
                    worked_remaining_minutes = worked_minutes % 60
                    worked_duration = f"{worked_hours}h {worked_remaining_minutes}m"
                    total_month_work_minutes += worked_minutes 
                except ValueError:
                    worked_duration = "Invalid time"
            elif (attendance.punch_in and attendance.punch_in != '0') or (attendance.punch_out and attendance.punch_out != '0'):
                worked_duration = "Incomplete"
            else:
                worked_duration = "Absent"
            attendance_data.append({'date': datetime.strptime(attendance_date_str, "%Y-%m-%d").strftime("%d-%m-%Y"),'punch_in': attendance.punch_in,'punch_out': attendance.punch_out,'worked_hours': worked_duration})
            next_attendance = attendances[i + 1] if i + 1 < len(attendances) else None
            if attendance.date.weekday() == 6:
                sunday_attendances += 1.0
                if prev_attendance and next_attendance:
                    if all([
                        not prev_attendance.punch_in or prev_attendance.punch_in == '0',
                        not prev_attendance.punch_out or prev_attendance.punch_out == '0',
                        not next_attendance.punch_in or next_attendance.punch_in == '0',
                        not next_attendance.punch_out or next_attendance.punch_out == '0'
                    ]):
                        leave_days += 1.0
                        sunday_attendances -= 1.0
                continue
            leave_status = leave_map.get(attendance_date_str)
            leave_type = leave_type_map.get(attendance_date_str)
            if (attendance.punch_in and attendance.punch_in != '0') or (attendance.punch_out and attendance.punch_out != '0'):
                unique_dates.add(attendance_date_str)
            if leave_status == 'Approved':
                leave_days += 1.0
                prev_attendance = attendance
                continue
            if leave_status == 'Rejected' and leave_type in ['Full Leave', 'Half Leave']:
                if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
                    leave_days += 1.0
                    rejected_double_leave_days += 1.0
                    prev_attendance = attendance
                    continue
                if (not attendance.punch_in or attendance.punch_in == '0') or (not attendance.punch_out or attendance.punch_out == '0'):
                    rejected_double_half_days += 1
                    prev_attendance = attendance
                    continue
            if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
                if attendance_date_str in second_fourth_saturdays:
                    half_days += 1.0 
                else:
                    leave_days += 1.0
                prev_attendance = attendance
                continue
            if not attendance.punch_in or attendance.punch_in == '0':
                half_days += 1.0
                prev_attendance = attendance
                continue
            try:
                punch_in_time = datetime.strptime(attendance.punch_in, "%H:%M")
                punch_out_time = None
                if attendance.punch_out and attendance.punch_out != '0':
                    punch_out_time = datetime.strptime(attendance.punch_out, "%H:%M")
                if not punch_out_time or punch_out_time == 0:
                    half_days += 1.0
                    prev_attendance = attendance
                    continue
                if emp_shift == "09:00 - 18:00":
                    shift_start_time = datetime.strptime("09:00", "%H:%M")
                    shift_end_time = datetime.strptime("18:00", "%H:%M")
                else:
                    shift_start_time = datetime.strptime("10:00", "%H:%M")
                    shift_end_time = datetime.strptime("19:00", "%H:%M")
                if punch_in_time < shift_start_time:
                    overtime_minutes += (shift_start_time - punch_in_time).total_seconds() / 60
                if punch_out_time > shift_end_time:
                    overtime_minutes += (punch_out_time - shift_end_time).total_seconds() / 60
                if attendance_date_str not in second_fourth_saturdays:
                    if punch_in_time > (shift_start_time + timedelta(minutes=15)):
                        late_punches += 1.0
                        half_days += 1.0
                    elif punch_out_time < shift_end_time:
                        early_punches += 1.0
                        half_days += 1.0
                    else:
                        full_days += 1.0
                else:
                    full_days += 1.0  
            except ValueError:
                continue
            prev_attendance = attendance
        month_work_hours = total_month_work_minutes // 60
        month_work_remaining_minutes = total_month_work_minutes % 60
        total_month_work_str = f"{month_work_hours}hr {month_work_remaining_minutes}m" if month_work_hours else f"{month_work_remaining_minutes}minutes"
        pure_worked_minutes = total_month_work_minutes - total_month_breaks
        pure_work_hours = pure_worked_minutes // 60
        pure_work_remaining_minutes = pure_worked_minutes % 60
        pure_month_work_str = f"{pure_work_hours}hr {pure_work_remaining_minutes}m" if pure_work_hours else f"{pure_work_remaining_minutes}minutes"
        total_days_worked = float(len(unique_dates))
        if isinstance(from_date, str):
            from_date_dt = datetime.strptime(from_date, "%Y-%m-%d")
        else:
            from_date_dt = from_date
        if isinstance(to_date, str):
            to_date_dt = datetime.strptime(to_date, "%Y-%m-%d")
        else:
            to_date_dt = to_date
        total_month_days = float((to_date_dt - from_date_dt).days + 1)
        overtime_hours = float(overtime_minutes // 60)
        overtime_remaining_minutes = float(overtime_minutes % 60)
        reports = tbl_daily_report.objects.filter(userId=user_id,reportDate__range=[from_date, to_date])
        half_missing_reports = full_missing_reports = days_half_report = days_full_report = sunday_count = 0
        for report in reports:
            lep_entries = [report.lep1, report.lep2, report.lep3]
            missing_count = lep_entries.count("") + lep_entries.count("0")
            if missing_count == 0:
                days_full_report += 1
            if missing_count >= 1:
                days_half_report += 1
            if missing_count == 1:
                half_missing_reports += 1
            elif missing_count == 2:
                half_missing_reports += 2
            elif missing_count == 3:
                full_missing_reports += 3
        reported_dates = set(report.reportDate.strftime('%Y-%m-%d') for report in reports)
        if isinstance(from_date, str):
            current = datetime.strptime(from_date, "%Y-%m-%d")
        else:
            current = from_date
        if isinstance(to_date, str):
            end = datetime.strptime(to_date, "%Y-%m-%d")
        else:
            end = to_date
        while current <= end:
            if current.weekday() == 6:
                sunday_count += 1
            elif current.strftime('%Y-%m-%d') not in reported_dates:
                full_missing_reports += 1
            current += timedelta(days=1)
        penalty_leaves = float(rejected_double_leave_days)
        penalty_halfs = 0.5 * float(rejected_double_half_days)
        final_leaves = float(leave_days) + float(penalty_leaves) + 0.5 * float(half_days) + float(penalty_halfs)
        paid_days = float(full_days) - (float(penalty_halfs) + float(penalty_leaves)) + len(exception_leave_dates) + holiday_count
        paid_days += float(sunday_attendances)
        paid_days += 0.5 * float(half_days)
        leave_days_ = float(final_leaves) + len(exception_leave_dates) + holiday_count
        if leave_days_:
            if leave_days_ == 0.5:
                paid_days += 0.5
            elif leave_days_ == 1:
                paid_days += 1
            elif leave_days_ >= 1.5:
                paid_days += 1.5
        if isinstance(from_date, str):
            from_date = datetime.strptime(from_date, "%d-%m-%Y").date()
        previous_month_date = from_date + relativedelta(months=1)
        latest_salary = tbl_salary_history.objects.filter(
            emp_id=emp.emp_id,
            increment_date__lte=previous_month_date
        ).order_by('-increment_date').first()
        emp_salary = float(latest_salary.salary or 0.0) if latest_salary else 0.0
        per_day_salary = emp_salary / total_month_days if total_month_days else 0.0
        amount = round(per_day_salary * paid_days, 2)
        advance_salary = tbl_adv_salary.objects.filter(emp_id=emp.emp_id, salary_date__range=(from_date, to_date))
        adv_amount = sum(adv.adv_salary for adv in advance_salary)
        leaves_list = []
        for leave in leave_apps.values('leave_type', 'app_start_date', 'app_end_date', 'reason', 'status'):
            leave['app_start_date'] = leave['app_start_date'].strftime('%d-%m-%Y')
            leave['app_end_date'] = leave['app_end_date'].strftime('%d-%m-%Y')
            leaves_list.append(leave)
        task_list = [
            {**task,'assign_date': task['assign_date'].strftime('%d-%m-%Y') if task['assign_date'] else None, 'complete_date': task['complete_date'].strftime('%d-%m-%Y') if task['complete_date'] else None}
            for task in tasks.values('task_type','assign_date','complete_date','task_name','status','description','delay_count')
        ]
        exception_leaves_count = len(exception_leave_dates)
        after_deductions =  amount - adv_amount - 200

        if after_deductions < 0:
            after_deductions = 0

        required_working_minutes = (paid_days - 1.5) * 450
        required_working_hours = required_working_minutes / 60

        # 'emp_salary': emp_salary,
        # 'emp_id': emp.emp_id,
        # 'full_name': full_name,
        # 'company_name': company_name,
        # 'company_address': company_address,
        # 'exception_leaves': exception_leaves_count,
        # 'breaks': breaks_data,
        # 'm_total_break_str': total_month_breaks_str,
        # 'total_month_worked_hours': total_month_work_str,
        # 'pure_month_work_str': pure_month_work_str,
        # 'holiday_count': holiday_count,
        # 'final_leaves': final_leaves,
        # 'paid_days': paid_days,
        # 'amount': amount,
        # 'adv_amount': adv_amount,
        # 'tax': 200,
        # 'emp_salary': emp_salary,
        # 'after_deductions': amount - adv_amount - 200,
        # 'leaves_data': leaves_list,
        # 'attendances': attendance_data,
        # 'total_days_worked': total_days_worked,
        # 'total_month_days': total_month_days,
        # 'full_days': full_days,
        # 'half_days': half_days,
        # 'late_punches': late_punches,
        # 'early_punches': early_punches,
        # 'sunday_attendances': sunday_attendances,
        # 'leave_days': leave_days,
        # 'rejected_double_leave_days': rejected_double_leave_days,
        # 'rejected_double_half_days': rejected_double_half_days,
        # 'overtime_hours': overtime_hours,
        # 'overtime_remaining_minutes': overtime_remaining_minutes,
        # 'total_task': total_task,
        # 'complete_task': complete_task,
        # 'pending_task': pending_task,
        # 'revised_task': revised_task,
        # 'task_delay': task_delay,
        # 'half_missing_reports': half_missing_reports,
        # 'full_missing_reports': full_missing_reports,
        # 'days_half_report': days_half_report,
        # 'days_full_report': days_full_report,
        # 'sunday_count': sunday_count,

        # difference = required_working_hours - pure_month_work_str
        ws.append([
            counter,
            # emp.employee_id_custom,
            f"{emp.name} {emp.middle_name or ''} {emp.last_name or ''}".strip(),
            paid_days,
            final_leaves,
            emp_salary,
            adv_amount,
            tax,
            after_deductions,
            task_delay,
            required_working_hours,
            pure_month_work_str,
        ])

        tbl_made_salary.objects.create(
            emp_id = emp.emp_id,
            month = month_identifier,
            salary = after_deductions,
            add_by_id=request.session.get('session_id'),
            add_by_name=request.session.get('session_user'),
        )

        counter += 1

    for col_idx, column_cells in enumerate(ws.columns, start=1):
        max_length = 0
        for cell in column_cells:
            if cell.value:
                max_length = max(max_length, len(str(cell.value)))
        ws.column_dimensions[get_column_letter(col_idx)].width = max_length + 2

    excel_stream = BytesIO()
    wb.save(excel_stream)
    excel_stream.seek(0)

    clean_filename = f"Monthly_Report_{month_identifier.replace(' ', '_')}.xlsx"
    full_path = f"monthly_reports/{clean_filename}"
    report_file = ContentFile(excel_stream.read())
    file_path = default_storage.save(full_path, report_file)

    tbl_monthly_report.objects.create(
        month=month_identifier,
        report_path=file_path,
        add_by_id=request.session.get('session_id'),
        add_by_name=request.session.get('session_user'),
    )

    download_url = reverse('download_report_file', kwargs={'filename': clean_filename})
    return JsonResponse({
        'success': True,
        'message': 'Report generated successfully.',
        'download_url': download_url
    })

def download_report_file(request, filename):
    file_path = os.path.join('monthly_reports', filename)
    if not default_storage.exists(file_path):
        return HttpResponseNotFound("File not found")

    with default_storage.open(file_path, 'rb') as f:
        response = HttpResponse(
            f.read(),
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        return response

# def delete_monthly_report(request, report_id):
#     if 'session_id' not in request.session:
#         return JsonResponse({"success": False, "error": "Unauthorized"}, status=401)

#     if request.method == 'POST':
#         try:
#             report = tbl_monthly_report.objects.get(id=report_id)
#             report.report_path.delete(save=False)  # Delete file from storage
#             report.delete()  # Delete DB record
#             return JsonResponse({"success": True})
#         except tbl_monthly_report.DoesNotExist:
#             return JsonResponse({"success": False, "error": "Report not found"}, status=404)
#     return JsonResponse({"success": False, "error": "Invalid request method"}, status=405)


def delete_monthly_report(request, report_id):
    if 'session_id' not in request.session:
        return JsonResponse({"success": False, "error": "Unauthorized"}, status=401)

    if request.method == 'POST':
        try:
            with transaction.atomic():  # Ensures atomic deletion
                report = tbl_monthly_report.objects.get(id=report_id)
                report_month = report.month

                # Delete file from storage
                if report.report_path:
                    report.report_path.delete(save=False)

                # Delete the report record
                report.delete()

                # Delete related tbl_made_salary entries for the same month
                tbl_made_salary.objects.filter(month=report_month).delete()

            return JsonResponse({"success": True})

        except tbl_monthly_report.DoesNotExist:
            return JsonResponse({"success": False, "error": "Report not found"}, status=404)

    return JsonResponse({"success": False, "error": "Invalid request method"}, status=405)

def advance_salary(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        data = tbl_adv_salary.objects.all()
        emp_data = tbl_employee.objects.all()
        
        user_dict = {status.emp_id: status.name for status in tbl_employee.objects.all()}
        
        # Get the GET parameters
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        emp_id = request.GET.get('emp_id')
        adv_salary = request.GET.get('adv_salary')
        # salary_date = request.GET.get('salary_date')
        
        query = Q()  # Start with an empty query
        
        # Apply date filters
        if from_date or to_date:
            try:
                # Handle from_date filter
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.min  # Set default to the earliest date
                    
                # Handle to_date filter
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = datetime.max  # Set default to the latest date
                
                # Ensure that from_date is not after to_date
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
                
                # Apply the date range filter
                query &= Q(salary_date__range=[from_date, to_date])
            
            except ValueError:
                pass  # Handle invalid date format gracefully
            
        # Apply employee filter
        if emp_id:
            query &= Q(emp_id__icontains=emp_id)
        
        # Apply advance salary filter
        if adv_salary:
            query &= Q(adv_salary__icontains=adv_salary)
            
        # if salary_date:
        #     query &= Q(salary_date__icontains=salary_date)
        
        # Filter the data based on the query
        data = data.filter(query).order_by('-s_id')
        
        # Add employee names to the data
        for job_obj in data:
            job_obj.name = user_dict.get(job_obj.emp_id, "Unknown Name")
        
        # Render the filtered data to the template
        return render(request, "advance_salary.html", {
            'emp_data': emp_data,
            'data': data,
            'session_roleid': session_roleid
        })
    else:
        return redirect(login)
        
def add_salary(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        emp_data = tbl_employee.objects.all()
        
        if request.method == 'POST':
            emp_id = request.POST.get('emp_id')
            adv_salary = request.POST.get('adv_salary')
            salary_date = request.POST.get('salary_date')
            remark = request.POST.get('remark')
            
            new = tbl_adv_salary(
                emp_id = emp_id,
                adv_salary = adv_salary,
                salary_date = salary_date,
                remark = remark,
                company_id = request.session['company_id'],
                add_by_id = request.session['session_id'],
                add_by_name = request.session['session_user']
            ).save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add Advance Salary",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            return JsonResponse({'status': 'success', 'message': f'Advance Salary added successfully!'})
            
        return render(request,"add_salary.html",{'emp_data':emp_data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def edit_salary(request,s_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        emp_data = tbl_employee.objects.all()
        
        salary = get_object_or_404(tbl_adv_salary, s_id=s_id)
    
        if request.method == 'POST':
            salary.emp_id = request.POST.get('emp_id')
            salary.adv_salary = request.POST.get('adv_salary')
            salary.salary_date = request.POST.get('salary_date')
            salary.remark = request.POST.get('remark')
            
            salary.save()
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit Advance Salary",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            return JsonResponse({
                'status': 'success',
                'message': f'Advance Salary has been successfully updated!'
            })

        return render(request, "add_salary.html", {'emp_data':emp_data,'salary':salary,'is_edit':True,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def delete_salary(request,s_id):
    if 'session_id' in request.session:
        data = get_object_or_404(tbl_adv_salary, s_id=s_id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete Advance Salary",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        data.delete()
        
        return JsonResponse({'success': True})

    return redirect(login) 
        
def plan(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        data = tbl_plan.objects.all()
        
        date_range_filter = request.GET.get('fromDate')
        # to_date = request.GET.get('toDate')
        plan = request.GET.get('plan')
        title = request.GET.get('title')
        price = request.GET.get('price')
        duration = request.GET.get('duration')
        type = request.GET.get('type')
        plan_duration = request.GET.get('plan_duration')
        feature = request.GET.get('feature')
        
        if date_range_filter:
            try:
                start_str, end_str = date_range_filter.split(' - ')
                start_date = parser.parse(start_str.strip())
                end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                data = data.filter(create_time__gte=start_date, create_time__lte=end_date)
            except Exception as e:
                print(f"Date parsing error: {e}")
                
        if plan:
            data = data.filter(plan__icontains=plan)
        if title:
            data = data.filter(title__icontains=title)
        if price:
            data = data.filter(price__icontains=price)
        if duration:
            data = data.filter(duration__icontains=duration)
        if type:
            data = data.filter(type__icontains=type)
        if plan_duration:
            data = data.filter(plan_duration__icontains=plan_duration)
        if feature:
            data = data.filter(feature__icontains=feature)
        
        # query = Q()
            
        # if from_date or to_date:
        #     try:
        #         if from_date:
        #             from_date = datetime.strptime(from_date, '%Y-%m-%d')
        #         else:
        #             from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
        #         if to_date:
        #             to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
        #         else:
        #             to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
        #         if from_date > to_date:
        #             from_date, to_date = to_date, from_date
                    
        #         query &= Q(create_time__range=[from_date, to_date])
                
        #     except ValueError:
        #         pass
            
        # if plan:
        #     query |= Q(plan__icontains=plan)
        # if title:
        #     query |= Q(title__icontains=title)
        # if price:
        #     query |= Q(price__icontains=price)
        # if duration:
        #     query |= Q(duration__icontains=duration)
        # if type:
        #     query |= Q(type__icontains=type)
        # if plan_duration:
        #     query |= Q(plan_duration__icontains=plan_duration)
        # if feature:
        #     query |= Q(feature__icontains=feature)
            
        # data = data.filter(query)
        data = data.order_by('-id')
        
        return render(request,"plan.html",{'data':data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def add_plan(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            plan = request.POST.get('plan')
            title = request.POST.get('title')
            price = request.POST.get('price')
            duration = request.POST.get('duration')
            type = request.POST.get('type')
            plan_duration = request.POST.get('plan_duration')
            feature_data = request.POST.get('feature_data')
            
            new = tbl_plan(
                plan=plan,
                title=title,
                price=price,
                duration=duration,
                type=type,
                plan_duration=plan_duration,
                feature=feature_data,
            ).save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add Puresaas Plan - {title}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            return JsonResponse({'status': 'success', 'message': f'Plan {title} added successfully!'})
            
        return render(request,"add_plan.html",{'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def edit_plan(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        plans = get_object_or_404(tbl_plan, id=id)
    
        if request.method == 'POST':
            plans.plan = request.POST.get('plan')
            plans.title = request.POST.get('title')
            plans.price = request.POST.get('price')
            plans.duration = request.POST.get('duration')
            plans.type = request.POST.get('type')
            plans.plan_duration = request.POST.get('plan_duration')
            plans.feature = request.POST.get('feature_data') 
            
            plans.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Edit Puresaas Plan - {plans.title}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            return JsonResponse({
                'status': 'success',
                'message': f'Plan {plans.title} has been successfully updated!'
            })

        return render(request, "add_plan.html", {'plans':plans,'is_edit':True,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def delete_plan(request,id):
    if 'session_id' in request.session:
        data = get_object_or_404(tbl_plan, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete Puresaas Plan - {data.title}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        data.delete()
        
        return JsonResponse({'success': True, 'title': data.title})

    return redirect(login) 
    
def view_plan(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        plan = get_object_or_404(tbl_plan, id=id)
        return render(request, 'view_plan.html', {'plan': plan,'session_roleid':session_roleid}) 
    else:
        return redirect(login)
        
def plan_view(request):
    try:
        data = tbl_plan.objects.filter(plan_duration="Yearly")
        
        data_list = [
            {
                'id' : tbl_plan.id,
                'plan' : tbl_plan.plan,
                'title' : tbl_plan.title,
                'price' : tbl_plan.price,
                'duration' : tbl_plan.duration,
                'plan_duration' : tbl_plan.plan_duration,
                'type' : tbl_plan.type,
                'feature' : tbl_plan.feature,
                'status' : tbl_plan.status,
                'created_time' : tbl_plan.created_time,
                'add_by_id' : tbl_plan.add_by_id,
            }
            for tbl_plan in data
        ]
        return JsonResponse({'data':data_list},safe=False)
    except Exception as e:
        return JsonResponse({'error':str(e)},status=500)
        
def monthly_plan_view(request):
    try:
        data = tbl_plan.objects.filter(plan_duration="Monthly")
        
        data_list = [
            {
                'id' : tbl_plan.id,
                'plan' : tbl_plan.plan,
                'title' : tbl_plan.title,
                'price' : tbl_plan.price,
                'duration' : tbl_plan.duration,
                'plan_duration' : tbl_plan.plan_duration,
                'type' : tbl_plan.type,
                'feature' : tbl_plan.feature,
                'status' : tbl_plan.status,
                'created_time' : tbl_plan.created_time,
                'add_by_id' : tbl_plan.add_by_id,
            }
            for tbl_plan in data
        ]
        return JsonResponse({'data':data_list},safe=False)
    except Exception as e:
        return JsonResponse({'error':str(e)},status=500)
        
def free_trial(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM all_demo WHERE demo_status = 'Trial'")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        email = request.GET.get('email')
        contact_number = request.GET.get('contact_number')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
            except ValueError:
                pass
        
        if from_date or to_date:
            data = [item for item in data if from_date <= item['created_date'] <= to_date]
        
        if name:
            data = [item for item in data if name.lower() in item['name'].lower()]
        if email:
            data = [item for item in data if email.lower() in item['email'].lower()]
        if contact_number:
            data = [item for item in data if contact_number in item['contact_number']]
        
        data = sorted(data, key=lambda x: x['id'], reverse=True)
        
        return render(request, "free_trial.html", {'data': data, 'session_roleid': session_roleid})
    else:
        return redirect('login') 
        
def freetrial(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("DELETE FROM all_demo WHERE id = %s", (id,))
        cnx.commit()
        
        cursor.execute("SELECT * FROM all_demo")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        return JsonResponse({'success': True, 'id': id, 'message': "Data deleted successfully."})
    else:
        return redirect(login)   
        
def request_call(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM all_demo WHERE demo_status = 'Callback'")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        email = request.GET.get('email')
        contact_number = request.GET.get('contact_number')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
            except ValueError:
                pass
        
        if from_date or to_date:
            data = [item for item in data if from_date <= item['created_date'] <= to_date]
        
        if name:
            data = [item for item in data if name.lower() in item['name'].lower()]
        if email:
            data = [item for item in data if email.lower() in item['email'].lower()]
        if contact_number:
            data = [item for item in data if contact_number in item['contact_number']]
        
        data = sorted(data, key=lambda x: x['id'], reverse=True)
        
        return render(request, "request_call.html", {'data': data, 'session_roleid': session_roleid})
    else:
        return redirect('login')
        
def requestcall(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("DELETE FROM all_demo WHERE id = %s", (id,))
        cnx.commit()
        
        cursor.execute("SELECT * FROM all_demo")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        return JsonResponse({'success': True, 'id': id, 'message': "Data deleted successfully."})
    else:
        return redirect(login)   
        
def view_call(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)

        cursor.execute("SELECT * FROM all_demo WHERE id = %s", (id,))
        data = cursor.fetchone()
        
        cursor.close()
        cnx.close()

        if data:
            return render(request, "view_call.html", {'data': data, 'session_roleid': session_roleid})
        else:
            return redirect(reverse('some_error_page')) 
    else:
        return redirect('login')

        
def price_quote(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM all_demo WHERE demo_status = 'Quote'")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        email = request.GET.get('email')
        contact_number = request.GET.get('contact_number')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
            except ValueError:
                pass
        
        if from_date or to_date:
            data = [item for item in data if from_date <= item['created_date'] <= to_date]
        
        if name:
            data = [item for item in data if name.lower() in item['name'].lower()]
        if email:
            data = [item for item in data if email.lower() in item['email'].lower()]
        if contact_number:
            data = [item for item in data if contact_number in item['contact_number']]
        
        data = sorted(data, key=lambda x: x['id'], reverse=True)
        
        return render(request, "price_quote.html", {'data': data, 'session_roleid': session_roleid})
    else:
        return redirect('login')
        
def pricequote(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("DELETE FROM all_demo WHERE id = %s", (id,))
        cnx.commit()
        
        cursor.execute("SELECT * FROM all_demo")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        return JsonResponse({'success': True, 'id': id, 'message': "Data deleted successfully."})
    else:
        return redirect(login)
        
def view_quote(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)

        cursor.execute("SELECT * FROM all_demo WHERE id = %s", (id,))
        data = cursor.fetchone()
        
        cursor.close()
        cnx.close()

        if data:
            return render(request, "view_quote.html", {'data': data, 'session_roleid': session_roleid})
        else:
            return redirect(reverse('some_error_page')) 
    else:
        return redirect('login')
        
def book_demo(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM book_demo ")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        email = request.GET.get('email')
        number = request.GET.get('number')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
            except ValueError:
                pass
        
        if from_date or to_date:
            data = [item for item in data if from_date <= item['created_date'] <= to_date]
        
        if name:
            data = [item for item in data if name.lower() in item['name'].lower()]
        if email:
            data = [item for item in data if email.lower() in item['email'].lower()]
        if number:
            data = [item for item in data if number in item['number']]
        
        data = sorted(data, key=lambda x: x['id'], reverse=True)
        
        return render(request, "book_demo.html", {'data': data, 'session_roleid': session_roleid})
    else:
        return redirect('login')
        
def bookdemo(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("DELETE FROM book_demo WHERE id = %s", (id,))
        cnx.commit()
        
        cursor.execute("SELECT * FROM book_demo")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        return JsonResponse({'success': True, 'id': id, 'message': "Data deleted successfully."})
    else:
        return redirect(login)
        
def ask_question(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM ask_question")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        email = request.GET.get('email')
        message = request.GET.get('message')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
            except ValueError:
                pass
        
        if from_date or to_date:
            data = [item for item in data if from_date <= item['created_date'] <= to_date]
        
        if name:
            data = [item for item in data if name.lower() in item['name'].lower()]
        if email:
            data = [item for item in data if email.lower() in item['email'].lower()]
        if message:
            data = [item for item in data if message in item['message']]
        
        data = sorted(data, key=lambda x: x['id'], reverse=True)
        
        return render(request, "ask_question.html", {'data': data, 'session_roleid': session_roleid})
    else:
        return redirect('login')
        
def askquestion(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("DELETE FROM ask_question WHERE id = %s", (id,))
        cnx.commit()
        
        cursor.execute("SELECT * FROM ask_question")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        return JsonResponse({'success': True, 'id': id, 'message': "Data deleted successfully."})
    else:
        return redirect(login)
        
        
def blogs_comment(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM blog_comment ")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        email = request.GET.get('email')
        message = request.GET.get('message')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
            except ValueError:
                pass
        
        if from_date or to_date:
            data = [item for item in data if from_date <= item['created_date'] <= to_date]
        
        if name:
            data = [item for item in data if name.lower() in item['name'].lower()]
        if email:
            data = [item for item in data if email.lower() in item['email'].lower()]
        if message:
            data = [item for item in data if message in item['message']]
        
        data = sorted(data, key=lambda x: x['id'], reverse=True)
        
        return render(request, "blogs_comment.html", {'data': data, 'session_roleid': session_roleid})
    else:
        return redirect('login')
        
def blogscomment(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("DELETE FROM blog_comment WHERE id = %s", (id,))
        cnx.commit()
        
        cursor.execute("SELECT * FROM blog_comment")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        return JsonResponse({'success': True, 'id': id, 'message': "Data deleted successfully."})
    else:
        return redirect(login)
        
def message(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM inq_message ")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        name = request.GET.get('name')
        email = request.GET.get('email')
        subject = request.GET.get('subject')
        message = request.GET.get('message')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
            except ValueError:
                pass
        
        if from_date or to_date:
            data = [item for item in data if from_date <= item['created_date'] <= to_date]
        
        if name:
            data = [item for item in data if name.lower() in item['name'].lower()]
        if email:
            data = [item for item in data if email.lower() in item['email'].lower()]
        if subject:
            data = [item for item in data if subject in item['subject']]
        if message:
            data = [item for item in data if message in item['message']]
        
        data = sorted(data, key=lambda x: x['id'], reverse=True)
        
        return render(request, "message.html", {'data': data, 'session_roleid': session_roleid})
    else:
        return redirect('login')
        
def del_message(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("DELETE FROM inq_message WHERE id = %s", (id,))
        cnx.commit()
        
        cursor.execute("SELECT * FROM inq_message")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        return JsonResponse({'success': True, 'id': id, 'message': "Data deleted successfully."})
    else:
        return redirect(login)
        
def all_demo(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM all_inquiry ")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        from_date = request.GET.get('fromDate')
        to_date = request.GET.get('toDate')
        types = request.GET.get('types')
        name = request.GET.get('name')
        number = request.GET.get('number')
        email = request.GET.get('email')
        company_name = request.GET.get('company_name')
        no_emp = request.GET.get('no_emp')
        city = request.GET.get('city')
        state = request.GET.get('state')
        zipcode = request.GET.get('zipcode')
        
        query = Q()
            
        if from_date or to_date:
            try:
                if from_date:
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                else:
                    from_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)
                    
                if to_date:
                    to_date = datetime.strptime(to_date, '%Y-%m-%d').replace(hour=23, minute=59, second=59, microsecond=999999)
                else:
                    to_date = from_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                if from_date > to_date:
                    from_date, to_date = to_date, from_date
            except ValueError:
                pass
        
        if from_date or to_date:
            data = [item for item in data if from_date <= item['created_date'] <= to_date]
            
        if types:
            data = [item for item in data if types.lower() in item['types'].lower()]
        if name:
            data = [item for item in data if name.lower() in item['name'].lower()]
        if number:
            data = [item for item in data if number.lower() in item['number'].lower()]
        if email:
            data = [item for item in data if email.lower() in item['email'].lower()]
        if company_name:
            data = [item for item in data if company_name.lower() in item['company_name'].lower()]
        if no_emp:
            data = [item for item in data if no_emp.lower() in item['no_emp'].lower()]
        if city:
            data = [item for item in data if city.lower() in item['city'].lower()]
        if state:
            data = [item for item in data if state.lower() in item['state'].lower()]
        if zipcode:
            data = [item for item in data if zipcode in item['zipcode']]
        
        data = sorted(data, key=lambda x: x['id'], reverse=True)
        
        return render(request, "all_demo.html", {'data': data, 'session_roleid': session_roleid})
    else:
        return redirect('login') 
        
def del_all_demo(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("DELETE FROM all_inquiry WHERE id = %s", (id,))
        cnx.commit()
        
        cursor.execute("SELECT * FROM all_inquiry")
        data = cursor.fetchall()
        
        cursor.close()
        cnx.close()
        
        return JsonResponse({'success': True, 'id': id, 'message': "Data deleted successfully."})
    else:
        return redirect(login)
        
def view_demo(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)

        cursor.execute("SELECT * FROM all_inquiry WHERE id = %s", (id,)) 
        data = cursor.fetchone()
        
        cursor.close()
        cnx.close()

        if data:
            return render(request, "view_demo.html", {'data': data, 'session_roleid': session_roleid})
        else:
            return redirect(reverse('some_error_page')) 
    else:
        return redirect('login')
        
def demo_convert_lead(request, id):
    if 'session_id' not in request.session:
        return redirect('login')

    # Connect to the MySQL DB and fetch the inquiry by ID
    cnx = mysql.connector.connect(
        user='shubhamsingh_app_tracking_system',
        password='kish@1102',
        host='localhost',
        database='shubhamsingh_app_tracking_system'
    )
    cursor = cnx.cursor(dictionary=True)
    
    cursor.execute("SELECT * FROM all_inquiry WHERE id = %s", (id,))
    inquiry = cursor.fetchone()
    
    if not inquiry:
        cursor.close()
        cnx.close()
        return redirect('all_demo')  # or show error
    
    # Map inquiry data to tbl_lead model
    lead = tbl_lead(
        c_name=inquiry.get('name'),
        mobile=inquiry.get('number'),
        email=inquiry.get('email'),
        business_name=inquiry.get('company_name'),
        city=inquiry.get('city'),
        state=inquiry.get('state'),
        pincode=inquiry.get('zipcode'),
        source='Puresaas',
        segment=inquiry.get('types'),
        create_time=timezone.now() + timedelta(hours=5, minutes=30),
        add_by_id=request.session.get('session_id'),
        add_by_name=request.session.get('session_user'),
    )
    
    lead.save()

    cursor.execute("DELETE FROM all_inquiry WHERE id = %s", (id,))
    cnx.commit()

    cursor.close()
    cnx.close()
    
    messages.success(request, 'Lead has been successfully converted!')

    return redirect('all_demo')
    
def book_bulk_convert(request):
    if request.method == 'POST':
        ids = request.POST.getlist('selected_leads')
        if not ids:
            messages.error(request, 'No inquiries selected.')
            return redirect('all_demo')

        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)

        for lead_id in ids:
            cursor.execute("SELECT * FROM all_inquiry WHERE id = %s", (lead_id,))
            inquiry = cursor.fetchone()

            if inquiry:
                lead = tbl_lead(
                    c_name=inquiry.get('name'),
                    mobile=inquiry.get('number'),
                    email=inquiry.get('email'),
                    business_name=inquiry.get('company_name'),
                    city=inquiry.get('city'),
                    state=inquiry.get('state'),
                    pincode=inquiry.get('zipcode'),
                    source='Puresaas',
                    segment=inquiry.get('types'),
                    create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    add_by_id=request.session.get('session_id'),
                    add_by_name=request.session.get('session_user'),
                )
                lead.save()

                # Delete original inquiry
                cursor.execute("DELETE FROM all_inquiry WHERE id = %s", (lead_id,))
        
        cnx.commit()
        cursor.close()
        cnx.close()

        messages.success(request, 'Selected inquiries have been successfully converted into leads.')
        return redirect('all_demo')
    else:
        return redirect('all_demo')   
        
def puresaas_list(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        # Connect to MySQL to get users
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        cursor.execute("SELECT * FROM tbl_users")
        puresaas_data = cursor.fetchall()

        # Extract user IDs from users
        user_ids = [user['userId'] for user in puresaas_data]

        # Fetch related orders using Django ORM
        orders = tbl_order.objects.filter(user_id__in=user_ids)
        orders_by_user = {}
        for order in orders:
            orders_by_user.setdefault(order.user_id, []).append(order)

        # Fetch plan data from tbl_plan
        plan_ids = [order.plan_id for order in orders]
        plans = tbl_plan.objects.filter(id__in=plan_ids)

        # Create a dictionary of plan data for quick lookup
        plan_dict = {plan.id: plan for plan in plans}

        # Merge user data with their orders and plans
        merged_data = []
        for user in puresaas_data:
            user_orders = orders_by_user.get(user['userId'], [])
            for order in user_orders:
                plan_details = plan_dict.get(order.plan_id)  # Get the plan for this order
                merged_data.append({
                    'user': user,
                    'order': order,
                    'plan': plan_details  # Add plan details
                })

        # Close database connection
        cursor.close()
        cnx.close()

        return render(request, "puresaas-list.html", {
            'merged_data': merged_data,
            'session_roleid': session_roleid
        })
    else:
        return redirect('login')

 
        
def puresaas_renewal(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        today = timezone.now().date()
        puresaas_data = tbl_order.objects.filter(end_date__date=today)
        
        plan_ids = puresaas_data.values_list('plan_id', flat=True)
        plans = tbl_plan.objects.filter(id__in=plan_ids)
        
        plan_dict = {plan.id: plan for plan in plans}
        
        for order in puresaas_data:
            order.plan_details = plan_dict.get(order.plan_id)
            
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        cursor.execute("SELECT * FROM tbl_users")
        users_data = cursor.fetchall()

        cursor.close()
        cnx.close()

        merged_data = []

        user_dict = {user['userId']: user for user in users_data}

        for order in puresaas_data:
            user = user_dict.get(order.user_id)
            if user:
                merged_data.append({
                    'order': order,
                    'user': user
                })
        
        return render(request, "puresaas-renewal.html", {
            'puresaas_data': merged_data,
            'session_roleid': session_roleid
        })
    else:
        return redirect('login')
        
def puresaas_renewal_week(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        today = timezone.now().date()
        seven_days_later = today + timedelta(days=7)
        puresaas_data = tbl_order.objects.filter(end_date__date__gte=today, end_date__date__lte=seven_days_later)
        
        plan_ids = puresaas_data.values_list('plan_id', flat=True)
        plans = tbl_plan.objects.filter(id__in=plan_ids)
        
        plan_dict = {plan.id: plan for plan in plans}
        
        for order in puresaas_data:
            order.plan_details = plan_dict.get(order.plan_id)
            
        cnx = mysql.connector.connect(
            user='shubhamsingh_app_tracking_system',
            password='kish@1102',
            host='localhost',
            database='shubhamsingh_app_tracking_system'
        )
        cursor = cnx.cursor(dictionary=True)
        cursor.execute("SELECT * FROM tbl_users")
        users_data = cursor.fetchall()

        cursor.close()
        cnx.close()

        merged_data = []

        user_dict = {user['userId']: user for user in users_data}

        for order in puresaas_data:
            user = user_dict.get(order.user_id)
            if user:
                merged_data.append({
                    'order': order,
                    'user': user
                })
        
        return render(request, "puresaas-renewal.html", {
            'puresaas_data': merged_data,
            'session_roleid': session_roleid
        })
    else:
        return redirect('login')

def puresaas_view(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='puresaas_db',
            password='kish@1102',
            host='localhost',
            database='puresaas_db'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM tbl_jewellers WHERE id = %s", (id,))
        jeweller_data = cursor.fetchone()

        cursor.close()
        cnx.close()
        
        return render(request,"puresaas-view.html",{'jeweller_data':jeweller_data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def pure_view(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        cnx = mysql.connector.connect(
            user='puresaas_db',
            password='kish@1102',
            host='localhost',
            database='puresaas_db'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM tbl_jewellers WHERE id = %s", (id,))
        jeweller_data = cursor.fetchone()

        cursor.close()
        cnx.close()
        
        return render(request,"pure-view.html",{'jeweller_data':jeweller_data,'session_roleid':session_roleid})
    else:
        return redirect(login)
        
def puresaas_client(request,id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        session_id = request.session.get('session_id')
        
        cnx = mysql.connector.connect(
            user='puresaas_db',
            password='kish@1102',
            host='localhost',
            database='puresaas_db'
        )
        cursor = cnx.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM tbl_jewellers WHERE id = %s", (id,))
        puresaas_data = cursor.fetchall()
        
        for jeweller in puresaas_data:
            master_client_data = {
                'add_by_id': session_id,
                'name': jeweller.get('full_name'),
                'email': jeweller.get('email'),
                'comp_name': jeweller.get('firm_name'),
                'mobile': jeweller.get('mobile'),
                'address': jeweller.get('home_address1'),
                'client_type': 'Puresaas', 
                'billing_add': jeweller.get('bill_address1'),
                'area': jeweller.get('home_city'),
                'city': jeweller.get('home_city'),
                'state': jeweller.get('home_state'),
                'country': jeweller.get('home_country'),
                'gst_number': jeweller.get('gst_no'),
                'service_type': jeweller.get('package'), 
                'Plan': jeweller.get('package'),
                'remark': jeweller.get('purchase'), 
                'p_s_date': jeweller.get('plan_s_date'),
                'p_e_date': jeweller.get('plan_e_date'),
                'start_date': jeweller.get('plan_s_date'),
                'expire_date': jeweller.get('plan_e_date'),
                'create_time': timezone.now() + timedelta(hours=5, minutes=30),
            }
            
            master_client.objects.create(**master_client_data)
            
            cursor.execute("UPDATE tbl_jewellers SET crm_add_client = 'Client Added' WHERE id = %s", (id,))
            cnx.commit()
            
        cursor.close()
        cnx.close()
        
        return redirect('puresaas_list')
    else:
        return redirect(login)

@api_view(['POST'])
def sit_career(request):
    try:
        if request.method == 'POST': 
            from_filling = request.data.get('from_filling', "")
            full_name = request.data.get('full_name')
            email = request.data.get('email')
            mobile = request.data.get('mobile')
            qualification = request.data.get('qualification')
            applying_for = request.data.get('applying_for') 
            preferred_technology = request.data.get('preferred_technology')
            clg_name = request.data.get('clg_name')
            internship_duration = request.data.get('internship_duration')
            uploaded_cv = request.data.get('uploaded_cv')
            last_company = request.data.get('last_company')
            last_CTC = request.data.get('last_CTC')
            expected_salary = request.data.get('expected_salary')
            applied_from_company = request.data.get('applied_from_company')
    
            current_time = timezone.now() + timedelta(hours=5, minutes=30)
            
            applied_from_company = applied_from_company.title()

            new = tbl_hiring.objects.create(
                full_name=full_name,
                email=email,
                mobile=mobile,
                qualification=qualification,
                applying_for=applying_for,
                preferred_technology=preferred_technology,
                clg_name=clg_name,
                internship_duration=internship_duration,
                uploaded_cv=uploaded_cv,
                last_company=last_company,
                last_CTC=last_CTC,
                expected_salary=expected_salary,
                applied_from_company=applied_from_company,
                status="pending",
                apply_date=current_time.strftime("%Y-%m-%d"),
                apply_time=current_time.strftime("%H:%M:%S"),
            )
    
            # if mobile:
                # phone = f"91{mobile[-10:]}"
                # send_whatsapp_message(phone, message_type='template', template_name="on_apply", template_params=[full_name])
            if from_filling == "NEW_CRM":
                return JsonResponse({'status': 'success', 'message': 'Applicant submitted successfully'})

            return Response({"success": f"Data '{full_name}' added successfully!"}, status=status.HTTP_201_CREATED)
    except Exception as e:
        return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# def hiring_list(request):
#     if 'session_id' in request.session:
#         session_roleid = request.session.get('session_roleid')
#         hiring = tbl_hiring.objects.all().order_by("-hiring_id")

#         return render(request, "hiring_list.html", { 
#         'session_roleid':session_roleid,
#         'hiring':hiring,
#         })
#     else:
#         return redirect(login)
        
from django.db.models import Q
from dateutil import parser 

def hiring_list(request):
    company_list = master_company.objects.all()
    applicant_status = tbl_applicant_status.objects.all()
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        hiring = tbl_hiring.objects.all().order_by("-hiring_id")

        # Filters from GET request
        date_range_filter = request.GET.get('fromDate')
        full_name = request.GET.get('full_name')
        email = request.GET.get('email')
        mobile = request.GET.get('mobile')
        emp_type = request.GET.get('emp_type')
        join_date = request.GET.get('join_date')
        date_of_birth = request.GET.get('date_of_birth')
        applied_from_company = request.GET.get('applied_from_company')
        applying_for = request.GET.get('applying_for')
        status = request.GET.get('status')
        preferred_technology = request.GET.get('preferred_technology')
        apply_date = request.GET.get('apply_date')
        apply_time = request.GET.get('apply_time')

        # Apply filters
        if date_range_filter:
            try:
                start_str, end_str = date_range_filter.split(' - ')
                start_date = parser.parse(start_str.strip())
                end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59)
                hiring = hiring.filter(created_at__range=(start_date, end_date))
            except Exception as e:
                print(f"Date parsing error: {e}")

        if full_name:
            hiring = hiring.filter(full_name__icontains=full_name)
        if email:
            hiring = hiring.filter(email__icontains=email)
        if mobile:
            hiring = hiring.filter(mobile__icontains=mobile)
        if emp_type:
            hiring = hiring.filter(applying_for__icontains=emp_type)
        if join_date:
            hiring = hiring.filter(joining_date__icontains=join_date)
        if date_of_birth:
            hiring = hiring.filter(date_of_birth__icontains=date_of_birth)
        if applied_from_company:
            hiring = hiring.filter(applied_from_company__icontains=applied_from_company)
        if applying_for:
            hiring = hiring.filter(applying_for__icontains=applying_for)
        if status:
            hiring = hiring.filter(status__icontains=status)
        if preferred_technology:
            hiring = hiring.filter(preferred_technology__icontains=preferred_technology)
        if apply_date:
            hiring = hiring.filter(apply_date__icontains=apply_date)
        if apply_time:
            hiring = hiring.filter(apply_time__icontains=apply_time)

        return render(request, "hiring_list.html", { 
            'session_roleid': session_roleid,
            'hiring': hiring,
            'company_list': company_list,
            'applicant_status': applicant_status,
        })
    else:
        return redirect(login)

def view_hiring(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        try:
            statuses = tbl_applicant_status.objects.all().order_by("id")
            hiring = tbl_hiring.objects.get(hiring_id=id)
            return render(request, 'hiring_view.html', {
                'hiring': hiring,
                'statuses': statuses,
                'session_roleid': session_roleid,
            })
        except tbl_hiring.DoesNotExist:
            return redirect('hiring_list',)
    else:
        return redirect(login)

def hiring_status(request, id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        try:
            users = tbl_users2.objects.all()
            statuses = tbl_applicant_status.objects.all().order_by("id")
            hiring = tbl_hiring.objects.get(hiring_id=id)
            return render(request, 'hiring_status.html', {
                'users': users,
                'hiring': hiring,
                'statuses': statuses,
                'session_roleid': session_roleid,
            })
        except tbl_hiring.DoesNotExist:
            return redirect('hiring_list',)
    else:
        return redirect(login)

def update_applicant_status(request, id):
    hiring = get_object_or_404(tbl_hiring, hiring_id=id)

    if request.method == 'POST':
        status = request.POST.get('status')
        hiring.status = status

        template_name = ''
        template_params = []
        location = "Rajhans Platinum Plaza, Adajan, 410 - 412, Palanpur Canal Rd, near NEW LP SAVANI SCHOOL, Surat, Gujarat 395009"

        if status == 'interview scheduled':
            hiring.interview_date = request.POST.get('interview_date') or None
            hiring.interview_time = request.POST.get('interview_time') or None
            template_name = 'interview_message'
            try:
                formatted_interview_date = datetime.strptime(hiring.interview_date, "%Y-%m-%d").strftime("%d-%m-%Y")
            except (ValueError, TypeError):
                formatted_interview_date = "To be announced"
            template_params = [
                hiring.full_name.title(), formatted_interview_date, hiring.interview_time,
                location.title(), hiring.applied_from_company.title()
            ]

        if status == 'interview done':
            hiring.reason = request.POST.get('reason') or None

        elif status == 'selected':
            hiring.joining_date = request.POST.get('joining_date') or None
            hiring.reason = None

            head = request.POST.get('head') or None

            template_name = 'selection_message'

            try:
                formatted_joining_date = datetime.strptime(hiring.joining_date, "%Y-%m-%d").strftime("%d-%m-%Y")
            except (ValueError, TypeError):
                formatted_joining_date = "To be announced"

            template_params = [
                hiring.full_name.title(), formatted_joining_date, location.title(), hiring.applied_from_company.title()
            ]

            full_name_parts = hiring.full_name.split()
            first_name = full_name_parts[0] if len(full_name_parts) > 0 else ''
            middle_name = full_name_parts[1] if len(full_name_parts) > 2 else ''
            last_name = full_name_parts[-1] if len(full_name_parts) > 1 else ''

            if hiring.applying_for == "employee":
                employee = tbl_employee.objects.create(
                    name=first_name,
                    middle_name=middle_name,
                    last_name=last_name,
                    ph_no=hiring.mobile,
                    email=hiring.email,
                    join_date=hiring.joining_date,
                    employee_id_custom=generate_employee_id(),
                    is_active=True,
                    create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    role_id =3,
                    role_name ="Software Developer",
                    head_id = head,
                )

                user = tbl_users2.objects.create(
                    name=first_name,
                    middle_name=middle_name,
                    last_name=last_name,
                    mobile=hiring.mobile,
                    email=hiring.email,
                    emp_id=employee.emp_id,
                    is_active=True,
                    created_dtm=timezone.now() + timedelta(hours=5, minutes=30),
                    role_id =3,
                    role_name ="Software Developer",
                    head_id = head,
                )
                
                employee.user_id = user.userId
                employee.save()
                user.save()
                hiring.delete()
                return redirect('employee_list')      

            elif hiring.applying_for == "intern":
                intern = tbl_intern.objects.create(
                    name=first_name,
                    middle_name=middle_name,
                    last_name=last_name,
                    ph_no=hiring.mobile,
                    email=hiring.email,
                    emp_type="intern",
                    join_date=hiring.joining_date,
                    intern_id_custom=generate_intern_id(),
                    is_active=True,
                    create_time=timezone.now() + timedelta(hours=5, minutes=30),
                    role_id =13,
                    role_name ="intern",
                    head_id = head,
                )

                user = tbl_users2.objects.create(
                    name=first_name,
                    middle_name=middle_name,
                    last_name=last_name,
                    mobile=hiring.mobile,
                    email=hiring.email,
                    emp_type='intern',
                    intern_id=intern.emp_id,
                    is_active=True,
                    created_dtm=timezone.now() + timedelta(hours=5, minutes=30),
                    role_id =13,
                    role_name ="intern",
                    head_id = head,
                )
                intern.user_id = user.userId
                intern.save()
                user.save()
                hiring.delete()
                return redirect('intern_list')        

        elif status in ['rejected', 'on-hold']:
            hiring.reason = request.POST.get('reason') or None
            hiring.joining_date = None

        hiring.save()

        if hiring.mobile and template_name:
            send_whatsapp_message(
                hiring.mobile,
                message_type='template',
                template_name=template_name,
                template_params=template_params
            )

        messages.success(request, 'Status updated and WhatsApp message sent.')
        return redirect('hiring_list')

def send_tomorrow_meeting_reminders(request):
    tomorrow = datetime.now().date() + timedelta(days=1)

    leads = tbl_lead.objects.filter(
        next_meeting_date__date=tomorrow,
        status="Meeting"
    )
    if leads:
        sent_count = 0
        for curr_data in leads:
            ph_no = str(curr_data.mobile).strip()
            company_obj = get_object_or_404(master_company, com_id=curr_data.company_id)
            company_name = company_obj.com_name.title()
            lead_name = curr_data.c_name.title()
            meeting_date_str = curr_data.next_meeting_date.strftime('%d-%m-%Y | %I:%M %p')
    
            send_whatsapp_message(
                ph_no,
                message_type='template',
                template_name='meeting_message_2',
                template_params=[company_name, lead_name, meeting_date_str]
            )
            sent_count += 1
    
        return JsonResponse({'success': True, 'message': f'Meeting reminders sent to {sent_count} leads.'})
    else:
        return JsonResponse({'success': False, 'message': 'No Meetings Tomorrow.'})

def parse_duration(duration):
    months = 0
    days = 0

    months_pattern = re.compile(r'(\d+(\.\d+)?)\s*(months?|mo)')
    days_pattern = re.compile(r'(\d+(\.\d+)?)\s*days?')
    years_pattern = re.compile(r'(\d+(\.\d+)?)\s*years?')

    duration = duration.lower()

    years_match = years_pattern.search(duration)
    if years_match:
        years = float(years_match.group(1))
        months += int(years * 12)

    months_match = months_pattern.search(duration)
    if months_match:
        months += int(float(months_match.group(1)))
        
    days_match = days_pattern.search(duration)
    if days_match:
        days += int(float(days_match.group(1)))

    return months, days

# @api_view(['POST'])
# def client_purchase(request):
#     try:
#         if request.method == 'POST': 
#             client_id = request.data.get('userId')
#             plan_id = request.data.get('planId')
#             plan_amount = request.data.get('price')
#             discount = request.data.get('discount')
#             final_amount = request.data.get('final_price')
#             promocode = request.data.get('promocode')
            
#             current_time = timezone.now() + timedelta(hours=5, minutes=30)
            
#             plan = tbl_plan.objects.get(id=plan_id)  # Assuming `tbl_plan` has a field `id`
#             duration = plan.duration  # Get the duration string (e.g., "3 Months", "1 Month", etc.)
            
#             # Parse the duration into months and days
#             months, days = parse_duration(duration)
            
#             # Get the current date and calculate start and end dates
#             current_time = timezone.now()
#             start_date = current_time  # Start date is the current time
            
#             # Calculate the end date based on the parsed duration
#             end_date = current_time + relativedelta(months=+months, days=+days) 
            
#             new = tbl_pure_client.objects.create(
#                 client_id = client_id,
#                 plan_id = plan_id,
#                 plan_amount = plan_amount,
#                 discount = discount,
#                 final_amount = final_amount,
#                 promocode = promocode,
#                 start_date = start_date,
#                 end_date = end_date,
#                 created_time = current_time
#             )
                
#             return Response({"success": f"Data added successfully!"}, status=status.HTTP_201_CREATED)
#     except Exception as e:
#         return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@csrf_exempt
def initiate_payment(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            plan_id = data['planId']
            user_id = data['userId']
            price = data['price']
            discount = data['discount']
            final_price = data['final_price']
            promo_code = data['promocode']
            
            current_time = timezone.now() + timedelta(hours=5, minutes=30)
            
            plan = tbl_plan.objects.get(id=plan_id)
            duration = plan.duration
            
            months, days = parse_duration(duration)
            
            current_time = timezone.now() + timedelta(hours=5, minutes=30)
            start_date = current_time
            
            end_date = current_time + relativedelta(months=+months, days=+days)
            
            order_id = f"ORD{timezone.now().strftime('%Y%m%d%H%M%S')}"
            
            order = tbl_order.objects.create(
                plan_id=plan_id,
                user_id=user_id,
                price=price,
                discount=discount,
                final_price=final_price,
                promo_code=promo_code,
                start_date=start_date,
                end_date=end_date,
                created_time=current_time,
                order_id = order_id,
            )
            
            phonepe_data = {
                "merchantId": 'M22II6DDHVA4M',
                "merchantTransactionId": order_id,
                "merchantUserId": f'MUID{timezone.now().timestamp()}',
                "amount": final_price * 100,
                "redirectUrl": 'https://shubhamsingh.in/new_crm/payment_callback/',
                "redirectMode": "POST",
                "mobileNumber": 'user-phone',
                "OrderId": order_id,
                "paymentInstrument": {"type": "PAY_PAGE"}
            }
            
            json_payload = json.dumps(phonepe_data)
            encoded_payload = base64.b64encode(json_payload.encode('utf-8')).decode('utf-8')
            
            key = '2f58695e-7ce2-497f-b7aa-8fa217fd0eb2'
            key_index = 1
            string_to_hash = f"{encoded_payload}/pg/v1/pay{key}"
            sha256_hash = hashlib.sha256(string_to_hash.encode('utf-8')).hexdigest()
            final_x_header = f"{sha256_hash}###{key_index}"
            
            url = "https://api.phonepe.com/apis/hermes/pg/v1/pay"
            headers = {
                "Content-Type": "application/json",
                "accept": "application/json",
                "X-VERIFY": final_x_header,
            }
            
            request_data = {"request": encoded_payload}
            response = requests.post(url, json=request_data, headers=headers)
            response_data = response.json()
            
            if 'data' in response_data and 'instrumentResponse' in response_data['data']:
                redirect_url = response_data['data']['instrumentResponse']['redirectInfo']['url']
                return JsonResponse({'success': True, 'redirect_url': redirect_url}, status=200)
            else:
                return JsonResponse({'success': False, 'error': 'Payment initiation failed.'}, status=400)
        
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400) 
    
    return JsonResponse({'success': False, 'error': 'Invalid request method'}, status=405)
    
@csrf_exempt
def payment_callback(request):
    if request.method == "POST":
        try:
            # Step 1: Parse incoming data (handle both JSON and form-encoded)
            if request.content_type == 'application/json':
                response_data = json.loads(request.body)
            else:
                response_data = request.POST

            # Log or debug raw response
            print("PhonePe callback data:", response_data)

            # Step 2: Extract transaction info
            status = response_data.get('code', '')
            data = response_data.get('data', {}) if isinstance(response_data.get('data'), dict) else {}

            # Use fallback values if 'data' is missing
            order_id = data.get('merchantTransactionId') or response_data.get('transactionId')
            transaction_id = data.get('transactionId') or response_data.get('transactionId')
            reference_id = data.get('providerReferenceId') or response_data.get('providerReferenceId')

            if not order_id:
                return JsonResponse({'success': False, 'error': 'Missing order ID'}, status=400)

            payment_status = "success" if status == "PAYMENT_SUCCESS" else "failed"

            # Step 3: Update order
            order = tbl_order.objects.get(order_id=order_id)
            order.payment_status = payment_status
            order.phonepe_transaction_id = transaction_id
            order.phonepe_reference_id = reference_id
            order.save()

            # Step 4: Return response
            if payment_status == "success":
                return JsonResponse({'success': True, 'message': 'Payment successful'}, status=200)
            else:
                return JsonResponse({'success': False, 'message': 'Payment failed'}, status=400)

        except tbl_order.DoesNotExist:
            return JsonResponse({'success': False, 'error': 'Order not found'}, status=404)
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=500)

    return JsonResponse({'success': False, 'error': 'Invalid request method'}, status=405)

# def verify_payment_status(order_id):
#     try:
#         # Ensure you're using the correct PhonePe credentials and endpoint
#         key = '2f58695e-7ce2-497f-b7aa-8fa217fd0eb2'  # Replace with your actual PhonePe key
#         key_index = 1
#         merchant_id = 'M22II6DDHVA4M'  # Your PhonePe Merchant ID
#         path = f"/apis/hermes/pg/v1/status/{merchant_id}/{order_id}"

#         # Create the hash to verify the request
#         string_to_hash = f"{path}{key}"
#         sha256_hash = hashlib.sha256(string_to_hash.encode()).hexdigest()
#         final_x_header = f"{sha256_hash}###{key_index}"

#         # Make the GET request to PhonePe status API
#         url = f"https://api.phonepe.com{path}"  # Verify the full URL with correct base URL
#         headers = {
#             "Content-Type": "application/json",
#             "X-VERIFY": final_x_header,
#         }

#         response = requests.get(url, headers=headers)
        
#         # Log the status response for debugging
#         print(f"PhonePe API Response: {response.text}")
        
#         return response.json()

#     except Exception as e:
#         # Handle any exceptions during the request
#         print(f"Error in verifying payment status: {e}")
#         return {"error": str(e)}

 

# @csrf_exempt
# def payment_callback(request):
#     if request.method == "POST":
#         try:
#             # Step 1: Parse incoming data (supports both JSON and form POST)
#             if request.content_type == 'application/json':
#                 response_data = json.loads(request.body)
#             else:
#                 response_data = request.POST

#             # Step 2: Debug logs to inspect raw data
#             print("=== PhonePe Callback ===")
#             print("Content Type:", request.content_type)
#             print("Request Headers:", dict(request.headers))
#             print("Raw Body:", request.body)
#             print("Parsed Data:", response_data)

#             # Step 3: Extract order ID from possible keys
#             order_id = (
#                 response_data.get("merchantTransactionId") or
#                 response_data.get("merchantOrderId") or
#                 response_data.get("orderId")
#             )

#             print("Resolved Order ID:", order_id)

#             if not order_id:
#                 return JsonResponse({'success': False, 'error': 'Missing order ID'}, status=400)

#             # Step 4: Extract other fields
#             transaction_id = response_data.get('transactionId')
#             reference_id = response_data.get('providerReferenceId')
#             checksum = response_data.get('checksum')  # Optional
#             amount = response_data.get('amount')

#             # Step 5: Verify payment status with PhonePe API
#             status_result = verify_payment_status(order_id)
#             print("PhonePe Status API Response:", status_result)

#             status_code = status_result.get("data", {}).get("responseCode")

#             # Step 6: Determine status
#             if status_code == "PAYMENT_SUCCESS":
#                 payment_status = "success"
#             else:
#                 payment_status = "failed"

#             # Step 7: Update order in database
#             try:
#                 order = tbl_order.objects.get(order_id=order_id)
#             except tbl_order.DoesNotExist:
#                 return JsonResponse({'success': False, 'error': 'Order not found'}, status=404)

#             order.payment_status = payment_status
#             order.phonepe_transaction_id = transaction_id
#             order.phonepe_reference_id = reference_id
#             order.save()

#             # Step 8: Return final result
#             if payment_status == "success":
#                 return JsonResponse({'success': True, 'message': 'Payment successful'}, status=200)
#             else:
#                 return JsonResponse({'success': False, 'message': 'Payment failed'}, status=400)

#         except Exception as e:
#             print("Exception in callback:", str(e))
#             return JsonResponse({'success': False, 'error': str(e)}, status=500)

#     return JsonResponse({'success': False, 'error': 'Invalid request method'}, status=405)


# @csrf_exempt
# def toggle_active_user(request, user_id):
#     if request.method == 'POST':
#         try:
#             user = tbl_users2.objects.get(userId=user_id)
#             user.is_active = not user.is_active
#             user.save()
#             return JsonResponse({'success': True, 'is_active': user.is_active})
#         except User.DoesNotExist:
#             return JsonResponse({'success': False, 'error': 'User not found'})
#     return JsonResponse({'success': False, 'error': 'Invalid request method'})

@csrf_exempt
def toggle_active_user(request, user_id):
    if request.method == 'POST':
        try:
            try :
                employee = tbl_employee.objects.get(user_id=user_id)
                employee.is_active = not employee.is_active
                employee.save()
            except:
                intern = tbl_intern.objects.get(user_id=user_id)
                intern.is_active = not intern.is_active
                intern.save()
            finally:
                user = tbl_users2.objects.get(userId=user_id)
                user.is_active = not user.is_active
                user.save()
            return JsonResponse({'success': True, 'is_active': user.is_active})
        except tbl_users2.DoesNotExist:
            return JsonResponse({'success': False, 'error': 'User not found'}, status=404)
        except Exception as e:
            import traceback
            print("ERROR TOGGLING USER:\n", traceback.format_exc())
            return JsonResponse({'success': False, 'error': str(e)}, status=500)
    return JsonResponse({'success': False, 'error': 'Invalid method'}, status=405)
    


# manage interns

def add_intern(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        company_id = request.session['company_id']
        session_roleid = request.session.get('session_roleid')
        cites = master_city.objects.all()  
        state = master_state.objects.all()  
        products = master_product.objects.all()
        # shift = master_shift.objects.all()
        allleadtype = master_leadtype.objects.all() 
        user_compeny = request.session['user_compney']  
        roles = tbl_roles.objects.all()[1:]  # Skipping the first role
        users = tbl_users2.objects.all()
        compney_list = master_company.objects.all()
        # selected_company_id = request.session.get('selected_company_id', None)
        # selected_company_name = master_company.objects.get(com_id=selected_company_id)
        shifts_raw = master_shift.objects.all()
        shifts = []
    
        for shift in shifts_raw:
            start = shift.start_time.strftime('%H:%M')
            end = shift.end_time.strftime('%H:%M')
            time_range = f"{start} - {end}"
            shifts.append({
                'time_range': time_range,
                'shift_name': shift.shift  # optional: add shift name if needed
            })

        return render(request, "intern-form.html", {'compney_list':compney_list,'state':state,'roles':roles,'users':users,'shifts':shifts,'cites': cites, 'products': products, 'Username':Username, 'allleadtype':allleadtype, 'companey_list':master_company.objects.all(),'comp_name':user_compeny, 'session_roleid':session_roleid,'company_id': company_id}) 
        # return render(request, "intern-onboarding-leasting.html", {'selected_company_id':selected_company_id,'selected_company_name':selected_company_name, 'compney_list':compney_list,'state':state,'roles':roles,'users':users,'shift':shift,'cites': cites, 'products': products, 'Username':Username, 'allleadtype':allleadtype, 'companey_list':master_company.objects.all(),'comp_name':user_compeny, 'session_roleid':session_roleid,'company_id': company_id}) 
   
    else:
        return redirect(login)

def add_intern_onboarding(request):
    if 'session_id' not in request.session:
        return redirect('login')

    session_id = request.session.get('session_id')
    session_roleid = request.session.get('session_roleid')
    company_id = request.session.get('company_id')
    session_user = request.session.get('session_user')
    selected_company_id = request.session.get('selected_company_id', None)

    def parse_date(date_str):
        return datetime.strptime(date_str, '%Y-%m-%d') if date_str else None

    def get_uploaded_file(field_name, request, default=None):
        file = ""
        try:
            file = request.FILES[field_name]
        except:
            file = ""
        finally:
            return file

    if request.method == 'POST':
        # File Uploads (safely handled)
        aadhar_pdf = get_uploaded_file('aadhar_data', request)
        pan_pdf = get_uploaded_file('pan_data', request)
        photo = get_uploaded_file('photo_data', request)
        joining_letter = get_uploaded_file('joining_letter', request)
        bank_statement = get_uploaded_file('bank_statement', request)

        # Personal Info
        name = request.POST.get('name', '')
        middle_name = request.POST.get('middle_name', '')
        last_name = request.POST.get('last_name', '')
        date_of_birth = parse_date(request.POST.get('date_of_birth'))
        gender = request.POST.get('gender', '')
        marital_status = request.POST.get('marital_status', '')
        machine_id = request.POST.get('machine_id') or None
        ph_no = request.POST.get('ph_no', '')
        email = request.POST.get('email', '')
        emer_cont_pers = request.POST.get('emer_cont_pers', '')
        emer_cont_ph_no = request.POST.get('emer_cont_ph_no', '')
        address = request.POST.get('address', '')
        city = request.POST.get('city', '')
        state = request.POST.get('state', '')
        country = request.POST.get('country', '')
        zip_code = request.POST.get('zip_code', '')
        college_name = request.POST.get('college_name', '')
        college_id = request.POST.get('college_id', '')
        enrollment_no = request.POST.get('enrollment_no', '')

        # Other Info
        emp_type = request.POST.get('emp_type', '')
        attendence_time = request.POST.get('attendence_time', '')
        gross_sal = request.POST.get('gross_sal', '')
        intern_id_custom = generate_intern_id()
        password = request.POST.get('password', '')
        head_id = request.POST.get('head') or None
        join_date = parse_date(request.POST.get('join_date'))
        completion_date = parse_date(request.POST.get('completion_date'))
        company_name = request.POST.get('company_name', '')

        # IDs
        role_ids = request.POST.getlist('roles')
        depart_ids = request.POST.getlist('departments')

        # Role name fetch
        role_names = [r.role for r in tbl_roles.objects.filter(roleId__in=role_ids)]
        role_name = ', '.join(role_names)

        # Bank Info
        stipend = request.POST.get('stipend', '')
        acc_num = request.POST.get('acc_num', '')
        acc_holder_name = request.POST.get('acc_holder_name', '')
        bank_name = request.POST.get('bank_name', '')
        ifsc_code = request.POST.get('ifsc_code', '')
        branch_add = request.POST.get('branch_add', '')

        # Benefits
        med_benifit = request.POST.get('med_benifit', '')
        family_benifit = request.POST.get('family_benifit', '')
        transport_benifit = request.POST.get('transport_benifit', '')
        other_benifit = request.POST.get('other_benifit', '')

        # Create intern record dictionary
        intern_data = {
            'name': name,
            'middle_name': middle_name,
            'last_name': last_name,
            'date_of_birth': date_of_birth,
            'gender': gender,
            'marital_status': marital_status,
            'machine_id': machine_id,
            'ph_no': ph_no,
            'email': email,
            'emer_cont_pers': emer_cont_pers,
            'emer_cont_ph_no': emer_cont_ph_no,
            'address': address,
            'city': city,
            'state': state,
            'country': country,
            'zip_code': zip_code,
            'attendence_time': attendence_time,
            'gross_sal': gross_sal,
            'intern_id_custom': intern_id_custom,
            'password': password,
            'head_id': head_id,
            'join_date': join_date,
            'completion_date': completion_date,
            'company_id': company_id,
            'company_name': company_name,
            'dp_id': ','.join(depart_ids),
            'role_id': ','.join(role_ids),
            'role_name': role_name,
            'emp_type': emp_type,
            'stipend': stipend,
            'college_name': college_name,
            'college_id': college_id,
            'enrollment_no': enrollment_no,
            'acc_num': acc_num,
            'acc_holder_name': acc_holder_name,
            'bank_name': bank_name,
            'ifsc_code': ifsc_code,
            'branch_add': branch_add,
            'med_benifit': med_benifit,
            'family_benifit': family_benifit,
            'transport_benifit': transport_benifit,
            'other_benifit': other_benifit,
            'add_by_id': session_id,
            'add_by_name': session_user,
            'update_by_id': session_id,
            'update_by_name': session_user,
            'create_time': timezone.now() + timedelta(hours=5, minutes=30),
        }

        # Attach files if uploaded
        if aadhar_pdf:
            intern_data['aadhar_pdf'] = aadhar_pdf
        if pan_pdf:
            intern_data['pan_pdf'] = pan_pdf
        if photo:
            intern_data['photo'] = photo
        if joining_letter:
            intern_data['joining_letter'] = joining_letter
        if bank_statement:
            intern_data['bank_statement'] = bank_statement

        # Save intern
        new_lead = tbl_intern.objects.create(**intern_data)

        # Save user account
        new_user = tbl_users2.objects.create(
            emp_type =emp_type,
            intern_id=new_lead.emp_id,
            name=name,
            middle_name=middle_name,
            last_name=last_name,
            mobile=ph_no,
            email=email,
            created_dtm=timezone.now() + timedelta(hours=5, minutes=30),
            password=password,
            company_name=company_name,
            company_id=company_id,
            role_name=role_name,
            head_id=head_id,
            add_by_name=session_user,
            add_by_id=session_id,
            status='Active',
            role_id=','.join(role_ids),
            dp_id=','.join(depart_ids),
            updated_by_id=session_id,
        )
        
        if photo:
            new_user.photo = photo

        new_user.save()
        new_lead.user_id = new_user.userId
        new_lead.save()

        # Log entry
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name=session_user,
            change_status=f"Add intern On Boarding - {name}",
            added_date=timezone.now() + timedelta(hours=5, minutes=30),
            company_id=company_id,
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )

        return JsonResponse({'status': 'success', 'message': f'intern {name} added successfully!'})

    return render(request, "intern-onboarding-leasting.html", {'session_roleid': session_roleid})

def intern_list(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        
        if set(session_roleid).intersection({"1"}):
            selected_company_id = request.session.get('selected_company_id', None)
            if selected_company_id:
                employee = tbl_intern.objects.filter(company_id=selected_company_id) 
            else:
                employee = tbl_intern.objects.all()
        else:
            employee = tbl_intern.objects.all()
            
        # employee = tbl_intern.objects.all()
        # shifts = master_shift.objects.all()
        
        # from_date = request.GET.get('fromDate')
        # to_date = request.GET.get('toDate')
        emp_id = request.GET.get('emp_id')
        name = request.GET.get('name')
        email = request.GET.get('email')
        ph_no = request.GET.get('ph_no')
        # alt_ph_no = request.GET.get('alt_ph_no')
        address = request.GET.get('address')
        shift = request.GET.get('shift')
        # emp_type = request.GET.get('emp_type')
        join_date = request.GET.get('join_date')
        date_of_birth = request.GET.get('date_of_birth')
        # anniversary_date = request.GET.get('anniversary_date')
        # aadhar_number = request.GET.get('aadhar_number')
        # bank_name = request.GET.get('bank_name')
        # acc_num = request.GET.get('acc_num')
        # ifsc_code = request.GET.get('ifsc_code')
        
        # query = Q()
            
        date_range_filter = request.GET.get('fromDate')  # or request.POST if it's a POST form
        
        if date_range_filter:
            try:
                start_str, end_str = date_range_filter.split(' - ')
                start_date = parser.parse(start_str.strip())
                end_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59, microsecond=999999)
                employee = employee.filter(create_time__gte=start_date, create_time__lte=end_date)
            except Exception as e:
                print(f"Date parsing error: {e}")
            
        if emp_id:
            employee = employee.filter(intern_id_custom__icontains=emp_id)
        if name:
            # employee = employee.filter(name__icontains=name)
            employee = employee.filter(Q(name__icontains=name) | Q(middle_name__icontains=name) | Q(last_name__icontains=name))
        if email:
            employee = employee.filter(email__icontains=email)
        if ph_no:
            employee = employee.filter(ph_no__icontains=ph_no)
        # if alt_ph_no:
        #     employee = employee.filter(alt_ph_no__icontains=alt_ph_no)
        if address:
            employee = employee.filter(address__icontains=address)
        # if shift:
        #     employee = employee.filter(attendence_time__icontains=shift)
        # if emp_type:
        #     employee = employee.filter(emp_type__icontains=emp_type)
        if join_date:
            employee = employee.filter(join_date__icontains=join_date)
        if date_of_birth:
            employee = employee.filter(date_of_birth__icontains=date_of_birth)
        # if anniversary_date:
        #     employee = employee.filter(anniversary_date__icontains=anniversary_date)
        # if aadhar_number:
        #     employee = employee.filter(aadhar_number__icontains=aadhar_number)
        # if bank_name:
        #     employee = employee.filter(bank_name__icontains=bank_name)
        # if acc_num:
        #     employee = employee.filter(acc_num__icontains=acc_num)
        # if ifsc_code:
        #     employee = employee.filter(ifsc_code__icontains=ifsc_code)

        # employee = employee.filter(query) 
        employee = employee.order_by('-emp_id')
        
         
        active_user = 0
        inactive_user = 0
        all_user = employee.count()
        for i in employee:
            if i.is_active:
                active_user += 1
            if not i.is_active:
                inactive_user += 1
        
        return render(request,"intern-list.html",{
            # 'shifts':shifts,
            'intern':employee,
            'session_roleid':session_roleid,
            'all_user':all_user,
            'inactive_user':inactive_user,
            'active_user':active_user,
        })
        
    else:
        return redirect(login)

def intern_excel(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        if request.method == 'POST':
            date_range = request.POST.get('fromDate')

            if date_range:
                try:
                    date_range = date_range.replace('+', ' ')
                    start_str, end_str = date_range.split(' - ')
                    from_date = parser.parse(start_str.strip()).replace(hour=0, minute=0, second=0)
                    to_date = parser.parse(end_str.strip()).replace(hour=23, minute=59, second=59)
                    if from_date > to_date:
                        from_date, to_date = to_date, from_date
                except ValueError:
                    return HttpResponse("Invalid date range.", status=400)

            intern_entries = tbl_intern.objects.filter(create_time__range=[from_date, to_date])

            if intern_entries.count() == 0:
                return HttpResponse("No intern records found for the given date range.", status=404)

            wb = Workbook()
            ws = wb.active
            ws.title = "Intern Report"

            headers = [
                "Intern ID", "User ID", "Name", "Middle Name", "Last Name", "Date of Birth", "Gender",
                "Marital Status", "Machine ID", "Phone Number", "Email", "Emergency Contact Person",
                "Emergency Contact Number", "Address", "City", "State", "Country", "Zip Code",
                "Employee Type", "Attendance Time", "Gross Salary", "College Name", "Custom Intern ID",
                "Password", "Head ID", "Joining Date", "Completion Date", "Company ID", "Company Name",
                "Department ID", "Role ID", "Role Name", "Stipend", "Account Number", "Account Holder Name",
                "Bank Name", "IFSC Code", "Branch Address", "Medical Benefit", "Family Benefit",
                "Transport Benefit", "Other Benefit", "Added By ID", "Added By Name", "Updated By ID",
                "Updated By Name", "Created Time", "Is Active"
            ]

            ws.append(headers)

            for entry in intern_entries:
                ws.append([
                    entry.emp_id,
                    entry.user_id,
                    entry.name,
                    entry.middle_name,
                    entry.last_name,
                    entry.date_of_birth.strftime('%d/%m/%Y') if entry.date_of_birth else '',
                    entry.gender,
                    entry.marital_status,
                    entry.machine_id,
                    entry.ph_no,
                    entry.email,
                    entry.emer_cont_pers,
                    entry.emer_cont_ph_no,
                    entry.address,
                    entry.city,
                    entry.state,
                    entry.country,
                    entry.zip_code,
                    entry.emp_type,
                    entry.attendence_time,
                    entry.gross_sal,
                    entry.college_name,
                    entry.intern_id_custom,
                    entry.password,
                    entry.head_id,
                    entry.join_date.strftime('%d/%m/%Y') if entry.join_date else '',
                    entry.completion_date.strftime('%d/%m/%Y') if entry.completion_date else '',
                    entry.company_id,
                    entry.company_name,
                    entry.dp_id,
                    entry.role_id,
                    entry.role_name,
                    entry.stipend,
                    entry.acc_num,
                    entry.acc_holder_name,
                    entry.bank_name,
                    entry.ifsc_code,
                    entry.branch_add,
                    entry.med_benifit,
                    entry.family_benifit,
                    entry.transport_benifit,
                    entry.other_benifit,
                    entry.add_by_id,
                    entry.add_by_name,
                    entry.update_by_id,
                    entry.update_by_name,
                    entry.create_time.strftime('%d/%m/%Y %H:%M') if entry.create_time else '',
                    "Yes" if entry.is_active else "No"
                ])

            response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            response['Content-Disposition'] = 'attachment; filename="Intern-Report.xlsx"'
            wb.save(response)
            return response

        return render(request, "intern-listing.html", {'session_roleid': session_roleid})
    else:
        return redirect('login')

def edit_intern(request, intern_id):
    if 'session_id' not in request.session:
        return redirect('login')

    intern = get_object_or_404(tbl_intern, emp_id=intern_id)

    def parse_date(date_str):
        return datetime.strptime(date_str, '%Y-%m-%d') if date_str else None

    def get_uploaded_file(field_name, request, default=None):
        file = ""
        try:
            file = request.FILES[field_name]
        except:
            file = ""
        finally:
            return file

    if request.method == 'POST':
        try:
            # File uploads
            aadhar_pdf = get_uploaded_file('aadhar_data', request)
            pan_pdf = get_uploaded_file('pan_data', request)
            photo = get_uploaded_file('photo_data', request)
            joining_letter = get_uploaded_file('joining_letter', request)
            bank_statement = get_uploaded_file('bank_statement', request)

            # Personal Info
            intern.name = request.POST.get('name', '')
            intern.middle_name = request.POST.get('middle_name', '')
            intern.last_name = request.POST.get('last_name', '')
            intern.date_of_birth = parse_date(request.POST.get('date_of_birth'))
            intern.gender = request.POST.get('gender', '')
            intern.marital_status = request.POST.get('marital_status', '')
            intern.machine_id = request.POST.get('machine_id') or None
            intern.ph_no = request.POST.get('ph_no', '')
            intern.email = request.POST.get('email', '')
            intern.emer_cont_pers = request.POST.get('emer_cont_pers', '')
            intern.emer_cont_ph_no = request.POST.get('emer_cont_ph_no', '')
            intern.address = request.POST.get('address', '')
            intern.city = request.POST.get('city', '')
            intern.state = request.POST.get('state', '')
            intern.country = request.POST.get('country', '')
            intern.zip_code = request.POST.get('zip_code', '')
            intern.college_name = request.POST.get('college_name', '')
            intern.college_id = request.POST.get('college_id', '')
            intern.enrollment_no = request.POST.get('enrollment_no', '')

            # Other Info
            intern.attendence_time = request.POST.get('attendence_time', '')
            intern.gross_sal = request.POST.get('gross_sal', '')
            intern.password = request.POST.get('password', '')
            intern.head_id = request.POST.get('head') or None
            intern.join_date = parse_date(request.POST.get('join_date'))
            intern.completion_date = parse_date(request.POST.get('completion_date'))
            intern.company_name = request.POST.get('company_name', '')

            # IDs
            role_ids = request.POST.getlist('roles')
            depart_ids = request.POST.getlist('departments')
            intern.role_id = ','.join(role_ids)
            intern.dp_id = ','.join(depart_ids)

            role_names = [r.role for r in tbl_roles.objects.filter(roleId__in=role_ids)]
            intern.role_name = ', '.join(role_names)

            # Bank Info
            intern.stipend = request.POST.get('stipend', '')
            intern.acc_num = request.POST.get('acc_num', '')
            intern.acc_holder_name = request.POST.get('acc_holder_name', '')
            intern.bank_name = request.POST.get('bank_name', '')
            intern.ifsc_code = request.POST.get('ifsc_code', '')
            intern.branch_add = request.POST.get('branch_add', '')

            # Benefits
            intern.med_benifit = request.POST.get('med_benifit', '')
            intern.family_benifit = request.POST.get('family_benifit', '')
            intern.transport_benifit = request.POST.get('transport_benifit', '')
            intern.other_benifit = request.POST.get('other_benifit', '')

            # File updates
            if aadhar_pdf:
                intern.aadhar_pdf = aadhar_pdf
            if pan_pdf:
                intern.pan_pdf = pan_pdf
            if photo:
                intern.photo = photo
            if joining_letter:
                intern.joining_letter = joining_letter
            if bank_statement:
                intern.bank_statement = bank_statement

            intern.update_by_id = request.session['session_id']
            intern.update_by_name = request.session['session_user']
            intern.save()

            # Update user
            user = tbl_users2.objects.get(intern_id=intern.emp_id)
            user.name = intern.name
            user.middle_name = intern.middle_name
            user.last_name = intern.last_name
            user.email = intern.email
            user.password = intern.password
            user.mobile = intern.ph_no
            user.company_name = intern.company_name
            user.company_id = intern.company_id
            user.role_name = intern.role_name
            user.head_id = intern.head_id
            user.role_id = intern.role_id
            user.dp_id = intern.dp_id
            user.updated_by_id = request.session['session_id']
            if photo:
                user.photo = photo
            user.save()

            # Log
            tbl_messages.objects.create(
                message_name=request.session['session_user'],
                change_status=f"Edit Intern On Boarding - {intern.name}",
                added_date=timezone.now() + timedelta(hours=5, minutes=30),
                company_id=request.session['company_id']
            )

            return JsonResponse({'status': 'success', 'message': f'Intern {intern.name} updated successfully!'})

        except Exception as e:
            return JsonResponse({'status': 'error', 'message': str(e)})
    shifts_raw = master_shift.objects.all()
    shifts = [] 

    for shift in shifts_raw:
        start = shift.start_time.strftime('%H:%M')
        end = shift.end_time.strftime('%H:%M')
        time_range = f"{start} - {end}"
        shifts.append({
            'time_range': time_range,
            'shift_name': shift.shift  # optional: add shift name if needed
        })

    roles = tbl_roles.objects.all()[1:]
    compney_list = master_company.objects.all()
    user_roles = intern.role_id.split(',') if intern.role_id else []
    user_departments = intern.dp_id.split(',') if intern.dp_id else []

    return render(request, "intern-form.html", {
        'lead': intern,
        'compney_list': compney_list,
        'clients': master_client.objects.all(),
        'products': master_product.objects.all(),
        'comp_name': request.session['user_compney'],
        'session_roleid': request.session.get('session_roleid'),
        'company_id': request.session['company_id'],
        'is_edit': True,
        'users': tbl_users2.objects.all(),
        'roles': roles,
        'user_roles': user_roles,
        'user_departments': user_departments,
        'shifts': shifts,
        'state': master_state.objects.all(),
        'cites': master_city.objects.all(),
    })
       
def delete_intern_onboarding(request, intern_id):
    if 'session_id' in request.session:
        intern = get_object_or_404(tbl_intern, emp_id=intern_id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name=request.session['session_user'],
            change_status=f"Delete Intern On Boarding - {intern.name}",
            added_date=timezone.now() + timedelta(hours=5, minutes=30),
            company_id=request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )

        user = tbl_users2.objects.filter(intern_id=intern.emp_id).first()
        if user:
            user.delete()

        intern.delete()

        return JsonResponse({'success': True, 'name': intern.name})
    else:
        return redirect('login')

def add_hiring(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        companies = master_company.objects.all().order_by("com_name")
        return render(request, 'add-applicant.html', {
            'session_roleid': session_roleid,
            'companies': companies,
        })
    else:
        return redirect(login)
      
def delete_hiring(request, id):
    if 'session_id' in request.session:
        applicant = get_object_or_404(tbl_hiring, hiring_id=id)
        name= applicant.full_name
        applicant.delete()
        return JsonResponse({'success': True, 'c_name': name})
    else:
        return redirect(login)
      

def intern_details(request,emp_id):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')
        data = get_object_or_404(tbl_intern, emp_id=emp_id)
        Head_name_obj = get_object_or_404(tbl_users2, userId=data.head_id) 
        Head_name = f"{Head_name_obj.name} {Head_name_obj.middle_name} {Head_name_obj.last_name}"

        details_context = request.session.get('details_context')

        if details_context:
            context = {**details_context, 'data': data, 'session_roleid': session_roleid}
            del request.session['details_context']
            return render(request, "intern_details.html", context)
        else:
            context = {
                'data': data,
                'session_roleid': session_roleid,
                'Head_name': Head_name,
            }
        return render(request, "intern_details.html", context)
    else:
        return redirect('login')

def details_count_intern(request):
    if 'session_id' in request.session:
        session_roleid = request.session.get('session_roleid')

        emp_id = request.POST.get('emp_id')
        # from_date = request.POST.get('from_date')
        # to_date = request.POST.get('to_date')
        date_range = request.POST.get('fromDate')  # New field name from updated form
        action = request.POST.get('action')
        from_date = to_date = None

        if date_range:
            try:
                # Force to string in case it's a datetime object already
                date_range_str = str(date_range)
                date_parts = date_range_str.split(" - ")
                from_date_str = str(date_parts[0].strip())
                to_date_str = str(date_parts[1].strip())

                from_date = datetime.strptime(from_date_str, "%m/%d/%Y %I:%M %p") 
                to_date = datetime.strptime(to_date_str, "%m/%d/%Y %I:%M %p")

            except Exception as e:
                return JsonResponse({'error': f'Date parse error: {str(e)}'}, status=400)

        if from_date and to_date:
            employee = get_object_or_404(tbl_intern, emp_id=emp_id)
            machine_id = employee.machine_id
            emp_shift = employee.attendence_time
            user_id = employee.user_id
            full_name = f"{employee.name} {employee.middle_name} {employee.last_name}"
            company_id = employee.company_id
            cmp_obj = master_company.objects.get(com_id = company_id)
            company_name = cmp_obj.com_name
            company_address = f"{cmp_obj.address}, {cmp_obj.area}, {cmp_obj.city}, {cmp_obj.state}, {cmp_obj.pincode}"
            
            
            tasks = tbl_task.objects.filter(
                assign_to=user_id,
                assign_date__date__range=[from_date, to_date]
            )

            total_task = tasks.count()
            complete_task = pending_task = revised_task = task_delay = 0

            for task in tasks:
                if task.status == "Complete":
                    complete_task += 1
                if task.status == "Pending":
                    pending_task += 1
                if task.status == "Revise":
                    revised_task += 1
                if task.delay_count and isinstance(task.delay_count, str):
                    match = re.search(r'\d+', task.delay_count)
                    if match:
                        task_delay += int(match.group())

            attendances = tbl_attendances.objects.filter(
                date__range=[from_date, to_date],
                machine_id=machine_id
            ).order_by('date')

            breaks = tbl_break.objects.filter(
                date__range=[from_date, to_date],
                machine_id=machine_id
            ).order_by('date')

            breaks_data = []
            
            # Define lunch break window
            lunch_start_window = datetime.strptime("12:58", "%H:%M").time()
            lunch_end_window = datetime.strptime("13:58", "%H:%M").time()
            total_month_breaks = 0
            
            for br in breaks:
                raw_punches = br.punches.split("\n")
                punch_times = [p.strip() for p in raw_punches if p.strip() and p.strip() != "0"]
                punch_count = len(punch_times)
                break_pairs = []
                total_break_minutes = 0
                lunch_break = None
                used_indices = set()
            
                if punch_count >= 1:
                    i = 0
                    while i < punch_count:
                        if i in used_indices:
                            i += 1
                            continue
            
                        start_str = punch_times[i]
                        try:
                            fmt = "%H:%M"
                            start_time = datetime.strptime(start_str, fmt)
                        except:
                            break_pairs.append({
                                "pair": f"{start_str} - (invalid start)",
                                "duration": "Invalid time"
                            })
                            used_indices.add(i)
                            i += 1
                            continue
            
                        matched = False
                        for j in range(i + 1, punch_count):
                            if j in used_indices:
                                continue
                            end_str = punch_times[j]
                            try:
                                end_time = datetime.strptime(end_str, fmt)
                                if start_time < end_time <= start_time + timedelta(hours=1):
                                    duration = (end_time - start_time).seconds // 60
                                    start_t = start_time.time()
                                    end_t = end_time.time()
            
                                    is_lunch = (
                                        lunch_start_window <= start_t <= lunch_end_window or
                                        lunch_start_window <= end_t <= lunch_end_window
                                    )
            
                                    if is_lunch and not lunch_break:
                                        lunch_break = {
                                            "pair": f"{start_str} - {end_str}",
                                            "duration": f"{duration} mins"
                                        }
                                    else:
                                        total_break_minutes += duration
                                        break_pairs.append({
                                            "pair": f"{start_str} - {end_str}",
                                            "duration": f"{duration} mins"
                                        })
                                    used_indices.update([i, j])
                                    matched = True
                                    break
                            except:
                                continue
            
                        if not matched:
                            start_t = start_time.time()
                            is_lunch = lunch_start_window <= start_t <= lunch_end_window
            
                            if is_lunch and not lunch_break:
                                lunch_break = {
                                    "pair": f"{start_str} - (no end)",
                                    "duration": "Incomplete"
                                }
                            else:
                                break_pairs.append({
                                    "pair": f"{start_str} - (no end)",
                                    "duration": "Incomplete"
                                })
            
                            used_indices.add(i)
            
                        i += 1
            
                    total_month_breaks += total_break_minutes
            
                    # Format total break duration
                    hours = total_break_minutes // 60
                    minutes = total_break_minutes % 60
                    total_break_str = f"{hours}h {minutes}m" if hours else f"{minutes}m"
            
                else:
                    break_pairs.append({
                        "pair": "No Breaks",
                        "duration": ""
                    })
                    punch_count = 0
                    total_break_str = "0m"
            
                formatted_date = br.date.strftime("%d-%m-%Y") if br.date else "N/A"
            
                breaks_data.append({
                    'date': formatted_date,
                    'punch_count': punch_count,
                    'breaks': break_pairs,
                    'lunch_break': lunch_break,
                    'total_break_duration': total_break_str
                })
            
            # Final total_month_breaks formatting (outside the loop)
            month_hours = total_month_breaks // 60
            month_minutes = total_month_breaks % 60
            total_month_breaks_str = f"{month_hours}hr {month_minutes}m" if month_hours else f"{month_minutes}minutes"

            full_days = half_days = late_punches = early_punches = 0.0
            sunday_attendances = leave_days = rejected_double_leave_days = rejected_double_half_days = overtime_minutes = 0.0
            unique_dates = set()
            attendance_data = []
            prev_attendance = next_attendance = None

            leave_map = {}
            leave_type_map = {}
            exception_leave_dates = set()
            
            leave_apps = tbl_leave_appli.objects.filter(
                emp_id=user_id,
                app_start_date__lte=to_date,
                app_end_date__gte=from_date
            )
            
            # Get holidays between the date range
            holiday_qs = tbl_holiday.objects.filter(
                start_date__lte=to_date,
                to_date__gte=from_date
            )
            
            holiday_dates = set()
            for holiday in holiday_qs:
                current = holiday.start_date
                while current <= holiday.to_date:
                    holiday_dates.add(current.strftime("%Y-%m-%d"))
                    current += timedelta(days=1)
            
            holiday_count = len(holiday_dates)
            
            # for leave in leave_apps:
            #     current = leave.app_start_date
            #     while current <= leave.app_end_date:
            #         date_str = current.strftime("%Y-%m-%d")
            #         leave_map[date_str] = leave.status
            #         leave_type_map[date_str] = leave.leave_type
            #         current += timedelta(days=1)
            
            for leave in leave_apps:
                current = leave.app_start_date.date()
                while current <= leave.app_end_date.date():
                    date_str = current.strftime("%Y-%m-%d")
                    
                    # Exclude "Exception" leave type with "Approved" status
                    if leave.leave_type == "Exception" and leave.status == "Approved":
                        exception_leave_dates.add(date_str)
                    else:
                        leave_map[date_str] = leave.status
                        leave_type_map[date_str] = leave.leave_type
                    current += timedelta(days=1)
                    
            total_month_work_minutes = 0
            
            # from_date_dt = datetime.strptime(from_date, "%Y-%m-%d")
            # to_date_dt = datetime.strptime(to_date, "%Y-%m-%d")
            
            if isinstance(from_date, str):
                from_date_dt = datetime.strptime(from_date, "%Y-%m-%d")
            else:
                from_date_dt = from_date
            
            if isinstance(to_date, str):
                to_date_dt = datetime.strptime(to_date, "%Y-%m-%d")
            else:
                to_date_dt = to_date

            second_fourth_saturdays = get_second_and_fourth_saturdays(from_date_dt, to_date_dt)

            for i, attendance in enumerate(attendances):
                attendance_date_str = attendance.date.strftime("%Y-%m-%d")
                
                if attendance_date_str in holiday_dates:
                    attendance_data.append({
                        'date': datetime.strptime(attendance_date_str, "%Y-%m-%d").strftime("%d-%m-%Y"),
                        'punch_in': attendance.punch_in,
                        'punch_out': attendance.punch_out,
                        'worked_hours': "Holiday"
                    })
                    continue  # Skip holidays for any full/half/leave counts
                
                if attendance_date_str in exception_leave_dates:
                    prev_attendance = attendance
                    continue
                
                punch_in_time = None
                punch_out_time = None
                worked_duration = ""
                
                if attendance.punch_in and attendance.punch_out and attendance.punch_in != '0' and attendance.punch_out != '0':
                    try:
                        punch_in_time = datetime.strptime(attendance.punch_in, "%H:%M")
                        punch_out_time = datetime.strptime(attendance.punch_out, "%H:%M")
                        worked_minutes = (punch_out_time - punch_in_time).seconds // 60
                        worked_hours = worked_minutes // 60
                        worked_remaining_minutes = worked_minutes % 60
                        worked_duration = f"{worked_hours}h {worked_remaining_minutes}m"
                
                        total_month_work_minutes += worked_minutes  # ðŸ‘ˆ Add this line
                
                    except ValueError:
                        worked_duration = "Invalid time"
                elif (attendance.punch_in and attendance.punch_in != '0') or (attendance.punch_out and attendance.punch_out != '0'):
                    worked_duration = "Incomplete"
                else:
                    worked_duration = "Absent"
            
                attendance_data.append({
                    'date': datetime.strptime(attendance_date_str, "%Y-%m-%d").strftime("%d-%m-%Y"),
                    'punch_in': attendance.punch_in,
                    'punch_out': attendance.punch_out,
                    'worked_hours': worked_duration
                })

                next_attendance = attendances[i + 1] if i + 1 < len(attendances) else None

                if attendance.date.weekday() == 6:  # Sunday
                    sunday_attendances += 1.0
                    if prev_attendance and next_attendance:
                        if all([
                            not prev_attendance.punch_in or prev_attendance.punch_in == '0',
                            not prev_attendance.punch_out or prev_attendance.punch_out == '0',
                            not next_attendance.punch_in or next_attendance.punch_in == '0',
                            not next_attendance.punch_out or next_attendance.punch_out == '0'
                        ]):
                            leave_days += 1.0
                            sunday_attendances -= 1.0
                    continue

                leave_status = leave_map.get(attendance_date_str)
                leave_type = leave_type_map.get(attendance_date_str)

                # âœ… Add any punch-in or punch-out day to total_days_worked
                if (attendance.punch_in and attendance.punch_in != '0') or (attendance.punch_out and attendance.punch_out != '0'):
                    unique_dates.add(attendance_date_str)

                if leave_status == 'Approved':
                    leave_days += 1.0
                    prev_attendance = attendance
                    continue

                if leave_status == 'Rejected' and leave_type in ['Full Leave', 'Half Leave']:
                    if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
                        leave_days += 1.0
                        rejected_double_leave_days += 1.0
                        prev_attendance = attendance
                        continue
                    if (not attendance.punch_in or attendance.punch_in == '0') or (not attendance.punch_out or attendance.punch_out == '0'):
                        rejected_double_half_days += 1
                        prev_attendance = attendance
                        continue

                # if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
                #     leave_days += 1.0
                #     prev_attendance = attendance
                #     continue

                if (not attendance.punch_in or attendance.punch_in == '0') and (not attendance.punch_out or attendance.punch_out == '0'):
                    if attendance_date_str in second_fourth_saturdays:
                        half_days += 1.0  # Only half-day if absent on 2nd/4th Saturday
                    else:
                        leave_days += 1.0
                    prev_attendance = attendance
                    continue

                if not attendance.punch_in or attendance.punch_in == '0':
                    half_days += 1.0
                    prev_attendance = attendance
                    continue

                try:
                    punch_in_time = datetime.strptime(attendance.punch_in, "%H:%M")
                    punch_out_time = None

                    if attendance.punch_out and attendance.punch_out != '0':
                        punch_out_time = datetime.strptime(attendance.punch_out, "%H:%M")

                    if not punch_out_time or punch_out_time == 0:
                        half_days += 1.0
                        prev_attendance = attendance
                        continue

                    if emp_shift == "09:00 - 18:00":
                        shift_start_time = datetime.strptime("09:00", "%H:%M")
                        shift_end_time = datetime.strptime("18:00", "%H:%M")
                    else:
                        shift_start_time = datetime.strptime("10:00", "%H:%M")
                        shift_end_time = datetime.strptime("19:00", "%H:%M")

                    if punch_in_time < shift_start_time:
                        overtime_minutes += (shift_start_time - punch_in_time).total_seconds() / 60

                    if punch_out_time > shift_end_time:
                        overtime_minutes += (punch_out_time - shift_end_time).total_seconds() / 60

                    if attendance_date_str not in second_fourth_saturdays:
                        if punch_in_time > (shift_start_time + timedelta(minutes=15)):
                            late_punches += 1.0
                            half_days += 1.0
                        elif punch_out_time < shift_end_time:
                            early_punches += 1.0
                            half_days += 1.0
                        else:
                            full_days += 1.0
                    else:
                        full_days += 1.0  # Consider full day even if it's not

                except ValueError:
                    continue

                prev_attendance = attendance
            
        
            month_work_hours = total_month_work_minutes // 60
            month_work_remaining_minutes = total_month_work_minutes % 60
            total_month_work_str = f"{month_work_hours}hr {month_work_remaining_minutes}m" if month_work_hours else f"{month_work_remaining_minutes}minutes"
            
            pure_worked_minutes = total_month_work_minutes - total_month_breaks
            pure_work_hours = pure_worked_minutes // 60
            pure_work_remaining_minutes = pure_worked_minutes % 60
            pure_month_work_str = f"{pure_work_hours}hr {pure_work_remaining_minutes}m" if pure_work_hours else f"{pure_work_remaining_minutes}minutes"
            
            # âœ… Corrected total_days_worked logic
            total_days_worked = float(len(unique_dates))
            
            # Ensure from_date and to_date are datetime objects
            if isinstance(from_date, str):
                from_date_dt = datetime.strptime(from_date, "%Y-%m-%d")
            else:
                from_date_dt = from_date
            
            if isinstance(to_date, str):
                to_date_dt = datetime.strptime(to_date, "%Y-%m-%d")
            else:
                to_date_dt = to_date
            
            # Then calculate total_month_days
            total_month_days = float((to_date_dt - from_date_dt).days + 1)

            overtime_hours = float(overtime_minutes // 60)
            overtime_remaining_minutes = float(overtime_minutes % 60)

            reports = tbl_daily_report.objects.filter(
                userId=user_id,
                reportDate__range=[from_date, to_date]
            )

            half_missing_reports = full_missing_reports = days_half_report = days_full_report = sunday_count = 0

            for report in reports:
                lep_entries = [report.lep1, report.lep2, report.lep3]
                missing_count = lep_entries.count("") + lep_entries.count("0")

                if missing_count == 0:
                    days_full_report += 1
                if missing_count >= 1:
                    days_half_report += 1
                if missing_count == 1:
                    half_missing_reports += 1
                elif missing_count == 2:
                    half_missing_reports += 2
                elif missing_count == 3:
                    full_missing_reports += 3

            reported_dates = set(report.reportDate.strftime('%Y-%m-%d') for report in reports)
            
            if isinstance(from_date, str):
                current = datetime.strptime(from_date, "%Y-%m-%d")
            else:
                current = from_date

            if isinstance(to_date, str):
                end = datetime.strptime(to_date, "%Y-%m-%d")
            else:
                end = to_date

            while current <= end:
                if current.weekday() == 6:
                    sunday_count += 1
                elif current.strftime('%Y-%m-%d') not in reported_dates:
                    full_missing_reports += 1
                current += timedelta(days=1)

            penalty_leaves = float(rejected_double_leave_days)
            penalty_halfs = 0.5 * float(rejected_double_half_days)

            final_leaves = float(leave_days) + float(penalty_leaves) + 0.5 * float(half_days) + float(penalty_halfs)

            # paid_days = float(full_days)
            # paid_days += float(sunday_attendances)
            # paid_days += 0.5 * float(half_days)
            # # leave_days_ = float(leave_days)
            # # leave_days_ += 0.5 * float(half_days)
            # leave_days_ = float(final_leaves)

            paid_days = float(full_days) - (float(penalty_halfs) + float(penalty_leaves)) + len(exception_leave_dates) + holiday_count
            paid_days += float(sunday_attendances)
            paid_days += 0.5 * float(half_days)
            # leave_days_ = float(leave_days)
            # leave_days_ += 0.5 * float(half_days)
            leave_days_ = float(final_leaves) + len(exception_leave_dates) + holiday_count

            if leave_days_:
                if leave_days_ == 0.5:
                    paid_days += 0.5
                elif leave_days_ == 1:
                    paid_days += 1
                elif leave_days_ >= 1.5:
                    paid_days += 1.5

            emp_salary = float(employee.gross_sal or 0.0)
            per_day_salary = emp_salary / total_month_days if total_month_days else 0.0
            amount = round(per_day_salary * paid_days, 2)

            advance_salary = tbl_adv_salary.objects.filter(emp_id=emp_id, salary_date__range=(from_date, to_date))
            adv_amount = sum(adv.adv_salary for adv in advance_salary)

            leaves_list = []
            for leave in leave_apps.values('leave_type', 'app_start_date', 'app_end_date', 'reason', 'status'):
                leave['app_start_date'] = leave['app_start_date'].strftime('%d-%m-%Y')
                leave['app_end_date'] = leave['app_end_date'].strftime('%d-%m-%Y')
                leaves_list.append(leave)
            
            task_list = [
                {
                    **task,
                    'assign_date': task['assign_date'].strftime('%d-%m-%Y') if task['assign_date'] else None,
                    'complete_date': task['complete_date'].strftime('%d-%m-%Y') if task['complete_date'] else None
                }
                for task in tasks.values(
                    'task_type',
                    'assign_date',
                    'complete_date',
                    'task_name',
                    'status',
                    'description',
                    'delay_count'
                )
            ]
            exception_leaves_count = len(exception_leave_dates)
            if isinstance(from_date, str):
                from_date_obj = datetime.strptime(from_date, "%Y-%m-%d")
            else:
                from_date_obj = from_date
            
            if isinstance(to_date, str):
                to_date_obj = datetime.strptime(to_date, "%Y-%m-%d")
            else:
                to_date_obj = to_date
            
            context = {
                'emp_id': employee.emp_id,
                'full_name': full_name,
                'company_name': company_name,
                'company_address': company_address, 
                'exception_leaves': exception_leaves_count,
                'breaks': breaks_data,
                'm_total_break_str': total_month_breaks_str,
                'total_month_worked_hours': total_month_work_str,
                'pure_month_work_str': pure_month_work_str,
                'holiday_count': holiday_count,
                'final_leaves': final_leaves,
                'paid_days': paid_days,
                'amount': amount,
                'adv_amount': adv_amount,
                'tax': 200,
                'emp_salary': emp_salary,
                'after_deductions': amount - adv_amount - 200,
                'leaves_data': leaves_list,
                'attendances': attendance_data,
                'total_days_worked': total_days_worked,
                'total_month_days': total_month_days,
                'full_days': full_days,
                'half_days': half_days,
                'late_punches': late_punches,
                'early_punches': early_punches,
                'sunday_attendances': sunday_attendances,
                'leave_days': leave_days,
                'rejected_double_leave_days': rejected_double_leave_days,
                'rejected_double_half_days': rejected_double_half_days,
                'overtime_hours': overtime_hours,
                'overtime_remaining_minutes': overtime_remaining_minutes,
                # 'from_date': datetime.strptime(from_date, "%Y-%m-%d").strftime("%d-%m-%Y"),
                # 'to_date': datetime.strptime(to_date, "%Y-%m-%d").strftime("%d-%m-%Y"),
                'from_date': from_date_obj.strftime("%d-%m-%Y"),
                'to_date': to_date_obj.strftime("%d-%m-%Y"),
                # 'tasks': list(tasks.values('task_type', 'task_name', 'status', 'description', 'delay_count')),
                'tasks': task_list,
                'total_task': total_task,
                'complete_task': complete_task,
                'pending_task': pending_task,
                'revised_task': revised_task,
                'task_delay': task_delay,
                'half_missing_reports': half_missing_reports,
                'full_missing_reports': full_missing_reports,
                'days_half_report': days_half_report,
                'days_full_report': days_full_report,
                'sunday_count': sunday_count,
                'session_roleid': session_roleid
            }
            
            if action == "download":
                response = HttpResponse(content_type='application/pdf')
                response['Content-Disposition'] = f'attachment; filename="Employee_Report_{emp_id}.pdf"'
            
                p = canvas.Canvas(response, pagesize=letter)
                width, height = letter
            
                # Title & Header Info
                p.setFont("Helvetica-Bold", 16)
                p.drawString(200, height - 40, "Employee Report")
            
                p.setFont("Helvetica", 11)
                p.drawString(50, height - 80, f"Employee ID: {emp_id}")
                p.drawString(250, height - 80, f"From: {context['from_date']} To: {context['to_date']}")
                p.drawString(50, height - 95, f"Employee Name: {context['full_name']}")
                p.drawString(50, height - 110, f"Employee Company: {context['company_name']}")
            
                y = height - 140  # Added more spacing
            
                # Attendance Details
                p.setFont("Helvetica-Bold", 16)
                p.drawString(50, y, "Attendance Details")
                y -= 20  # Space after section title
            
                p.setFont("Helvetica-Bold", 13)
                p.drawString(60, y, "Description")
                p.drawString(180, y, "Details")
                p.drawString(320, y, "Description")
                p.drawString(440, y, "Details")
                y -= 12
                p.line(55, y, 500, y)
                y -= 16
            
                p.setFont("Helvetica", 11)
                salary_details = [
                    # ("From Date", datetime.strptime(from_date, "%Y-%m-%d").strftime("%d-%m-%Y")),
                    # ("To Date", datetime.strptime(to_date, "%Y-%m-%d").strftime("%d-%m-%Y")),
                    ("From Date", from_date.strftime("%d-%m-%Y") if isinstance(from_date, datetime) else datetime.strptime(from_date, "%Y-%m-%d").strftime("%d-%m-%Y")),
                    ("To Date", to_date.strftime("%d-%m-%Y") if isinstance(to_date, datetime) else datetime.strptime(to_date, "%Y-%m-%d").strftime("%d-%m-%Y")),
                    ("Total Days", context['total_month_days']),
                    ("Total Days Worked", context['total_days_worked']),
                    ("Sundays", context['sunday_attendances']),
                    ("Holidays", context['holiday_count']),
                    ("Leaves", context['leave_days']),
                    ("Full Days", context['full_days']),
                    ("Half Days", context['half_days']),
                    ("Late Punches", context['late_punches']),
                    ("Early Punches", context['early_punches']),
                    ("Rejected Leaves Taken", context['rejected_double_leave_days']),
                    ("Rejected Halfs Taken", context['rejected_double_half_days']),
                    ("Total Overtime", f"{context['overtime_hours']} hours {context['overtime_remaining_minutes']} minutes"),
                    ("Exception leaves", context['exception_leaves']),
                    ("leaves including penalty", context['final_leaves']),
                ]
            
                for i in range(0, len(salary_details), 2):
                    label1, value1 = salary_details[i]
                    p.drawString(60, y, str(label1)[:25])
                    p.drawString(180, y, str(value1))
            
                    if i + 1 < len(salary_details):
                        label2, value2 = salary_details[i + 1]
                        p.drawString(320, y, str(label2)[:25])
                        p.drawString(440, y, str(value2))
            
                    y -= 16  # Increased spacing between rows
            
                y -= 20  # Extra space before next section
            
                # # Salary Details
                # p.setFont("Helvetica-Bold", 16)
                # p.drawString(50, y, "Salary Details")
                # y -= 20
            
                # p.setFont("Helvetica-Bold", 13)
                # p.drawString(60, y, "Description")
                # p.drawString(300, y, "Details")
                # y -= 12
                # p.line(55, y, 500, y)
                # y -= 16
            
                # p.setFont("Helvetica", 11)
                # salary_details = [
                #     ("Employee Salary", context['emp_salary']),
                #     ("Paid Days", context['paid_days']),
                #     ("Paid days Amount", context['amount']),
                #     ("Advance Amount", context['adv_amount']),
                #     ("Tax", context['tax']),
                #     ("After Deductions", context['after_deductions']),
                # ]
            
                # for label, value in salary_details:
                #     p.drawString(60, y, str(label)[:40])
                #     p.drawString(300, y, str(value))
                #     y -= 16
            
                # y -= 20
            
                # Task Summary
                p.setFont("Helvetica-Bold", 16)
                p.drawString(50, y, "Task Summary (Counts)")
                y -= 20
            
                p.setFont("Helvetica-Bold", 13)
                p.drawString(60, y, "Description")
                p.drawString(300, y, "Details")
                y -= 12
                p.line(55, y, 500, y)
                y -= 16
            
                p.setFont("Helvetica", 11)
                summary_data = [
                    ("Total Tasks", context['total_task']),
                    ("Completed Tasks", context['complete_task']),
                    ("Pending Tasks", context['pending_task']),
                    ("Revised Tasks", context['revised_task']),
                    ("Total Delay", f"{context['task_delay']} days"),
                ]
            
                for label, value in summary_data:
                    if label == "Total Delay":
                        p.setFont("Helvetica-Bold", 11)
                        p.line(55, y, 500, y)
                        y -= 14
            
                    p.setFont("Helvetica", 11)
                    p.drawString(60, y, str(label)[:40])
                    p.drawString(300, y, str(value))
                    y -= 16
            
                y -= 20
            
                # Daily Report Summary
                p.setFont("Helvetica-Bold", 16)
                p.drawString(50, y, "Daily Report Summary")
                y -= 18
            
                lep_summary = [
                    ("Half Missing Reports", context['half_missing_reports']),
                    ("No. of days (Half Missing Reports)", context['days_half_report']),
                    ("No. of days (Complete Reports)", context['days_full_report']),
                    ("No. of days (No report at all excluding Sunday)", context['full_missing_reports']),
                    ("No. of Sundays (No Reports)", context['sunday_count']),
                ]
            
                p.setFont("Helvetica-Bold", 13)
                p.drawString(60, y, "Description")
                p.drawString(400, y, "Details")
                y -= 12
                p.line(55, y, 500, y)
                y -= 16
            
                p.setFont("Helvetica", 11)
                for label, value in lep_summary:
                    p.drawString(60, y, label[:40])
                    p.drawString(400, y, str(value))
                    y -= 16
            
                # Finalize the PDF
                p.save()
                return response
    
            else:
                request.session['details_context'] = context
                request.session['ss_context'] = context
                return redirect('intern_details', emp_id=emp_id)

        else:
            return render(request, "intern_details.html", {
                'error_message': "Please select a valid date range.",
                'session_roleid': session_roleid
            })
    else:
        return redirect('login')

def salary_history(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        user_compeny = request.session['user_compney']
        Username = request.session['session_user']  
        employees = tbl_employee.objects.all().order_by("name")
           
        return render(request, "salary-history-form.html", {
                'employees': employees,
                'Username': Username,
                'comp_name': user_compeny,
                'session_roleid': session_roleid,
                'companey_list': master_company.objects.all(),
                'company_id': company_id
            })
    else:
        return redirect(login)


def add_salary_history(request):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        
        if request.method == 'POST':
            userid = request.session['session_id']
            salary = request.POST['salary']
            emp_id = request.POST['emp_id']
            
            employee = tbl_employee.objects.get(emp_id=emp_id)
            name = f"{employee.name} {employee.middle_name} {employee.last_name}"
            
            increment_date = request.POST['increment_date']
            
            new_record = tbl_salary_history.objects.create(
                salary = salary,
                emp_id = emp_id,
                name = name,
                increment_date = increment_date,
                add_by_name=Username,
                add_by_id=userid,
                created_date = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_record.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add salary_history - {name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            log_user_activity(
                ope='Add salary_history',
                comment='Added a salary history.',
                lanti=None,  
                longti=None,  
                by_user_id=userid,
                by_user_name=Username,
                status='online'
            )
            return JsonResponse({'status': 'success', 'message': f'Salary history {name} added successfully!'})
        return render(request, "salary_history-leasting.html",{'session_roleid':session_roleid})
    else:
        return redirect(login)
 
def salary_record(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        user_compeny = request.session['user_compney']
        Username = request.session['session_user']  
        employees = tbl_employee.objects.all().order_by("name")
           
        return render(request, "salary-history-form_.html", {
                'employees': employees,
                'Username': Username,
                'comp_name': user_compeny,
                'session_roleid': session_roleid,
                'companey_list': master_company.objects.all(),
                'company_id': company_id
            })
    else:
        return redirect(login)

def add_salary_record(request, emp_id):
    if 'session_id' in request.session:
        Username = request.session['session_user']
        user_compeny = request.session['user_compney']
        session_roleid = request.session.get('session_roleid')
        employee = tbl_employee.objects.get(emp_id=emp_id)
        name = f"{employee.name} {employee.middle_name} {employee.last_name}"
        
        if request.method == 'POST':
            userid = request.session['session_id']
            salary = request.POST['salary']

            increment_date = request.POST['increment_date']
            
            new_record = tbl_salary_history.objects.create(
                salary = salary,
                emp_id = emp_id,
                name = name,
                increment_date = increment_date,
                add_by_name=Username,
                add_by_id=userid,
                created_date = timezone.now() + timedelta(hours=5, minutes=30),
            )
            new_record.save()
            
            ip_address = get_client_ip(request)
            tbl_messages.objects.create(
                message_name = request.session['session_user'],
                change_status=f"Add salary_history - {name}",
                added_date = timezone.now() + timedelta(hours=5, minutes=30),
                company_id = request.session['company_id'],
                user_id = request.session['session_id'],
                ip_address = ip_address,
            )
            
            log_user_activity(
                ope='Add salary_history',
                comment='Added a salary history.',
                lanti=None,  
                longti=None,  
                by_user_id=userid,
                by_user_name=Username,
                status='online'
            )
            return JsonResponse({'status': 'success', 'message': f'Salary history {name} added successfully!'})
        return render(request, "salary-history-form_.html",{'session_roleid':session_roleid, "employee_id":employee.emp_id})
    else:
        return redirect(login)
 
def edit_salary_record(request, id , emp_id):
    if 'session_id' not in request.session:
        return redirect(login)

    session_roleid = request.session.get('session_roleid')
    company_data = master_company.objects.all()
    salary_history = get_object_or_404(tbl_salary_history, id=id)
    
    employee = tbl_employee.objects.get(emp_id=salary_history.emp_id)
    salary_history.name = f"{employee.name} {employee.middle_name} {employee.last_name}"

    if request.method == 'POST':
        # salary_history.emp_id = request.POST.get('emp_id')
        salary_history.salary = request.POST.get('salary')
        salary_history.increment_date = request.POST.get('increment_date')
        
        
        salary_history.save()

        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name=request.session['session_user'],
            change_status=f"Edit salary_history - {salary_history.name}",
            added_date=timezone.now() + timedelta(hours=5, minutes=30),
            company_id=request.session['company_id'],
            user_id=request.session['session_id'],
            ip_address=ip_address,
        )

        return JsonResponse({
            'status': 'success',
            'message': f'Salary history "{salary_history.name}" has been successfully updated!'
        })

    data = tbl_salary_history.objects.get(id=id)

    return render(request, "salary-history-form_.html", {
        'company_data': company_data,
        'lead': salary_history,
        'employee_id': employee.emp_id,
        'session_roleid': session_roleid,
        'is_edit': True
    })


def salary_history_list(request):
    if 'session_id' in request.session:
        session_id = request.session.get('session_id')
        session_roleid = request.session.get('session_roleid')
        company_id = request.session['company_id']
        user_compeny = request.session['user_compney']
        Username = request.session['session_user']
            
        data = tbl_salary_history.objects.all().order_by("-id") 

            
        return render(request, "salary-history-list.html", {
            'data': data,
            'Username': Username,
            'comp_name': user_compeny,
            'session_roleid': session_roleid,
            'company_id': company_id
            })
    else:
        return redirect(login)




def edit_salary_history(request, id):
    if 'session_id' not in request.session:
        return redirect(login)

    session_roleid = request.session.get('session_roleid')
    company_data = master_company.objects.all()
    salary_history = get_object_or_404(tbl_salary_history, id=id)
    
    employee = tbl_employee.objects.get(emp_id=salary_history.emp_id)
    salary_history.name = f"{employee.name} {employee.middle_name} {employee.last_name}"

    if request.method == 'POST':
        # salary_history.emp_id = request.POST.get('emp_id')
        salary_history.salary = request.POST.get('salary')
        salary_history.increment_date = request.POST.get('increment_date')
        
        
        salary_history.save()

        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name=request.session['session_user'],
            change_status=f"Edit salary_history - {salary_history.name}",
            added_date=timezone.now() + timedelta(hours=5, minutes=30),
            company_id=request.session['company_id'],
            user_id=request.session['session_id'],
            ip_address=ip_address,
        )

        return JsonResponse({
            'status': 'success',
            'message': f'Salary history "{salary_history.name}" has been successfully updated!'
        })

    data = tbl_salary_history.objects.get(id=id)

    return render(request, "salary-history-form.html", {
        'company_data': company_data,
        'lead': salary_history,
        'employee_id': employee.emp_id,
        'session_roleid': session_roleid,
        'is_edit': True
    })

def delete_salary_history(request, id):
    if 'session_id' in request.session:
        salary_history = get_object_or_404(tbl_salary_history, id=id)
        
        ip_address = get_client_ip(request)
        tbl_messages.objects.create(
            message_name = request.session['session_user'],
            change_status=f"Delete salary_history - {salary_history.name}",
            added_date = timezone.now() + timedelta(hours=5, minutes=30),
            company_id = request.session['company_id'],
            user_id = request.session['session_id'],
            ip_address = ip_address,
        )
        
        salary_history.delete()
        return JsonResponse({'success': True, 'name': salary_history.name})
    
    else:
        return redirect(login)

